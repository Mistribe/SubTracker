name: Build and Deploy Backend to Azure Container Apps
on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths:
      - 'backend/**'
      - '.github/workflows/backend-docker-image.yml'

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute VERSION
        id: meta
        shell: bash
        run: |
          if git describe --tags --exact-match >/dev/null 2>&1; then
            RAW_TAG="$(git describe --tags --exact-match)"
            VERSION="${RAW_TAG#v}"
          else
            VERSION="$(echo "${GITHUB_SHA}" | cut -c1-12)"
          fi
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Dev Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV_USR }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV_PWD }}

      - name: Build and push linux/amd64 images
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/cmd/api/Dockerfile
          platforms: linux/amd64
          push: true
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
          labels: |
            org.opencontainers.image.title=subtracker-backend-api
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.run_id }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            com.mistribe.subtracker.version=${{ steps.meta.outputs.version }}
            com.mistribe.subtracker.git-sha=${{ github.sha }}
          tags: |
            ghcr.io/mistribe/subtracker/backend-api:${{ steps.meta.outputs.version }}-amd64
            ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}/mistribe/subtracker/backend-api:${{ steps.meta.outputs.version }}-amd64

  build-arm64:
    # Use GitHub-hosted ARM64 runner or your self-hosted ARM64 runner label
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
    needs: build-amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Dev Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV_USR }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV_PWD }}

      - name: Build and push linux/arm64 images
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/cmd/api/Dockerfile
          platforms: linux/arm64
          push: true
          build-args: |
            VERSION=${{ needs.build-amd64.outputs.version }}
          labels: |
            org.opencontainers.image.title=subtracker-backend-api
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.run_id }}
            org.opencontainers.image.version=${{ needs.build-amd64.outputs.version }}
            com.mistribe.subtracker.version=${{ needs.build-amd64.outputs.version }}
            com.mistribe.subtracker.git-sha=${{ github.sha }}
          tags: |
            ghcr.io/mistribe/subtracker/backend-api:${{ needs.build-amd64.outputs.version }}-arm64
            ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}/mistribe/subtracker/backend-api:${{ needs.build-amd64.outputs.version }}-arm64

  manifest:
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64]
    outputs:
      version: ${{ needs.build-amd64.outputs.version }}
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Dev Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV_USR }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV_PWD }}

      - name: Create and push multi-arch manifests (GHCR)
        run: |
          VERSION='${{ needs.build-amd64.outputs.version }}'
          IMAGE_GHCR='ghcr.io/mistribe/subtracker/backend-api'
          docker manifest create "${IMAGE_GHCR}:${VERSION}" \
            --amend "${IMAGE_GHCR}:${VERSION}-amd64" \
            --amend "${IMAGE_GHCR}:${VERSION}-arm64"
          docker manifest push "${IMAGE_GHCR}:${VERSION}"
          docker manifest create "${IMAGE_GHCR}:latest" \
            --amend "${IMAGE_GHCR}:${VERSION}-amd64" \
            --amend "${IMAGE_GHCR}:${VERSION}-arm64"
          docker manifest push "${IMAGE_GHCR}:latest"

      - name: Create and push multi-arch manifests (ACR)
        run: |
          VERSION='${{ needs.build-amd64.outputs.version }}'
          IMAGE_ACR='${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}/mistribe/subtracker/backend-api'
          docker manifest create "${IMAGE_ACR}:${VERSION}" \
            --amend "${IMAGE_ACR}:${VERSION}-amd64" \
            --amend "${IMAGE_ACR}:${VERSION}-arm64"
          docker manifest push "${IMAGE_ACR}:${VERSION}"
          docker manifest create "${IMAGE_ACR}:latest" \
            --amend "${IMAGE_ACR}:${VERSION}-amd64" \
            --amend "${IMAGE_ACR}:${VERSION}-arm64"
          docker manifest push "${IMAGE_ACR}:latest"

  deploy:
    name: Deploy to Azure Container Apps
    needs: manifest
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Update Azure Container App to new image (create new revision)
        uses: azure/cli@v2
        env:
          ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}
          IMAGE_TAG: ${{ needs.manifest.outputs.version }}
          CONTAINER_APP_NAME: ${{ secrets.AZURE_CONTAINER_APP_NAME }}
          RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          CONTAINER_NAME: ${{ secrets.AZURE_CONTAINER_NAME || 'backend-api' }}
        with:
          inlineScript: |
            echo "Updating Container App $CONTAINER_APP_NAME in $RESOURCE_GROUP to image ${ACR_LOGIN_SERVER}/mistribe/subtracker/backend-api:${IMAGE_TAG}"
            az containerapp update \
              --name "$CONTAINER_APP_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --image "${ACR_LOGIN_SERVER}/mistribe/subtracker/backend-api:${IMAGE_TAG}" \
              --container-name "$CONTAINER_NAME"
            echo "Forcing new revision activation"
            az containerapp revision copy \
              --name "$CONTAINER_APP_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --latest
