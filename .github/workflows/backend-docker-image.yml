name: Build and Deploy Backend to Azure Container Apps
on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths:
      - 'backend/**'
      - '.github/workflows/backend-docker-image.yml'

jobs:
  meta:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Compute VERSION
        id: meta
        shell: bash
        run: |
          if git describe --tags --exact-match >/dev/null 2>&1; then
            RAW_TAG="$(git describe --tags --exact-match)"
            VERSION="${RAW_TAG#v}"
          else
            VERSION="$(echo "${GITHUB_SHA}" | cut -c1-12)"
          fi
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: meta
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Dev Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV_USR }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV_PWD }}

      - name: Build and push multi-arch images to GHCR and ACR
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/cmd/api/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VERSION=${{ needs.meta.outputs.version }}
          labels: |
            org.opencontainers.image.title=subtracker-backend-api
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.run_id }}
            org.opencontainers.image.version=${{ needs.meta.outputs.version }}
            com.mistribe.subtracker.version=${{ needs.meta.outputs.version }}
            com.mistribe.subtracker.git-sha=${{ github.sha }}
          tags: |
            ghcr.io/mistribe/subtracker/backend-api:${{ needs.meta.outputs.version }}
            ghcr.io/mistribe/subtracker/backend-api:latest
            ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}/mistribe/subtracker/backend-api:${{ needs.meta.outputs.version }}
            ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}/mistribe/subtracker/backend-api:latest


  deploy:
    name: Deploy to Azure Container Apps
    needs: [meta, build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Update Azure Container App to new image (create new revision)
        uses: azure/cli@v2
        env:
          ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}
          IMAGE_TAG: ${{ needs.meta.outputs.version }}
          CONTAINER_APP_NAME: ${{ secrets.AZURE_CONTAINER_APP_NAME }}
          RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          CONTAINER_NAME: ${{ secrets.AZURE_CONTAINER_NAME || 'backend-api' }}
        with:
          inlineScript: |
            echo "Deploying version: ${IMAGE_TAG}"
            echo "Updating Container App $CONTAINER_APP_NAME in $RESOURCE_GROUP to image ${ACR_LOGIN_SERVER}/mistribe/subtracker/backend-api:${IMAGE_TAG}"
            # Run the update, capture all output, and show only on failure
            OUTPUT_FILE="$(mktemp)"
            if az containerapp update \
              --name "$CONTAINER_APP_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --image "${ACR_LOGIN_SERVER}/mistribe/subtracker/backend-api:${IMAGE_TAG}" \
              --container-name "$CONTAINER_NAME" \
              >"$OUTPUT_FILE" 2>&1; then
              echo "Azure Container App updated successfully."
            else
              echo "Azure Container App update failed. Showing command output:"
              cat "$OUTPUT_FILE"
              exit 1
            fi
