/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHttpErrorResponseFromDiscriminatorValue, createSubscriptionSummaryResponseFromDiscriminatorValue, type HttpErrorResponse, type SubscriptionSummaryResponse } from '../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /summary
 */
export interface SummaryRequestBuilder extends BaseRequestBuilder<SummaryRequestBuilder> {
    /**
     * Returns summary information about subscriptions including total costs and upcoming renewals
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubscriptionSummaryResponse>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     */
     get(requestConfiguration?: RequestConfiguration<SummaryRequestBuilderGetQueryParameters> | undefined) : Promise<SubscriptionSummaryResponse | undefined>;
    /**
     * Returns summary information about subscriptions including total costs and upcoming renewals
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SummaryRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Returns summary information about subscriptions including total costs and upcoming renewals
 */
export interface SummaryRequestBuilderGetQueryParameters {
    /**
     * Number of top providers to return
     */
    topProviders?: number;
    /**
     * Include monthly total costs
     */
    totalMonthly?: boolean;
    /**
     * Include yearly total costs
     */
    totalYearly?: boolean;
    /**
     * Number of upcoming renewals to return
     */
    upcomingRenewals?: number;
}
/**
 * Uri template for the request builder.
 */
export const SummaryRequestBuilderUriTemplate = "{+baseurl}/summary?top_providers={top_providers}&total_monthly={total_monthly}&total_yearly={total_yearly}&upcoming_renewals={upcoming_renewals}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SummaryRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "topProviders": "top_providers",
    "totalMonthly": "total_monthly",
    "totalYearly": "total_yearly",
    "upcomingRenewals": "upcoming_renewals",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SummaryRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SummaryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscriptionSummaryResponseFromDiscriminatorValue,
        queryParametersMapper: SummaryRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
