/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHttpErrorResponseFromDiscriminatorValue, createPaginatedResponseModelEndpoints_SubscriptionModelFromDiscriminatorValue, createSubscriptionModelFromDiscriminatorValue, serializeCreateSubscriptionModel, serializePatchSubscriptionModel, serializeSubscriptionModel, type CreateSubscriptionModel, type HttpErrorResponse, type PaginatedResponseModelEndpoints_SubscriptionModel, type PatchSubscriptionModel, type SubscriptionModel } from '../models/index.js';
// @ts-ignore
import { type WithSubscriptionItemRequestBuilder, WithSubscriptionItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { SummaryRequestBuilderRequestsMetadata, type SummaryRequestBuilder } from './summary/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /subscriptions
 */
export interface SubscriptionsRequestBuilder extends BaseRequestBuilder<SubscriptionsRequestBuilder> {
    /**
     * The summary property
     */
    get summary(): SummaryRequestBuilder;
    /**
     * Gets an item from the ApiSdk.subscriptions.item collection
     * @param subscriptionId Subscription ID (UUID format)
     * @returns {WithSubscriptionItemRequestBuilder}
     */
     bySubscriptionId(subscriptionId: string) : WithSubscriptionItemRequestBuilder;
    /**
     * Retrieve a paginated list of all subscriptions for the authenticated user
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PaginatedResponseModelEndpoints_SubscriptionModel>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<SubscriptionsRequestBuilderGetQueryParameters> | undefined) : Promise<PaginatedResponseModelEndpoints_SubscriptionModel | undefined>;
    /**
     * Update or create a subscription with complete details. If subscription doesn't exist, it will be created.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubscriptionModel>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 401 status code
     * @throws {HttpErrorResponse} error when the service returns a 404 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     patch(body: PatchSubscriptionModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SubscriptionModel | undefined>;
    /**
     * Create a new subscription with provider, plan, pricing, and payment information
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubscriptionModel>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 401 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     post(body: CreateSubscriptionModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SubscriptionModel | undefined>;
    /**
     * Retrieve a paginated list of all subscriptions for the authenticated user
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SubscriptionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update or create a subscription with complete details. If subscription doesn't exist, it will be created.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: PatchSubscriptionModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Create a new subscription with provider, plan, pricing, and payment information
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateSubscriptionModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve a paginated list of all subscriptions for the authenticated user
 */
export interface SubscriptionsRequestBuilderGetQueryParameters {
    /**
     * Filter by start date (RFC3339)
     */
    fromDate?: string;
    /**
     * Number of items per page (default: 10)
     */
    limit?: number;
    /**
     * Page number (default: 0)
     */
    offset?: number;
    /**
     * Filter by provider IDs
     */
    providers?: string[];
    /**
     * Filter by recurrency types
     */
    recurrencies?: string[];
    /**
     * Search text
     */
    search?: string;
    /**
     * Sort by field
     */
    sortBy?: string;
    /**
     * Sort order (asc, desc)
     */
    sortOrder?: string;
    /**
     * Filter by end date (RFC3339)
     */
    toDate?: string;
    /**
     * Filter by user IDs
     */
    users?: string[];
    /**
     * Include inactive subscriptions
     */
    withInactive?: boolean;
}
/**
 * Uri template for the request builder.
 */
export const SubscriptionsRequestBuilderUriTemplate = "{+baseurl}/subscriptions{?fromDate*,limit*,offset*,providers*,recurrencies*,search*,sortBy*,sortOrder*,toDate*,users*,with_inactive*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SubscriptionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "withInactive": "with_inactive",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SubscriptionsRequestBuilderNavigationMetadata: Record<Exclude<keyof SubscriptionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bySubscriptionId: {
        requestsMetadata: WithSubscriptionItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["subscriptionId"],
    },
    summary: {
        requestsMetadata: SummaryRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SubscriptionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SubscriptionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPaginatedResponseModelEndpoints_SubscriptionModelFromDiscriminatorValue,
        queryParametersMapper: SubscriptionsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: SubscriptionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscriptionModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePatchSubscriptionModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    post: {
        uriTemplate: SubscriptionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscriptionModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateSubscriptionModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
