/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHttpErrorFromDiscriminatorValue, createPaginatedResponseModelEndpoints_subscriptionModelFromDiscriminatorValue, createSubscriptionModelFromDiscriminatorValue, serializeCreateSubscriptionModel, serializePatchSubscriptionModel, serializeSubscriptionModel, type CreateSubscriptionModel, type HttpError, type PaginatedResponseModelEndpoints_subscriptionModel, type PatchSubscriptionModel, type SubscriptionModel } from '../models/index.js';
// @ts-ignore
import { type WithSubscriptionItemRequestBuilder, WithSubscriptionItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /subscriptions
 */
export interface SubscriptionsRequestBuilder extends BaseRequestBuilder<SubscriptionsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.subscriptions.item collection
     * @param subscriptionId Subscription ID
     * @returns {WithSubscriptionItemRequestBuilder}
     */
     bySubscriptionId(subscriptionId: string) : WithSubscriptionItemRequestBuilder;
    /**
     * Get all subscriptions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PaginatedResponseModelEndpoints_subscriptionModel>}
     * @throws {HttpError} error when the service returns a 400 status code
     */
     get(requestConfiguration?: RequestConfiguration<SubscriptionsRequestBuilderGetQueryParameters> | undefined) : Promise<PaginatedResponseModelEndpoints_subscriptionModel | undefined>;
    /**
     * Update an existing subscription with new details
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubscriptionModel>}
     * @throws {HttpError} error when the service returns a 400 status code
     */
     patch(body: PatchSubscriptionModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SubscriptionModel | undefined>;
    /**
     * Create a new subscription
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubscriptionModel>}
     * @throws {HttpError} error when the service returns a 400 status code
     */
     post(body: CreateSubscriptionModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SubscriptionModel | undefined>;
    /**
     * Get all subscriptions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SubscriptionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update an existing subscription with new details
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: PatchSubscriptionModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Create a new subscription
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateSubscriptionModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get all subscriptions
 */
export interface SubscriptionsRequestBuilderGetQueryParameters {
    /**
     * Offset number
     */
    page?: number;
    /**
     * Number of items per page
     */
    size?: number;
}
/**
 * Uri template for the request builder.
 */
export const SubscriptionsRequestBuilderUriTemplate = "{+baseurl}/subscriptions{?page*,size*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SubscriptionsRequestBuilderNavigationMetadata: Record<Exclude<keyof SubscriptionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bySubscriptionId: {
        requestsMetadata: WithSubscriptionItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["subscriptionId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SubscriptionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SubscriptionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPaginatedResponseModelEndpoints_subscriptionModelFromDiscriminatorValue,
    },
    patch: {
        uriTemplate: SubscriptionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscriptionModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePatchSubscriptionModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    post: {
        uriTemplate: SubscriptionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscriptionModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateSubscriptionModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
