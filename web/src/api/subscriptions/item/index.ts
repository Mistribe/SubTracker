/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHttpErrorResponseFromDiscriminatorValue, type HttpErrorResponse } from '../../models/ginx/index.js';
// @ts-ignore
import { createSubscriptionModelFromDiscriminatorValue, serializeSubscriptionModel, serializeUpdateSubscriptionModel, type SubscriptionModel, type UpdateSubscriptionModel } from '../../models/subscription/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /subscriptions/{subscriptionId}
 */
export interface WithSubscriptionItemRequestBuilder extends BaseRequestBuilder<WithSubscriptionItemRequestBuilder> {
    /**
     * Permanently delete an existing subscription
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 404 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve a single subscription with all its details including provider, plan, and pricing information
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubscriptionModel>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 404 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SubscriptionModel | undefined>;
    /**
     * Update an existing subscription's details including provider, plan, pricing, and payment information
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubscriptionModel>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 401 status code
     * @throws {HttpErrorResponse} error when the service returns a 404 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     put(body: UpdateSubscriptionModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SubscriptionModel | undefined>;
    /**
     * Permanently delete an existing subscription
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve a single subscription with all its details including provider, plan, and pricing information
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Update an existing subscription's details including provider, plan, pricing, and payment information
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdateSubscriptionModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithSubscriptionItemRequestBuilderUriTemplate = "{+baseurl}/subscriptions/{subscriptionId}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithSubscriptionItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithSubscriptionItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithSubscriptionItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscriptionModelFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithSubscriptionItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscriptionModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdateSubscriptionModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
