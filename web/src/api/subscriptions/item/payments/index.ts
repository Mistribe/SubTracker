/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHttpErrorFromDiscriminatorValue, createSubscriptionModelFromDiscriminatorValue, serializeCreateSubscriptionPaymentModel, serializeSubscriptionModel, type CreateSubscriptionPaymentModel, type HttpError, type SubscriptionModel } from '../../../models/index.js';
// @ts-ignore
import { type WithPaymentItemRequestBuilder, WithPaymentItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /subscriptions/{-id}/payments
 */
export interface PaymentsRequestBuilder extends BaseRequestBuilder<PaymentsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.subscriptions.item.payments.item collection
     * @param paymentId Payment ID
     * @returns {WithPaymentItemRequestBuilder}
     */
     byPaymentId(paymentId: string) : WithPaymentItemRequestBuilder;
    /**
     * Create a new subscription payment
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubscriptionModel>}
     * @throws {HttpError} error when the service returns a 400 status code
     */
     post(body: CreateSubscriptionPaymentModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SubscriptionModel | undefined>;
    /**
     * Create a new subscription payment
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateSubscriptionPaymentModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const PaymentsRequestBuilderUriTemplate = "{+baseurl}/subscriptions/{%2Did}/payments";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PaymentsRequestBuilderNavigationMetadata: Record<Exclude<keyof PaymentsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byPaymentId: {
        requestsMetadata: WithPaymentItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["paymentId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PaymentsRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: PaymentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscriptionModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateSubscriptionPaymentModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
