/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHttpErrorFromDiscriminatorValue, createSubscriptionModelFromDiscriminatorValue, serializeSubscriptionModel, serializeUpdatePaymentModel, type HttpError, type SubscriptionModel, type UpdatePaymentModel } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithPaymentDeleteRequestBody}
 */
// @ts-ignore
export function createWithPaymentDeleteRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithPaymentDeleteRequestBody;
}
/**
 * The deserialization information for the current model
 * @param WithPaymentDeleteRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithPaymentDeleteRequestBody(withPaymentDeleteRequestBody: Partial<WithPaymentDeleteRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithPaymentDeleteRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithPaymentDeleteRequestBody(writer: SerializationWriter, withPaymentDeleteRequestBody: Partial<WithPaymentDeleteRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withPaymentDeleteRequestBody || isSerializingDerivedType) { return; }
    writer.writeAdditionalData(withPaymentDeleteRequestBody.additionalData);
}
export interface WithPaymentDeleteRequestBody extends AdditionalDataHolder, Parsable {
}
/**
 * Builds and executes requests for operations under /subscriptions/{-id}/payments/{paymentId}
 */
export interface WithPaymentItemRequestBuilder extends BaseRequestBuilder<WithPaymentItemRequestBuilder> {
    /**
     * Delete a subscription payment
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {HttpError} error when the service returns a 400 status code
     */
     delete(body: WithPaymentDeleteRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Update payment details for a specific subscription
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubscriptionModel>}
     * @throws {HttpError} error when the service returns a 400 status code
     * @throws {HttpError} error when the service returns a 404 status code
     */
     put(body: UpdatePaymentModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SubscriptionModel | undefined>;
    /**
     * Delete a subscription payment
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(body: WithPaymentDeleteRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Update payment details for a specific subscription
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdatePaymentModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithPaymentItemRequestBuilderUriTemplate = "{+baseurl}/subscriptions/{%2Did}/payments/{paymentId}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithPaymentItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithPaymentItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithPaymentDeleteRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    put: {
        uriTemplate: WithPaymentItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscriptionModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdatePaymentModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
