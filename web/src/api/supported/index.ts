/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SupportedGetRequestBody}
 */
// @ts-ignore
export function createSupportedGetRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSupportedGetRequestBody;
}
/**
 * The deserialization information for the current model
 * @param SupportedGetRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSupportedGetRequestBody(supportedGetRequestBody: Partial<SupportedGetRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SupportedGetRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSupportedGetRequestBody(writer: SerializationWriter, supportedGetRequestBody: Partial<SupportedGetRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!supportedGetRequestBody || isSerializingDerivedType) { return; }
    writer.writeAdditionalData(supportedGetRequestBody.additionalData);
}
export interface SupportedGetRequestBody extends AdditionalDataHolder, Parsable {
}
/**
 * Builds and executes requests for operations under /supported
 */
export interface SupportedRequestBuilder extends BaseRequestBuilder<SupportedRequestBuilder> {
    /**
     * get details of all supported currencies
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<string[]>}
     */
     get(body: SupportedGetRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<string[] | undefined>;
    /**
     * get details of all supported currencies
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(body: SupportedGetRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const SupportedRequestBuilderUriTemplate = "{+baseurl}/supported";
/**
 * Metadata for all the requests in the request builder.
 */
export const SupportedRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SupportedRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendCollectionOfPrimitive",
        responseBodyFactory:  "string",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSupportedGetRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
