/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHttpErrorResponseFromDiscriminatorValue, serializeUpdateProfileModel, type HttpErrorResponse, type UpdateProfileModel } from '../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /users/profile
 */
export interface ProfileRequestBuilder extends BaseRequestBuilder<ProfileRequestBuilder> {
    /**
     * Updates the given name and family name for the authenticated user
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 401 status code
     */
     put(body: UpdateProfileModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Updates the given name and family name for the authenticated user
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdateProfileModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const ProfileRequestBuilderUriTemplate = "{+baseurl}/users/profile";
/**
 * Metadata for all the requests in the request builder.
 */
export const ProfileRequestBuilderRequestsMetadata: RequestsMetadata = {
    put: {
        uriTemplate: ProfileRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdateProfileModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
