/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCurrencyRatesModelFromDiscriminatorValue, createHttpErrorResponseFromDiscriminatorValue, type CurrencyRatesModel, type HttpErrorResponse } from '../../models/index.js';
// @ts-ignore
import { RefreshRequestBuilderRequestsMetadata, type RefreshRequestBuilder } from './refresh/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /currencies/rates
 */
export interface RatesRequestBuilder extends BaseRequestBuilder<RatesRequestBuilder> {
    /**
     * The refresh property
     */
    get refresh(): RefreshRequestBuilder;
    /**
     * Get exchange rates for all currencies at a specific date
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CurrencyRatesModel>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<RatesRequestBuilderGetQueryParameters> | undefined) : Promise<CurrencyRatesModel | undefined>;
    /**
     * Get exchange rates for all currencies at a specific date
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RatesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get exchange rates for all currencies at a specific date
 */
export interface RatesRequestBuilderGetQueryParameters {
    /**
     * Conversion date in RFC3339 format (default: current time)
     */
    date?: string;
}
/**
 * Uri template for the request builder.
 */
export const RatesRequestBuilderUriTemplate = "{+baseurl}/currencies/rates{?date*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RatesRequestBuilderNavigationMetadata: Record<Exclude<keyof RatesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    refresh: {
        requestsMetadata: RefreshRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RatesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: RatesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCurrencyRatesModelFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
