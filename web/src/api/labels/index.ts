/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHttpErrorFromDiscriminatorValue, createLabelModelFromDiscriminatorValue, createPaginatedResponseModelEndpoints_labelModelFromDiscriminatorValue, serializeCreateLabelModel, serializeLabelModel, type CreateLabelModel, type HttpError, type LabelModel, type PaginatedResponseModelEndpoints_labelModel } from '../models/index.js';
// @ts-ignore
import { DefaultRequestBuilderRequestsMetadata, type DefaultRequestBuilder } from './defaultEscaped/index.js';
// @ts-ignore
import { LabelsItemRequestBuilderRequestsMetadata, type LabelsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /labels
 */
export interface LabelsRequestBuilder extends BaseRequestBuilder<LabelsRequestBuilder> {
    /**
     * The default property
     */
    get defaultEscaped(): DefaultRequestBuilder;
    /**
     * Gets an item from the ApiSdk.labels.item collection
     * @param id Label ID (UUID format)
     * @returns {LabelsItemRequestBuilder}
     */
     byId(id: string) : LabelsItemRequestBuilder;
    /**
     * Retrieve a paginated list of labels with optional filtering by owner type
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PaginatedResponseModelEndpoints_labelModel>}
     * @throws {HttpError} error when the service returns a 400 status code
     * @throws {HttpError} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<LabelsRequestBuilderGetQueryParameters> | undefined) : Promise<PaginatedResponseModelEndpoints_labelModel | undefined>;
    /**
     * Create a new label with specified name, color, and owner information
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<LabelModel>}
     * @throws {HttpError} error when the service returns a 400 status code
     * @throws {HttpError} error when the service returns a 401 status code
     * @throws {HttpError} error when the service returns a 500 status code
     */
     post(body: CreateLabelModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<LabelModel | undefined>;
    /**
     * Retrieve a paginated list of labels with optional filtering by owner type
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<LabelsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new label with specified name, color, and owner information
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateLabelModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve a paginated list of labels with optional filtering by owner type
 */
export interface LabelsRequestBuilderGetQueryParameters {
    /**
     * Family ID (UUID format)
     */
    familyId?: string;
    /**
     * Number of items (default: 10)
     */
    limit?: number;
    /**
     * Offset (default: 0)
     */
    offset?: number;
    /**
     * Owner types to filter by (system,personal,family). Can be provided multiple times.
     */
    ownerType?: string[];
}
/**
 * Uri template for the request builder.
 */
export const LabelsRequestBuilderUriTemplate = "{+baseurl}/labels{?familyId*,limit*,offset*,owner_type*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const LabelsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "ownerType": "owner_type",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const LabelsRequestBuilderNavigationMetadata: Record<Exclude<keyof LabelsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: LabelsItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
    defaultEscaped: {
        requestsMetadata: DefaultRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const LabelsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: LabelsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPaginatedResponseModelEndpoints_labelModelFromDiscriminatorValue,
        queryParametersMapper: LabelsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: LabelsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createLabelModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateLabelModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
