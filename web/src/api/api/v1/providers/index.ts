/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createPaginatedResponseModelEndpoints_ProviderModelFromDiscriminatorValue, serializePaginatedResponseModelEndpoints_ProviderModel, type PaginatedResponseModelEndpoints_ProviderModel } from '../../../models/index.js';
// @ts-ignore
import { type WithProviderItemRequestBuilder, WithProviderItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProvidersGetRequestBody}
 */
// @ts-ignore
export function createProvidersGetRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProvidersGetRequestBody;
}
/**
 * The deserialization information for the current model
 * @param ProvidersGetRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProvidersGetRequestBody(providersGetRequestBody: Partial<ProvidersGetRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
export interface ProvidersGetRequestBody extends AdditionalDataHolder, Parsable {
}
/**
 * Builds and executes requests for operations under /api/v1/providers
 */
export interface ProvidersRequestBuilder extends BaseRequestBuilder<ProvidersRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.api.v1.providers.item collection
     * @param providerId Provider ID
     * @returns {WithProviderItemRequestBuilder}
     */
     byProviderId(providerId: Guid) : WithProviderItemRequestBuilder;
    /**
     * Returns a paginated list of providers
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PaginatedResponseModelEndpoints_ProviderModel>}
     */
     get(body: ProvidersGetRequestBody, requestConfiguration?: RequestConfiguration<ProvidersRequestBuilderGetQueryParameters> | undefined) : Promise<PaginatedResponseModelEndpoints_ProviderModel | undefined>;
    /**
     * Returns a paginated list of providers
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(body: ProvidersGetRequestBody, requestConfiguration?: RequestConfiguration<ProvidersRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Returns a paginated list of providers
 */
export interface ProvidersRequestBuilderGetQueryParameters {
    /**
     * Page number
     */
    page?: number;
    /**
     * Items per page
     */
    size?: number;
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProvidersGetRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProvidersGetRequestBody(writer: SerializationWriter, providersGetRequestBody: Partial<ProvidersGetRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!providersGetRequestBody || isSerializingDerivedType) { return; }
    writer.writeAdditionalData(providersGetRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ProvidersRequestBuilderUriTemplate = "{+baseurl}/api/v1/providers{?page*,size*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ProvidersRequestBuilderNavigationMetadata: Record<Exclude<keyof ProvidersRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byProviderId: {
        requestsMetadata: WithProviderItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["providerId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ProvidersRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ProvidersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createPaginatedResponseModelEndpoints_ProviderModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeProvidersGetRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
