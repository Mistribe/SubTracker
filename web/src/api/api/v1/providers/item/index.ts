/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHttpErrorFromDiscriminatorValue, createProviderModelFromDiscriminatorValue, serializeProviderModel, type HttpError, type ProviderModel } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithProviderGetRequestBody}
 */
// @ts-ignore
export function createWithProviderGetRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithProviderGetRequestBody;
}
/**
 * The deserialization information for the current model
 * @param WithProviderGetRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithProviderGetRequestBody(withProviderGetRequestBody: Partial<WithProviderGetRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithProviderGetRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithProviderGetRequestBody(writer: SerializationWriter, withProviderGetRequestBody: Partial<WithProviderGetRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withProviderGetRequestBody || isSerializingDerivedType) { return; }
    writer.writeAdditionalData(withProviderGetRequestBody.additionalData);
}
export interface WithProviderGetRequestBody extends AdditionalDataHolder, Parsable {
}
/**
 * Builds and executes requests for operations under /api/v1/providers/{providerId}
 */
export interface WithProviderItemRequestBuilder extends BaseRequestBuilder<WithProviderItemRequestBuilder> {
    /**
     * Returns a single provider by its ID
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ProviderModel>}
     * @throws {HttpError} error when the service returns a 400 status code
     */
     get(body: WithProviderGetRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ProviderModel | undefined>;
    /**
     * Returns a single provider by its ID
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(body: WithProviderGetRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithProviderItemRequestBuilderUriTemplate = "{+baseurl}/api/v1/providers/{providerId}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithProviderItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: WithProviderItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createProviderModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithProviderGetRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
