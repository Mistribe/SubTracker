/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAmountModelFromDiscriminatorValue, createEditableOwnerModelFromDiscriminatorValue, createOwnerModelFromDiscriminatorValue, serializeAmountModel, serializeEditableOwnerModel, serializeOwnerModel, type AmountModel, type EditableOwnerModel, type OwnerModel } from '../dto/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateSubscriptionModel}
 */
// @ts-ignore
export function createCreateSubscriptionModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateSubscriptionModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EditableSubscriptionPayerModel}
 */
// @ts-ignore
export function createEditableSubscriptionPayerModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEditableSubscriptionPayerModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LabelRefModel}
 */
// @ts-ignore
export function createLabelRefModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLabelRefModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PatchSubscriptionModel}
 */
// @ts-ignore
export function createPatchSubscriptionModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPatchSubscriptionModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionFreeTrialModel}
 */
// @ts-ignore
export function createSubscriptionFreeTrialModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionFreeTrialModel;
}
export interface CreateSubscriptionModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The created_at property
     */
    createdAt?: string | null;
    /**
     * @Description Custom price for this subscription
     */
    customPrice?: AmountModel | null;
    /**
     * The custom_recurrency property
     */
    customRecurrency?: number | null;
    /**
     * The end_date property
     */
    endDate?: Date | null;
    /**
     * @Description Number of free trial days remaining (null if no trial or trial expired)
     */
    freeTrial?: SubscriptionFreeTrialModel | null;
    /**
     * The friendly_name property
     */
    friendlyName?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The labels property
     */
    labels?: string[] | null;
    /**
     * The owner property
     */
    owner?: EditableOwnerModel | null;
    /**
     * Subscription payer object used for updating who pays for a subscription
     */
    payer?: EditableSubscriptionPayerModel | null;
    /**
     * The plan_id property
     */
    planId?: string | null;
    /**
     * The price_id property
     */
    priceId?: string | null;
    /**
     * The provider_id property
     */
    providerId?: string | null;
    /**
     * The recurrency property
     */
    recurrency?: string | null;
    /**
     * The service_users property
     */
    serviceUsers?: string[] | null;
    /**
     * The start_date property
     */
    startDate?: Date | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionModel}
 */
// @ts-ignore
export function createSubscriptionModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionPayerModel}
 */
// @ts-ignore
export function createSubscriptionPayerModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionPayerModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionPriceModel}
 */
// @ts-ignore
export function createSubscriptionPriceModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionPriceModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionSummaryResponse}
 */
// @ts-ignore
export function createSubscriptionSummaryResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionSummaryResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionSummaryTopLabelResponse}
 */
// @ts-ignore
export function createSubscriptionSummaryTopLabelResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionSummaryTopLabelResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionSummaryTopProviderResponse}
 */
// @ts-ignore
export function createSubscriptionSummaryTopProviderResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionSummaryTopProviderResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionSummaryUpcomingRenewalResponse}
 */
// @ts-ignore
export function createSubscriptionSummaryUpcomingRenewalResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionSummaryUpcomingRenewalResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateSubscriptionModel}
 */
// @ts-ignore
export function createUpdateSubscriptionModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateSubscriptionModel;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateSubscriptionModel(createSubscriptionModel: Partial<CreateSubscriptionModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { createSubscriptionModel.createdAt = n.getStringValue(); },
        "custom_price": n => { createSubscriptionModel.customPrice = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "custom_recurrency": n => { createSubscriptionModel.customRecurrency = n.getNumberValue(); },
        "end_date": n => { createSubscriptionModel.endDate = n.getDateValue(); },
        "free_trial": n => { createSubscriptionModel.freeTrial = n.getObjectValue<SubscriptionFreeTrialModel>(createSubscriptionFreeTrialModelFromDiscriminatorValue); },
        "friendly_name": n => { createSubscriptionModel.friendlyName = n.getStringValue(); },
        "id": n => { createSubscriptionModel.id = n.getStringValue(); },
        "labels": n => { createSubscriptionModel.labels = n.getCollectionOfPrimitiveValues<string>(); },
        "owner": n => { createSubscriptionModel.owner = n.getObjectValue<EditableOwnerModel>(createEditableOwnerModelFromDiscriminatorValue); },
        "payer": n => { createSubscriptionModel.payer = n.getObjectValue<EditableSubscriptionPayerModel>(createEditableSubscriptionPayerModelFromDiscriminatorValue); },
        "plan_id": n => { createSubscriptionModel.planId = n.getStringValue(); },
        "price_id": n => { createSubscriptionModel.priceId = n.getStringValue(); },
        "provider_id": n => { createSubscriptionModel.providerId = n.getStringValue(); },
        "recurrency": n => { createSubscriptionModel.recurrency = n.getStringValue(); },
        "service_users": n => { createSubscriptionModel.serviceUsers = n.getCollectionOfPrimitiveValues<string>(); },
        "start_date": n => { createSubscriptionModel.startDate = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEditableSubscriptionPayerModel(editableSubscriptionPayerModel: Partial<EditableSubscriptionPayerModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "family_id": n => { editableSubscriptionPayerModel.familyId = n.getStringValue(); },
        "memberId": n => { editableSubscriptionPayerModel.memberId = n.getStringValue(); },
        "type": n => { editableSubscriptionPayerModel.type = n.getEnumValue<EditableSubscriptionPayerModel_type>(EditableSubscriptionPayerModel_typeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLabelRefModel(labelRefModel: Partial<LabelRefModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "label_id": n => { labelRefModel.labelId = n.getStringValue(); },
        "source": n => { labelRefModel.source = n.getEnumValue<LabelRefModel_source>(LabelRefModel_sourceObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPatchSubscriptionModel(patchSubscriptionModel: Partial<PatchSubscriptionModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "custom_price": n => { patchSubscriptionModel.customPrice = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "custom_recurrency": n => { patchSubscriptionModel.customRecurrency = n.getNumberValue(); },
        "end_date": n => { patchSubscriptionModel.endDate = n.getDateValue(); },
        "free_trial": n => { patchSubscriptionModel.freeTrial = n.getObjectValue<SubscriptionFreeTrialModel>(createSubscriptionFreeTrialModelFromDiscriminatorValue); },
        "friendly_name": n => { patchSubscriptionModel.friendlyName = n.getStringValue(); },
        "id": n => { patchSubscriptionModel.id = n.getStringValue(); },
        "labels": n => { patchSubscriptionModel.labels = n.getCollectionOfPrimitiveValues<string>(); },
        "owner": n => { patchSubscriptionModel.owner = n.getObjectValue<EditableOwnerModel>(createEditableOwnerModelFromDiscriminatorValue); },
        "payer": n => { patchSubscriptionModel.payer = n.getObjectValue<EditableSubscriptionPayerModel>(createEditableSubscriptionPayerModelFromDiscriminatorValue); },
        "plan_id": n => { patchSubscriptionModel.planId = n.getStringValue(); },
        "price_id": n => { patchSubscriptionModel.priceId = n.getStringValue(); },
        "provider_id": n => { patchSubscriptionModel.providerId = n.getStringValue(); },
        "recurrency": n => { patchSubscriptionModel.recurrency = n.getStringValue(); },
        "service_users": n => { patchSubscriptionModel.serviceUsers = n.getCollectionOfPrimitiveValues<string>(); },
        "start_date": n => { patchSubscriptionModel.startDate = n.getDateValue(); },
        "updated_at": n => { patchSubscriptionModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionFreeTrialModel(subscriptionFreeTrialModel: Partial<SubscriptionFreeTrialModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "end_date": n => { subscriptionFreeTrialModel.endDate = n.getDateValue(); },
        "start_date": n => { subscriptionFreeTrialModel.startDate = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionModel(subscriptionModel: Partial<SubscriptionModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { subscriptionModel.createdAt = n.getDateValue(); },
        "custom_price": n => { subscriptionModel.customPrice = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "custom_recurrency": n => { subscriptionModel.customRecurrency = n.getNumberValue(); },
        "end_date": n => { subscriptionModel.endDate = n.getDateValue(); },
        "etag": n => { subscriptionModel.etag = n.getStringValue(); },
        "free_trial": n => { subscriptionModel.freeTrial = n.getObjectValue<SubscriptionFreeTrialModel>(createSubscriptionFreeTrialModelFromDiscriminatorValue); },
        "friendly_name": n => { subscriptionModel.friendlyName = n.getStringValue(); },
        "id": n => { subscriptionModel.id = n.getStringValue(); },
        "is_active": n => { subscriptionModel.isActive = n.getBooleanValue(); },
        "label_refs": n => { subscriptionModel.labelRefs = n.getCollectionOfObjectValues<LabelRefModel>(createLabelRefModelFromDiscriminatorValue); },
        "owner": n => { subscriptionModel.owner = n.getObjectValue<OwnerModel>(createOwnerModelFromDiscriminatorValue); },
        "payer": n => { subscriptionModel.payer = n.getObjectValue<SubscriptionPayerModel>(createSubscriptionPayerModelFromDiscriminatorValue); },
        "plan_id": n => { subscriptionModel.planId = n.getStringValue(); },
        "price": n => { subscriptionModel.price = n.getObjectValue<SubscriptionPriceModel>(createSubscriptionPriceModelFromDiscriminatorValue); },
        "price_id": n => { subscriptionModel.priceId = n.getStringValue(); },
        "provider_id": n => { subscriptionModel.providerId = n.getStringValue(); },
        "recurrency": n => { subscriptionModel.recurrency = n.getEnumValue<SubscriptionModel_recurrency>(SubscriptionModel_recurrencyObject); },
        "service_users": n => { subscriptionModel.serviceUsers = n.getCollectionOfPrimitiveValues<string>(); },
        "start_date": n => { subscriptionModel.startDate = n.getDateValue(); },
        "updated_at": n => { subscriptionModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionPayerModel(subscriptionPayerModel: Partial<SubscriptionPayerModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "etag": n => { subscriptionPayerModel.etag = n.getStringValue(); },
        "family_id": n => { subscriptionPayerModel.familyId = n.getStringValue(); },
        "memberId": n => { subscriptionPayerModel.memberId = n.getStringValue(); },
        "type": n => { subscriptionPayerModel.type = n.getEnumValue<SubscriptionPayerModel_type>(SubscriptionPayerModel_typeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionPriceModel(subscriptionPriceModel: Partial<SubscriptionPriceModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "monthly": n => { subscriptionPriceModel.monthly = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "yearly": n => { subscriptionPriceModel.yearly = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionSummaryResponse(subscriptionSummaryResponse: Partial<SubscriptionSummaryResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "active": n => { subscriptionSummaryResponse.active = n.getNumberValue(); },
        "top_labels": n => { subscriptionSummaryResponse.topLabels = n.getCollectionOfObjectValues<SubscriptionSummaryTopLabelResponse>(createSubscriptionSummaryTopLabelResponseFromDiscriminatorValue); },
        "top_providers": n => { subscriptionSummaryResponse.topProviders = n.getCollectionOfObjectValues<SubscriptionSummaryTopProviderResponse>(createSubscriptionSummaryTopProviderResponseFromDiscriminatorValue); },
        "total_last_month": n => { subscriptionSummaryResponse.totalLastMonth = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "total_last_year": n => { subscriptionSummaryResponse.totalLastYear = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "total_monthly": n => { subscriptionSummaryResponse.totalMonthly = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "total_yearly": n => { subscriptionSummaryResponse.totalYearly = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "upcoming_renewals": n => { subscriptionSummaryResponse.upcomingRenewals = n.getCollectionOfObjectValues<SubscriptionSummaryUpcomingRenewalResponse>(createSubscriptionSummaryUpcomingRenewalResponseFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionSummaryTopLabelResponse(subscriptionSummaryTopLabelResponse: Partial<SubscriptionSummaryTopLabelResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "label_id": n => { subscriptionSummaryTopLabelResponse.labelId = n.getStringValue(); },
        "total": n => { subscriptionSummaryTopLabelResponse.total = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionSummaryTopProviderResponse(subscriptionSummaryTopProviderResponse: Partial<SubscriptionSummaryTopProviderResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "duration": n => { subscriptionSummaryTopProviderResponse.duration = n.getStringValue(); },
        "provider_id": n => { subscriptionSummaryTopProviderResponse.providerId = n.getStringValue(); },
        "total": n => { subscriptionSummaryTopProviderResponse.total = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionSummaryUpcomingRenewalResponse(subscriptionSummaryUpcomingRenewalResponse: Partial<SubscriptionSummaryUpcomingRenewalResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "at": n => { subscriptionSummaryUpcomingRenewalResponse.at = n.getDateValue(); },
        "provider_id": n => { subscriptionSummaryUpcomingRenewalResponse.providerId = n.getStringValue(); },
        "source": n => { subscriptionSummaryUpcomingRenewalResponse.source = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "total": n => { subscriptionSummaryUpcomingRenewalResponse.total = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateSubscriptionModel(updateSubscriptionModel: Partial<UpdateSubscriptionModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "custom_price": n => { updateSubscriptionModel.customPrice = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "custom_recurrency": n => { updateSubscriptionModel.customRecurrency = n.getNumberValue(); },
        "end_date": n => { updateSubscriptionModel.endDate = n.getDateValue(); },
        "free_trial": n => { updateSubscriptionModel.freeTrial = n.getObjectValue<SubscriptionFreeTrialModel>(createSubscriptionFreeTrialModelFromDiscriminatorValue); },
        "friendly_name": n => { updateSubscriptionModel.friendlyName = n.getStringValue(); },
        "labels": n => { updateSubscriptionModel.labels = n.getCollectionOfPrimitiveValues<string>(); },
        "owner": n => { updateSubscriptionModel.owner = n.getObjectValue<EditableOwnerModel>(createEditableOwnerModelFromDiscriminatorValue); },
        "payer": n => { updateSubscriptionModel.payer = n.getObjectValue<EditableSubscriptionPayerModel>(createEditableSubscriptionPayerModelFromDiscriminatorValue); },
        "plan_id": n => { updateSubscriptionModel.planId = n.getStringValue(); },
        "price_id": n => { updateSubscriptionModel.priceId = n.getStringValue(); },
        "provider_id": n => { updateSubscriptionModel.providerId = n.getStringValue(); },
        "recurrency": n => { updateSubscriptionModel.recurrency = n.getStringValue(); },
        "service_users": n => { updateSubscriptionModel.serviceUsers = n.getCollectionOfPrimitiveValues<string>(); },
        "start_date": n => { updateSubscriptionModel.startDate = n.getDateValue(); },
        "updated_at": n => { updateSubscriptionModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * Subscription payer object used for updating who pays for a subscription
 */
export interface EditableSubscriptionPayerModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * @Description ID of the family associated with this payer
     */
    familyId?: string | null;
    /**
     * @Description ID of the specific family member who pays (required when type is family_member)
     */
    memberId?: string | null;
    /**
     * @Description Type of payer (family or family member)
     */
    type?: EditableSubscriptionPayerModel_type | null;
}
export type EditableSubscriptionPayerModel_type = (typeof EditableSubscriptionPayerModel_typeObject)[keyof typeof EditableSubscriptionPayerModel_typeObject];
export interface LabelRefModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The label_id property
     */
    labelId?: string | null;
    /**
     * The source property
     */
    source?: LabelRefModel_source | null;
}
export type LabelRefModel_source = (typeof LabelRefModel_sourceObject)[keyof typeof LabelRefModel_sourceObject];
export interface PatchSubscriptionModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * @Description Custom price for this subscription
     */
    customPrice?: AmountModel | null;
    /**
     * The custom_recurrency property
     */
    customRecurrency?: number | null;
    /**
     * The end_date property
     */
    endDate?: Date | null;
    /**
     * @Description Number of free trial days remaining (null if no trial or trial expired)
     */
    freeTrial?: SubscriptionFreeTrialModel | null;
    /**
     * The friendly_name property
     */
    friendlyName?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The labels property
     */
    labels?: string[] | null;
    /**
     * The owner property
     */
    owner?: EditableOwnerModel | null;
    /**
     * Subscription payer object used for updating who pays for a subscription
     */
    payer?: EditableSubscriptionPayerModel | null;
    /**
     * The plan_id property
     */
    planId?: string | null;
    /**
     * The price_id property
     */
    priceId?: string | null;
    /**
     * The provider_id property
     */
    providerId?: string | null;
    /**
     * The recurrency property
     */
    recurrency?: string | null;
    /**
     * The service_users property
     */
    serviceUsers?: string[] | null;
    /**
     * The start_date property
     */
    startDate?: Date | null;
    /**
     * The updated_at property
     */
    updatedAt?: Date | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateSubscriptionModel(writer: SerializationWriter, createSubscriptionModel: Partial<CreateSubscriptionModel> | undefined | null = {}) : void {
    if (createSubscriptionModel) {
        writer.writeStringValue("created_at", createSubscriptionModel.createdAt);
        writer.writeObjectValue<AmountModel>("custom_price", createSubscriptionModel.customPrice, serializeAmountModel);
        writer.writeNumberValue("custom_recurrency", createSubscriptionModel.customRecurrency);
        writer.writeDateValue("end_date", createSubscriptionModel.endDate);
        writer.writeObjectValue<SubscriptionFreeTrialModel>("free_trial", createSubscriptionModel.freeTrial, serializeSubscriptionFreeTrialModel);
        writer.writeStringValue("friendly_name", createSubscriptionModel.friendlyName);
        writer.writeStringValue("id", createSubscriptionModel.id);
        writer.writeCollectionOfPrimitiveValues<string>("labels", createSubscriptionModel.labels);
        writer.writeObjectValue<EditableOwnerModel>("owner", createSubscriptionModel.owner, serializeEditableOwnerModel);
        writer.writeObjectValue<EditableSubscriptionPayerModel>("payer", createSubscriptionModel.payer, serializeEditableSubscriptionPayerModel);
        writer.writeStringValue("plan_id", createSubscriptionModel.planId);
        writer.writeStringValue("price_id", createSubscriptionModel.priceId);
        writer.writeStringValue("provider_id", createSubscriptionModel.providerId);
        writer.writeStringValue("recurrency", createSubscriptionModel.recurrency);
        writer.writeCollectionOfPrimitiveValues<string>("service_users", createSubscriptionModel.serviceUsers);
        writer.writeDateValue("start_date", createSubscriptionModel.startDate);
        writer.writeAdditionalData(createSubscriptionModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEditableSubscriptionPayerModel(writer: SerializationWriter, editableSubscriptionPayerModel: Partial<EditableSubscriptionPayerModel> | undefined | null = {}) : void {
    if (editableSubscriptionPayerModel) {
        writer.writeStringValue("family_id", editableSubscriptionPayerModel.familyId);
        writer.writeStringValue("memberId", editableSubscriptionPayerModel.memberId);
        writer.writeEnumValue<EditableSubscriptionPayerModel_type>("type", editableSubscriptionPayerModel.type);
        writer.writeAdditionalData(editableSubscriptionPayerModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLabelRefModel(writer: SerializationWriter, labelRefModel: Partial<LabelRefModel> | undefined | null = {}) : void {
    if (labelRefModel) {
        writer.writeStringValue("label_id", labelRefModel.labelId);
        writer.writeEnumValue<LabelRefModel_source>("source", labelRefModel.source);
        writer.writeAdditionalData(labelRefModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePatchSubscriptionModel(writer: SerializationWriter, patchSubscriptionModel: Partial<PatchSubscriptionModel> | undefined | null = {}) : void {
    if (patchSubscriptionModel) {
        writer.writeObjectValue<AmountModel>("custom_price", patchSubscriptionModel.customPrice, serializeAmountModel);
        writer.writeNumberValue("custom_recurrency", patchSubscriptionModel.customRecurrency);
        writer.writeDateValue("end_date", patchSubscriptionModel.endDate);
        writer.writeObjectValue<SubscriptionFreeTrialModel>("free_trial", patchSubscriptionModel.freeTrial, serializeSubscriptionFreeTrialModel);
        writer.writeStringValue("friendly_name", patchSubscriptionModel.friendlyName);
        writer.writeStringValue("id", patchSubscriptionModel.id);
        writer.writeCollectionOfPrimitiveValues<string>("labels", patchSubscriptionModel.labels);
        writer.writeObjectValue<EditableOwnerModel>("owner", patchSubscriptionModel.owner, serializeEditableOwnerModel);
        writer.writeObjectValue<EditableSubscriptionPayerModel>("payer", patchSubscriptionModel.payer, serializeEditableSubscriptionPayerModel);
        writer.writeStringValue("plan_id", patchSubscriptionModel.planId);
        writer.writeStringValue("price_id", patchSubscriptionModel.priceId);
        writer.writeStringValue("provider_id", patchSubscriptionModel.providerId);
        writer.writeStringValue("recurrency", patchSubscriptionModel.recurrency);
        writer.writeCollectionOfPrimitiveValues<string>("service_users", patchSubscriptionModel.serviceUsers);
        writer.writeDateValue("start_date", patchSubscriptionModel.startDate);
        writer.writeDateValue("updated_at", patchSubscriptionModel.updatedAt);
        writer.writeAdditionalData(patchSubscriptionModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionFreeTrialModel(writer: SerializationWriter, subscriptionFreeTrialModel: Partial<SubscriptionFreeTrialModel> | undefined | null = {}) : void {
    if (subscriptionFreeTrialModel) {
        writer.writeDateValue("end_date", subscriptionFreeTrialModel.endDate);
        writer.writeDateValue("start_date", subscriptionFreeTrialModel.startDate);
        writer.writeAdditionalData(subscriptionFreeTrialModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionModel(writer: SerializationWriter, subscriptionModel: Partial<SubscriptionModel> | undefined | null = {}) : void {
    if (subscriptionModel) {
        writer.writeDateValue("created_at", subscriptionModel.createdAt);
        writer.writeObjectValue<AmountModel>("custom_price", subscriptionModel.customPrice, serializeAmountModel);
        writer.writeNumberValue("custom_recurrency", subscriptionModel.customRecurrency);
        writer.writeDateValue("end_date", subscriptionModel.endDate);
        writer.writeStringValue("etag", subscriptionModel.etag);
        writer.writeObjectValue<SubscriptionFreeTrialModel>("free_trial", subscriptionModel.freeTrial, serializeSubscriptionFreeTrialModel);
        writer.writeStringValue("friendly_name", subscriptionModel.friendlyName);
        writer.writeStringValue("id", subscriptionModel.id);
        writer.writeBooleanValue("is_active", subscriptionModel.isActive);
        writer.writeCollectionOfObjectValues<LabelRefModel>("label_refs", subscriptionModel.labelRefs, serializeLabelRefModel);
        writer.writeObjectValue<OwnerModel>("owner", subscriptionModel.owner, serializeOwnerModel);
        writer.writeObjectValue<SubscriptionPayerModel>("payer", subscriptionModel.payer, serializeSubscriptionPayerModel);
        writer.writeStringValue("plan_id", subscriptionModel.planId);
        writer.writeObjectValue<SubscriptionPriceModel>("price", subscriptionModel.price, serializeSubscriptionPriceModel);
        writer.writeStringValue("price_id", subscriptionModel.priceId);
        writer.writeStringValue("provider_id", subscriptionModel.providerId);
        writer.writeEnumValue<SubscriptionModel_recurrency>("recurrency", subscriptionModel.recurrency);
        writer.writeCollectionOfPrimitiveValues<string>("service_users", subscriptionModel.serviceUsers);
        writer.writeDateValue("start_date", subscriptionModel.startDate);
        writer.writeDateValue("updated_at", subscriptionModel.updatedAt);
        writer.writeAdditionalData(subscriptionModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionPayerModel(writer: SerializationWriter, subscriptionPayerModel: Partial<SubscriptionPayerModel> | undefined | null = {}) : void {
    if (subscriptionPayerModel) {
        writer.writeStringValue("etag", subscriptionPayerModel.etag);
        writer.writeStringValue("family_id", subscriptionPayerModel.familyId);
        writer.writeStringValue("memberId", subscriptionPayerModel.memberId);
        writer.writeEnumValue<SubscriptionPayerModel_type>("type", subscriptionPayerModel.type);
        writer.writeAdditionalData(subscriptionPayerModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionPriceModel(writer: SerializationWriter, subscriptionPriceModel: Partial<SubscriptionPriceModel> | undefined | null = {}) : void {
    if (subscriptionPriceModel) {
        writer.writeObjectValue<AmountModel>("monthly", subscriptionPriceModel.monthly, serializeAmountModel);
        writer.writeObjectValue<AmountModel>("yearly", subscriptionPriceModel.yearly, serializeAmountModel);
        writer.writeAdditionalData(subscriptionPriceModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionSummaryResponse(writer: SerializationWriter, subscriptionSummaryResponse: Partial<SubscriptionSummaryResponse> | undefined | null = {}) : void {
    if (subscriptionSummaryResponse) {
        writer.writeNumberValue("active", subscriptionSummaryResponse.active);
        writer.writeCollectionOfObjectValues<SubscriptionSummaryTopLabelResponse>("top_labels", subscriptionSummaryResponse.topLabels, serializeSubscriptionSummaryTopLabelResponse);
        writer.writeCollectionOfObjectValues<SubscriptionSummaryTopProviderResponse>("top_providers", subscriptionSummaryResponse.topProviders, serializeSubscriptionSummaryTopProviderResponse);
        writer.writeObjectValue<AmountModel>("total_last_month", subscriptionSummaryResponse.totalLastMonth, serializeAmountModel);
        writer.writeObjectValue<AmountModel>("total_last_year", subscriptionSummaryResponse.totalLastYear, serializeAmountModel);
        writer.writeObjectValue<AmountModel>("total_monthly", subscriptionSummaryResponse.totalMonthly, serializeAmountModel);
        writer.writeObjectValue<AmountModel>("total_yearly", subscriptionSummaryResponse.totalYearly, serializeAmountModel);
        writer.writeCollectionOfObjectValues<SubscriptionSummaryUpcomingRenewalResponse>("upcoming_renewals", subscriptionSummaryResponse.upcomingRenewals, serializeSubscriptionSummaryUpcomingRenewalResponse);
        writer.writeAdditionalData(subscriptionSummaryResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionSummaryTopLabelResponse(writer: SerializationWriter, subscriptionSummaryTopLabelResponse: Partial<SubscriptionSummaryTopLabelResponse> | undefined | null = {}) : void {
    if (subscriptionSummaryTopLabelResponse) {
        writer.writeStringValue("label_id", subscriptionSummaryTopLabelResponse.labelId);
        writer.writeObjectValue<AmountModel>("total", subscriptionSummaryTopLabelResponse.total, serializeAmountModel);
        writer.writeAdditionalData(subscriptionSummaryTopLabelResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionSummaryTopProviderResponse(writer: SerializationWriter, subscriptionSummaryTopProviderResponse: Partial<SubscriptionSummaryTopProviderResponse> | undefined | null = {}) : void {
    if (subscriptionSummaryTopProviderResponse) {
        writer.writeStringValue("duration", subscriptionSummaryTopProviderResponse.duration);
        writer.writeStringValue("provider_id", subscriptionSummaryTopProviderResponse.providerId);
        writer.writeObjectValue<AmountModel>("total", subscriptionSummaryTopProviderResponse.total, serializeAmountModel);
        writer.writeAdditionalData(subscriptionSummaryTopProviderResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionSummaryUpcomingRenewalResponse(writer: SerializationWriter, subscriptionSummaryUpcomingRenewalResponse: Partial<SubscriptionSummaryUpcomingRenewalResponse> | undefined | null = {}) : void {
    if (subscriptionSummaryUpcomingRenewalResponse) {
        writer.writeDateValue("at", subscriptionSummaryUpcomingRenewalResponse.at);
        writer.writeStringValue("provider_id", subscriptionSummaryUpcomingRenewalResponse.providerId);
        writer.writeObjectValue<AmountModel>("source", subscriptionSummaryUpcomingRenewalResponse.source, serializeAmountModel);
        writer.writeObjectValue<AmountModel>("total", subscriptionSummaryUpcomingRenewalResponse.total, serializeAmountModel);
        writer.writeAdditionalData(subscriptionSummaryUpcomingRenewalResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateSubscriptionModel(writer: SerializationWriter, updateSubscriptionModel: Partial<UpdateSubscriptionModel> | undefined | null = {}) : void {
    if (updateSubscriptionModel) {
        writer.writeObjectValue<AmountModel>("custom_price", updateSubscriptionModel.customPrice, serializeAmountModel);
        writer.writeNumberValue("custom_recurrency", updateSubscriptionModel.customRecurrency);
        writer.writeDateValue("end_date", updateSubscriptionModel.endDate);
        writer.writeObjectValue<SubscriptionFreeTrialModel>("free_trial", updateSubscriptionModel.freeTrial, serializeSubscriptionFreeTrialModel);
        writer.writeStringValue("friendly_name", updateSubscriptionModel.friendlyName);
        writer.writeCollectionOfPrimitiveValues<string>("labels", updateSubscriptionModel.labels);
        writer.writeObjectValue<EditableOwnerModel>("owner", updateSubscriptionModel.owner, serializeEditableOwnerModel);
        writer.writeObjectValue<EditableSubscriptionPayerModel>("payer", updateSubscriptionModel.payer, serializeEditableSubscriptionPayerModel);
        writer.writeStringValue("plan_id", updateSubscriptionModel.planId);
        writer.writeStringValue("price_id", updateSubscriptionModel.priceId);
        writer.writeStringValue("provider_id", updateSubscriptionModel.providerId);
        writer.writeStringValue("recurrency", updateSubscriptionModel.recurrency);
        writer.writeCollectionOfPrimitiveValues<string>("service_users", updateSubscriptionModel.serviceUsers);
        writer.writeDateValue("start_date", updateSubscriptionModel.startDate);
        writer.writeDateValue("updated_at", updateSubscriptionModel.updatedAt);
        writer.writeAdditionalData(updateSubscriptionModel.additionalData);
    }
}
/**
 * @Description Number of free trial days remaining (null if no trial or trial expired)
 */
export interface SubscriptionFreeTrialModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The end_date property
     */
    endDate?: Date | null;
    /**
     * The start_date property
     */
    startDate?: Date | null;
}
/**
 * Subscription object containing all information about an active subscription including billing and usage details
 */
export interface SubscriptionModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * @Description ISO 8601 timestamp when the subscription was originally created
     */
    createdAt?: Date | null;
    /**
     * @Description Custom price for this subscription
     */
    customPrice?: AmountModel | null;
    /**
     * @Description CustomRecurrency recurrency interval in days (required when recurrency is custom)
     */
    customRecurrency?: number | null;
    /**
     * @Description ISO 8601 timestamp when the subscription expires (null for ongoing subscriptions)
     */
    endDate?: Date | null;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     */
    etag?: string | null;
    /**
     * @Description Number of free trial days remaining (null if no trial or trial expired)
     */
    freeTrial?: SubscriptionFreeTrialModel | null;
    /**
     * @Description Optional custom name for easy identification of the subscription
     */
    friendlyName?: string | null;
    /**
     * @Description Unique identifier for the subscription (UUID format)
     */
    id?: string | null;
    /**
     * @Description Indicates whether the subscription is currently active or not
     */
    isActive?: boolean | null;
    /**
     * @Description List of labels associated with this subscription
     */
    labelRefs?: LabelRefModel[] | null;
    /**
     * @Description Ownership information specifying whether this subscription belongs to a user or family
     */
    owner?: OwnerModel | null;
    /**
     * @Description Information about who pays for this subscription within the family
     */
    payer?: SubscriptionPayerModel | null;
    /**
     * @Description ID of the specific plan being subscribed to
     */
    planId?: string | null;
    /**
     * @Description Price details for this subscription
     */
    price?: SubscriptionPriceModel | null;
    /**
     * @Description ID of the pricing tier for this subscription
     */
    priceId?: string | null;
    /**
     * @Description ID of the service provider offering this subscription
     */
    providerId?: string | null;
    /**
     * @Description Billing recurrency pattern (monthly, yearly, custom, etc.)
     */
    recurrency?: SubscriptionModel_recurrency | null;
    /**
     * @Description List of family member IDs who use this service (for shared subscriptions)
     */
    serviceUsers?: string[] | null;
    /**
     * @Description ISO 8601 timestamp when the subscription becomes active
     */
    startDate?: Date | null;
    /**
     * @Description ISO 8601 timestamp when the subscription was last modified
     */
    updatedAt?: Date | null;
}
export type SubscriptionModel_recurrency = (typeof SubscriptionModel_recurrencyObject)[keyof typeof SubscriptionModel_recurrencyObject];
/**
 * @Description Information about who pays for this subscription within the family
 */
export interface SubscriptionPayerModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     */
    etag?: string | null;
    /**
     * @Description ID of the family associated with this payer
     */
    familyId?: string | null;
    /**
     * @Description ID of the specific family member who pays (required when type is family_member)
     */
    memberId?: string | null;
    /**
     * @Description Type of payer (family or family member)
     */
    type?: SubscriptionPayerModel_type | null;
}
export type SubscriptionPayerModel_type = (typeof SubscriptionPayerModel_typeObject)[keyof typeof SubscriptionPayerModel_typeObject];
/**
 * @Description Price details for this subscription
 */
export interface SubscriptionPriceModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * @Description Custom price for this subscription
     */
    monthly?: AmountModel | null;
    /**
     * @Description Custom price for this subscription
     */
    yearly?: AmountModel | null;
}
/**
 * Response containing subscription summary information
 */
export interface SubscriptionSummaryResponse extends AdditionalDataHolder, Parsable {
    /**
     * The active property
     */
    active?: number | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The top_labels property
     */
    topLabels?: SubscriptionSummaryTopLabelResponse[] | null;
    /**
     * The top_providers property
     */
    topProviders?: SubscriptionSummaryTopProviderResponse[] | null;
    /**
     * @Description Custom price for this subscription
     */
    totalLastMonth?: AmountModel | null;
    /**
     * @Description Custom price for this subscription
     */
    totalLastYear?: AmountModel | null;
    /**
     * @Description Custom price for this subscription
     */
    totalMonthly?: AmountModel | null;
    /**
     * @Description Custom price for this subscription
     */
    totalYearly?: AmountModel | null;
    /**
     * The upcoming_renewals property
     */
    upcomingRenewals?: SubscriptionSummaryUpcomingRenewalResponse[] | null;
}
export interface SubscriptionSummaryTopLabelResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The label_id property
     */
    labelId?: string | null;
    /**
     * @Description Custom price for this subscription
     */
    total?: AmountModel | null;
}
export interface SubscriptionSummaryTopProviderResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The duration property
     */
    duration?: string | null;
    /**
     * The provider_id property
     */
    providerId?: string | null;
    /**
     * @Description Custom price for this subscription
     */
    total?: AmountModel | null;
}
export interface SubscriptionSummaryUpcomingRenewalResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The at property
     */
    at?: Date | null;
    /**
     * The provider_id property
     */
    providerId?: string | null;
    /**
     * @Description Custom price for this subscription
     */
    source?: AmountModel | null;
    /**
     * @Description Custom price for this subscription
     */
    total?: AmountModel | null;
}
export interface UpdateSubscriptionModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * @Description Custom price for this subscription
     */
    customPrice?: AmountModel | null;
    /**
     * The custom_recurrency property
     */
    customRecurrency?: number | null;
    /**
     * The end_date property
     */
    endDate?: Date | null;
    /**
     * @Description Number of free trial days remaining (null if no trial or trial expired)
     */
    freeTrial?: SubscriptionFreeTrialModel | null;
    /**
     * The friendly_name property
     */
    friendlyName?: string | null;
    /**
     * The labels property
     */
    labels?: string[] | null;
    /**
     * The owner property
     */
    owner?: EditableOwnerModel | null;
    /**
     * Subscription payer object used for updating who pays for a subscription
     */
    payer?: EditableSubscriptionPayerModel | null;
    /**
     * The plan_id property
     */
    planId?: string | null;
    /**
     * The price_id property
     */
    priceId?: string | null;
    /**
     * The provider_id property
     */
    providerId?: string | null;
    /**
     * The recurrency property
     */
    recurrency?: string | null;
    /**
     * The service_users property
     */
    serviceUsers?: string[] | null;
    /**
     * The start_date property
     */
    startDate?: Date | null;
    /**
     * The updated_at property
     */
    updatedAt?: Date | null;
}
/**
 * @Description Type of payer (family or family member)
 */
export const EditableSubscriptionPayerModel_typeObject = {
    Family: "family",
    Family_member: "family_member",
} as const;
export const LabelRefModel_sourceObject = {
    Subscription: "subscription",
    Provider: "provider",
} as const;
/**
 * @Description Billing recurrency pattern (monthly, yearly, custom, etc.)
 */
export const SubscriptionModel_recurrencyObject = {
    Unknown: "unknown",
    One_time: "one_time",
    Monthly: "monthly",
    Quarterly: "quarterly",
    Half_yearly: "half_yearly",
    Yearly: "yearly",
    Custom: "custom",
} as const;
/**
 * @Description Type of payer (family or family member)
 */
export const SubscriptionPayerModel_typeObject = {
    Family: "family",
    Family_member: "family_member",
} as const;
/* tslint:enable */
/* eslint-enable */
