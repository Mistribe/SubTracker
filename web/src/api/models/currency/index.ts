/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CurrencyRateModel}
 */
// @ts-ignore
export function createCurrencyRateModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCurrencyRateModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CurrencyRatesModel}
 */
// @ts-ignore
export function createCurrencyRatesModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCurrencyRatesModel;
}
export interface CurrencyRateModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The currency property
     */
    currency?: string | null;
    /**
     * The rate property
     */
    rate?: number | null;
}
export interface CurrencyRatesModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The rates property
     */
    rates?: CurrencyRateModel[] | null;
    /**
     * The timestamp property
     */
    timestamp?: Date | null;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCurrencyRateModel(currencyRateModel: Partial<CurrencyRateModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "currency": n => { currencyRateModel.currency = n.getStringValue(); },
        "rate": n => { currencyRateModel.rate = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCurrencyRatesModel(currencyRatesModel: Partial<CurrencyRatesModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "rates": n => { currencyRatesModel.rates = n.getCollectionOfObjectValues<CurrencyRateModel>(createCurrencyRateModelFromDiscriminatorValue); },
        "timestamp": n => { currencyRatesModel.timestamp = n.getDateValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCurrencyRateModel(writer: SerializationWriter, currencyRateModel: Partial<CurrencyRateModel> | undefined | null = {}) : void {
    if (currencyRateModel) {
        writer.writeStringValue("currency", currencyRateModel.currency);
        writer.writeNumberValue("rate", currencyRateModel.rate);
        writer.writeAdditionalData(currencyRateModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCurrencyRatesModel(writer: SerializationWriter, currencyRatesModel: Partial<CurrencyRatesModel> | undefined | null = {}) : void {
    if (currencyRatesModel) {
        writer.writeCollectionOfObjectValues<CurrencyRateModel>("rates", currencyRatesModel.rates, serializeCurrencyRateModel);
        writer.writeDateValue("timestamp", currencyRatesModel.timestamp);
        writer.writeAdditionalData(currencyRatesModel.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
