/* tslint:disable */
/* eslint-disable */
/**
 * SubTracker API
 * This api provide HTTPRest endpoints for the application SubTracker.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mistribe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DtoOwnerModel } from './DtoOwnerModel';
import {
    DtoOwnerModelFromJSON,
    DtoOwnerModelFromJSONTyped,
    DtoOwnerModelToJSON,
    DtoOwnerModelToJSONTyped,
} from './DtoOwnerModel';

/**
 * Provider object containing information about a subscription service provider and their available plans
 * @export
 * @interface DtoProviderModel
 */
export interface DtoProviderModel {
    /**
     * @Description ISO 8601 timestamp when the provider was originally created
     * @type {Date}
     * @memberof DtoProviderModel
     */
    createdAt: Date;
    /**
     * @Description Optional detailed description of the provider and their services
     * @type {string}
     * @memberof DtoProviderModel
     */
    description?: string;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     * @type {string}
     * @memberof DtoProviderModel
     */
    etag: string;
    /**
     * @Description Optional URL to the provider's icon or logo image
     * @type {string}
     * @memberof DtoProviderModel
     */
    iconUrl?: string;
    /**
     * @Description Unique identifier for the provider (UUID format)
     * @type {string}
     * @memberof DtoProviderModel
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof DtoProviderModel
     */
    key?: string;
    /**
     * @Description List of label IDs associated with this provider for categorization
     * @type {Array<string>}
     * @memberof DtoProviderModel
     */
    labels: Array<string>;
    /**
     * @Description Display name of the service provider
     * @type {string}
     * @memberof DtoProviderModel
     */
    name: string;
    /**
     * 
     * @type {DtoOwnerModel}
     * @memberof DtoProviderModel
     */
    owner: DtoOwnerModel;
    /**
     * @Description Optional URL to the provider's pricing information page
     * @type {string}
     * @memberof DtoProviderModel
     */
    pricingPageUrl?: string;
    /**
     * @Description ISO 8601 timestamp when the provider was last modified
     * @type {Date}
     * @memberof DtoProviderModel
     */
    updatedAt: Date;
    /**
     * @Description Optional URL to the provider's main website
     * @type {string}
     * @memberof DtoProviderModel
     */
    url?: string;
}

/**
 * Check if a given object implements the DtoProviderModel interface.
 */
export function instanceOfDtoProviderModel(value: object): value is DtoProviderModel {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('etag' in value) || value['etag'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('labels' in value) || value['labels'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('owner' in value) || value['owner'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function DtoProviderModelFromJSON(json: any): DtoProviderModel {
    return DtoProviderModelFromJSONTyped(json, false);
}

export function DtoProviderModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DtoProviderModel {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['created_at'])),
        'description': json['description'] == null ? undefined : json['description'],
        'etag': json['etag'],
        'iconUrl': json['icon_url'] == null ? undefined : json['icon_url'],
        'id': json['id'],
        'key': json['key'] == null ? undefined : json['key'],
        'labels': json['labels'],
        'name': json['name'],
        'owner': DtoOwnerModelFromJSON(json['owner']),
        'pricingPageUrl': json['pricing_page_url'] == null ? undefined : json['pricing_page_url'],
        'updatedAt': (new Date(json['updated_at'])),
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function DtoProviderModelToJSON(json: any): DtoProviderModel {
    return DtoProviderModelToJSONTyped(json, false);
}

export function DtoProviderModelToJSONTyped(value?: DtoProviderModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created_at': value['createdAt'].toISOString(),
        'description': value['description'],
        'etag': value['etag'],
        'icon_url': value['iconUrl'],
        'id': value['id'],
        'key': value['key'],
        'labels': value['labels'],
        'name': value['name'],
        'owner': DtoOwnerModelToJSON(value['owner']),
        'pricing_page_url': value['pricingPageUrl'],
        'updated_at': value['updatedAt'].toISOString(),
        'url': value['url'],
    };
}

