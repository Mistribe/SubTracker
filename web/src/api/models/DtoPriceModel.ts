/* tslint:disable */
/* eslint-disable */
/**
 * SubTracker API
 * This api provide HTTPRest endpoints for the application SubTracker.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mistribe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Price object defining the cost of a subscription plan with currency and time validity
 * @export
 * @interface DtoPriceModel
 */
export interface DtoPriceModel {
    /**
     * @Description Price amount in the specified currency (supports decimal values)
     * @type {number}
     * @memberof DtoPriceModel
     */
    amount: number;
    /**
     * @Description ISO 8601 timestamp when the price was originally created
     * @type {Date}
     * @memberof DtoPriceModel
     */
    createdAt: Date;
    /**
     * @Description ISO 4217 currency code for the price
     * @type {string}
     * @memberof DtoPriceModel
     */
    currency: string;
    /**
     * @Description ISO 8601 timestamp when this price expires (null means indefinite)
     * @type {Date}
     * @memberof DtoPriceModel
     */
    endDate?: Date;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     * @type {string}
     * @memberof DtoPriceModel
     */
    etag: string;
    /**
     * @Description Unique identifier for the price (UUID format)
     * @type {string}
     * @memberof DtoPriceModel
     */
    id: string;
    /**
     * @Description ISO 8601 timestamp when this price becomes effective
     * @type {Date}
     * @memberof DtoPriceModel
     */
    startDate: Date;
    /**
     * @Description ISO 8601 timestamp when the price was last modified
     * @type {Date}
     * @memberof DtoPriceModel
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the DtoPriceModel interface.
 */
export function instanceOfDtoPriceModel(value: object): value is DtoPriceModel {
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('etag' in value) || value['etag'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('startDate' in value) || value['startDate'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function DtoPriceModelFromJSON(json: any): DtoPriceModel {
    return DtoPriceModelFromJSONTyped(json, false);
}

export function DtoPriceModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DtoPriceModel {
    if (json == null) {
        return json;
    }
    return {
        
        'amount': json['amount'],
        'createdAt': (new Date(json['created_at'])),
        'currency': json['currency'],
        'endDate': json['end_date'] == null ? undefined : (new Date(json['end_date'])),
        'etag': json['etag'],
        'id': json['id'],
        'startDate': (new Date(json['start_date'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function DtoPriceModelToJSON(json: any): DtoPriceModel {
    return DtoPriceModelToJSONTyped(json, false);
}

export function DtoPriceModelToJSONTyped(value?: DtoPriceModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'amount': value['amount'],
        'created_at': value['createdAt'].toISOString(),
        'currency': value['currency'],
        'end_date': value['endDate'] == null ? value['endDate'] : value['endDate'].toISOString(),
        'etag': value['etag'],
        'id': value['id'],
        'start_date': value['startDate'].toISOString(),
        'updated_at': value['updatedAt'].toISOString(),
    };
}

