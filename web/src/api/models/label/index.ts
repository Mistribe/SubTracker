/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createEditableOwnerModelFromDiscriminatorValue, createOwnerModelFromDiscriminatorValue, serializeEditableOwnerModel, serializeOwnerModel, type EditableOwnerModel, type OwnerModel } from '../dto/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateLabelModel}
 */
// @ts-ignore
export function createCreateLabelModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateLabelModel;
}
export interface CreateLabelModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The color property
     */
    color?: string | null;
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The owner property
     */
    owner?: EditableOwnerModel | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LabelModel}
 */
// @ts-ignore
export function createLabelModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLabelModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateLabelModel}
 */
// @ts-ignore
export function createUpdateLabelModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateLabelModel;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateLabelModel(createLabelModel: Partial<CreateLabelModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "color": n => { createLabelModel.color = n.getStringValue(); },
        "created_at": n => { createLabelModel.createdAt = n.getDateValue(); },
        "id": n => { createLabelModel.id = n.getStringValue(); },
        "name": n => { createLabelModel.name = n.getStringValue(); },
        "owner": n => { createLabelModel.owner = n.getObjectValue<EditableOwnerModel>(createEditableOwnerModelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLabelModel(labelModel: Partial<LabelModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "color": n => { labelModel.color = n.getStringValue(); },
        "created_at": n => { labelModel.createdAt = n.getDateValue(); },
        "etag": n => { labelModel.etag = n.getStringValue(); },
        "id": n => { labelModel.id = n.getStringValue(); },
        "key": n => { labelModel.key = n.getStringValue(); },
        "name": n => { labelModel.name = n.getStringValue(); },
        "owner": n => { labelModel.owner = n.getObjectValue<OwnerModel>(createOwnerModelFromDiscriminatorValue); },
        "updated_at": n => { labelModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateLabelModel(updateLabelModel: Partial<UpdateLabelModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "color": n => { updateLabelModel.color = n.getStringValue(); },
        "name": n => { updateLabelModel.name = n.getStringValue(); },
        "updated_at": n => { updateLabelModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * Label object used for categorizing and organizing subscriptions with customizable colors
 */
export interface LabelModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * @Description Hexadecimal color code for visual representation of the label
     */
    color?: string | null;
    /**
     * @Description ISO 8601 timestamp indicating when the label was originally created
     */
    createdAt?: Date | null;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     */
    etag?: string | null;
    /**
     * @Description Unique identifier for the label (UUID format)
     */
    id?: string | null;
    /**
     * The key property
     */
    key?: string | null;
    /**
     * @Description Display name of the label
     */
    name?: string | null;
    /**
     * @Description Ownership information specifying whether this subscription belongs to a user or family
     */
    owner?: OwnerModel | null;
    /**
     * @Description ISO 8601 timestamp indicating when the label was last modified
     */
    updatedAt?: Date | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateLabelModel(writer: SerializationWriter, createLabelModel: Partial<CreateLabelModel> | undefined | null = {}) : void {
    if (createLabelModel) {
        writer.writeStringValue("color", createLabelModel.color);
        writer.writeDateValue("created_at", createLabelModel.createdAt);
        writer.writeStringValue("id", createLabelModel.id);
        writer.writeStringValue("name", createLabelModel.name);
        writer.writeObjectValue<EditableOwnerModel>("owner", createLabelModel.owner, serializeEditableOwnerModel);
        writer.writeAdditionalData(createLabelModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLabelModel(writer: SerializationWriter, labelModel: Partial<LabelModel> | undefined | null = {}) : void {
    if (labelModel) {
        writer.writeStringValue("color", labelModel.color);
        writer.writeDateValue("created_at", labelModel.createdAt);
        writer.writeStringValue("etag", labelModel.etag);
        writer.writeStringValue("id", labelModel.id);
        writer.writeStringValue("key", labelModel.key);
        writer.writeStringValue("name", labelModel.name);
        writer.writeObjectValue<OwnerModel>("owner", labelModel.owner, serializeOwnerModel);
        writer.writeDateValue("updated_at", labelModel.updatedAt);
        writer.writeAdditionalData(labelModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateLabelModel(writer: SerializationWriter, updateLabelModel: Partial<UpdateLabelModel> | undefined | null = {}) : void {
    if (updateLabelModel) {
        writer.writeStringValue("color", updateLabelModel.color);
        writer.writeStringValue("name", updateLabelModel.name);
        writer.writeDateValue("updated_at", updateLabelModel.updatedAt);
        writer.writeAdditionalData(updateLabelModel.additionalData);
    }
}
export interface UpdateLabelModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The color property
     */
    color?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The updated_at property
     */
    updatedAt?: Date | null;
}
/* tslint:enable */
/* eslint-enable */
