/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createEditableOwnerModelFromDiscriminatorValue, createOwnerModelFromDiscriminatorValue, serializeEditableOwnerModel, serializeOwnerModel, type EditableOwnerModel, type OwnerModel } from '../dto/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreatePlanModel}
 */
// @ts-ignore
export function createCreatePlanModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreatePlanModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreatePriceModel}
 */
// @ts-ignore
export function createCreatePriceModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreatePriceModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateProviderModel}
 */
// @ts-ignore
export function createCreateProviderModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateProviderModel;
}
export interface CreatePlanModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The name property
     */
    name?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PlanModel}
 */
// @ts-ignore
export function createPlanModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPlanModel;
}
/**
 * Price information for a plan
 */
export interface CreatePriceModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * The currency property
     */
    currency?: string | null;
    /**
     * The end_date property
     */
    endDate?: Date | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The start_date property
     */
    startDate?: Date | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PriceModel}
 */
// @ts-ignore
export function createPriceModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPriceModel;
}
export interface CreateProviderModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The icon_url property
     */
    iconUrl?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The labels property
     */
    labels?: string[] | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The owner property
     */
    owner?: EditableOwnerModel | null;
    /**
     * The pricing_page_url property
     */
    pricingPageUrl?: string | null;
    /**
     * The url property
     */
    url?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProviderModel}
 */
// @ts-ignore
export function createProviderModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProviderModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdatePlanModel}
 */
// @ts-ignore
export function createUpdatePlanModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdatePlanModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdatePriceModel}
 */
// @ts-ignore
export function createUpdatePriceModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdatePriceModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateProviderModel}
 */
// @ts-ignore
export function createUpdateProviderModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateProviderModel;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreatePlanModel(createPlanModel: Partial<CreatePlanModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { createPlanModel.createdAt = n.getDateValue(); },
        "description": n => { createPlanModel.description = n.getStringValue(); },
        "id": n => { createPlanModel.id = n.getStringValue(); },
        "name": n => { createPlanModel.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreatePriceModel(createPriceModel: Partial<CreatePriceModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { createPriceModel.amount = n.getNumberValue(); },
        "created_at": n => { createPriceModel.createdAt = n.getDateValue(); },
        "currency": n => { createPriceModel.currency = n.getStringValue(); },
        "end_date": n => { createPriceModel.endDate = n.getDateValue(); },
        "id": n => { createPriceModel.id = n.getStringValue(); },
        "start_date": n => { createPriceModel.startDate = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateProviderModel(createProviderModel: Partial<CreateProviderModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { createProviderModel.createdAt = n.getDateValue(); },
        "description": n => { createProviderModel.description = n.getStringValue(); },
        "icon_url": n => { createProviderModel.iconUrl = n.getStringValue(); },
        "id": n => { createProviderModel.id = n.getStringValue(); },
        "labels": n => { createProviderModel.labels = n.getCollectionOfPrimitiveValues<string>(); },
        "name": n => { createProviderModel.name = n.getStringValue(); },
        "owner": n => { createProviderModel.owner = n.getObjectValue<EditableOwnerModel>(createEditableOwnerModelFromDiscriminatorValue); },
        "pricing_page_url": n => { createProviderModel.pricingPageUrl = n.getStringValue(); },
        "url": n => { createProviderModel.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPlanModel(planModel: Partial<PlanModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { planModel.createdAt = n.getDateValue(); },
        "description": n => { planModel.description = n.getStringValue(); },
        "etag": n => { planModel.etag = n.getStringValue(); },
        "id": n => { planModel.id = n.getStringValue(); },
        "name": n => { planModel.name = n.getStringValue(); },
        "prices": n => { planModel.prices = n.getCollectionOfObjectValues<PriceModel>(createPriceModelFromDiscriminatorValue); },
        "updated_at": n => { planModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPriceModel(priceModel: Partial<PriceModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { priceModel.amount = n.getNumberValue(); },
        "created_at": n => { priceModel.createdAt = n.getDateValue(); },
        "currency": n => { priceModel.currency = n.getStringValue(); },
        "end_date": n => { priceModel.endDate = n.getDateValue(); },
        "etag": n => { priceModel.etag = n.getStringValue(); },
        "id": n => { priceModel.id = n.getStringValue(); },
        "start_date": n => { priceModel.startDate = n.getDateValue(); },
        "updated_at": n => { priceModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProviderModel(providerModel: Partial<ProviderModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { providerModel.createdAt = n.getDateValue(); },
        "description": n => { providerModel.description = n.getStringValue(); },
        "etag": n => { providerModel.etag = n.getStringValue(); },
        "icon_url": n => { providerModel.iconUrl = n.getStringValue(); },
        "id": n => { providerModel.id = n.getStringValue(); },
        "key": n => { providerModel.key = n.getStringValue(); },
        "labels": n => { providerModel.labels = n.getCollectionOfPrimitiveValues<string>(); },
        "name": n => { providerModel.name = n.getStringValue(); },
        "owner": n => { providerModel.owner = n.getObjectValue<OwnerModel>(createOwnerModelFromDiscriminatorValue); },
        "plans": n => { providerModel.plans = n.getCollectionOfObjectValues<PlanModel>(createPlanModelFromDiscriminatorValue); },
        "pricing_page_url": n => { providerModel.pricingPageUrl = n.getStringValue(); },
        "updated_at": n => { providerModel.updatedAt = n.getDateValue(); },
        "url": n => { providerModel.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdatePlanModel(updatePlanModel: Partial<UpdatePlanModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { updatePlanModel.description = n.getStringValue(); },
        "name": n => { updatePlanModel.name = n.getStringValue(); },
        "updateAt": n => { updatePlanModel.updateAt = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdatePriceModel(updatePriceModel: Partial<UpdatePriceModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { updatePriceModel.amount = n.getNumberValue(); },
        "created_at": n => { updatePriceModel.createdAt = n.getDateValue(); },
        "currency": n => { updatePriceModel.currency = n.getStringValue(); },
        "end_date": n => { updatePriceModel.endDate = n.getDateValue(); },
        "start_date": n => { updatePriceModel.startDate = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateProviderModel(updateProviderModel: Partial<UpdateProviderModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { updateProviderModel.description = n.getStringValue(); },
        "icon_url": n => { updateProviderModel.iconUrl = n.getStringValue(); },
        "labels": n => { updateProviderModel.labels = n.getCollectionOfPrimitiveValues<string>(); },
        "name": n => { updateProviderModel.name = n.getStringValue(); },
        "pricing_page_url": n => { updateProviderModel.pricingPageUrl = n.getStringValue(); },
        "updated_at": n => { updateProviderModel.updatedAt = n.getDateValue(); },
        "url": n => { updateProviderModel.url = n.getStringValue(); },
    }
}
/**
 * Plan object defining a specific subscription tier with associated pricing options
 */
export interface PlanModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * @Description ISO 8601 timestamp when the plan was originally created
     */
    createdAt?: Date | null;
    /**
     * @Description Optional detailed description of the plan features and benefits
     */
    description?: string | null;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     */
    etag?: string | null;
    /**
     * @Description Unique identifier for the plan (UUID format)
     */
    id?: string | null;
    /**
     * @Description Display name of the subscription plan
     */
    name?: string | null;
    /**
     * @Description List of pricing options available for this plan (different currencies, time periods, etc.)
     */
    prices?: PriceModel[] | null;
    /**
     * @Description ISO 8601 timestamp when the plan was last modified
     */
    updatedAt?: Date | null;
}
/**
 * Price object defining the cost of a subscription plan with currency and time validity
 */
export interface PriceModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * @Description Price amount in the specified currency (supports decimal values)
     */
    amount?: number | null;
    /**
     * @Description ISO 8601 timestamp when the price was originally created
     */
    createdAt?: Date | null;
    /**
     * @Description ISO 4217 currency code for the price
     */
    currency?: string | null;
    /**
     * @Description ISO 8601 timestamp when this price expires (null means indefinite)
     */
    endDate?: Date | null;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     */
    etag?: string | null;
    /**
     * @Description Unique identifier for the price (UUID format)
     */
    id?: string | null;
    /**
     * @Description ISO 8601 timestamp when this price becomes effective
     */
    startDate?: Date | null;
    /**
     * @Description ISO 8601 timestamp when the price was last modified
     */
    updatedAt?: Date | null;
}
/**
 * Provider object containing information about a subscription service provider and their available plans
 */
export interface ProviderModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * @Description ISO 8601 timestamp when the provider was originally created
     */
    createdAt?: Date | null;
    /**
     * @Description Optional detailed description of the provider and their services
     */
    description?: string | null;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     */
    etag?: string | null;
    /**
     * @Description Optional URL to the provider's icon or logo image
     */
    iconUrl?: string | null;
    /**
     * @Description Unique identifier for the provider (UUID format)
     */
    id?: string | null;
    /**
     * The key property
     */
    key?: string | null;
    /**
     * @Description List of label IDs associated with this provider for categorization
     */
    labels?: string[] | null;
    /**
     * @Description Display name of the service provider
     */
    name?: string | null;
    /**
     * @Description Ownership information specifying whether this subscription belongs to a user or family
     */
    owner?: OwnerModel | null;
    /**
     * @Description List of subscription plans offered by this provider
     */
    plans?: PlanModel[] | null;
    /**
     * @Description Optional URL to the provider's pricing information page
     */
    pricingPageUrl?: string | null;
    /**
     * @Description ISO 8601 timestamp when the provider was last modified
     */
    updatedAt?: Date | null;
    /**
     * @Description Optional URL to the provider's main website
     */
    url?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreatePlanModel(writer: SerializationWriter, createPlanModel: Partial<CreatePlanModel> | undefined | null = {}) : void {
    if (createPlanModel) {
        writer.writeDateValue("created_at", createPlanModel.createdAt);
        writer.writeStringValue("description", createPlanModel.description);
        writer.writeStringValue("id", createPlanModel.id);
        writer.writeStringValue("name", createPlanModel.name);
        writer.writeAdditionalData(createPlanModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreatePriceModel(writer: SerializationWriter, createPriceModel: Partial<CreatePriceModel> | undefined | null = {}) : void {
    if (createPriceModel) {
        writer.writeNumberValue("amount", createPriceModel.amount);
        writer.writeDateValue("created_at", createPriceModel.createdAt);
        writer.writeStringValue("currency", createPriceModel.currency);
        writer.writeDateValue("end_date", createPriceModel.endDate);
        writer.writeStringValue("id", createPriceModel.id);
        writer.writeDateValue("start_date", createPriceModel.startDate);
        writer.writeAdditionalData(createPriceModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateProviderModel(writer: SerializationWriter, createProviderModel: Partial<CreateProviderModel> | undefined | null = {}) : void {
    if (createProviderModel) {
        writer.writeDateValue("created_at", createProviderModel.createdAt);
        writer.writeStringValue("description", createProviderModel.description);
        writer.writeStringValue("icon_url", createProviderModel.iconUrl);
        writer.writeStringValue("id", createProviderModel.id);
        writer.writeCollectionOfPrimitiveValues<string>("labels", createProviderModel.labels);
        writer.writeStringValue("name", createProviderModel.name);
        writer.writeObjectValue<EditableOwnerModel>("owner", createProviderModel.owner, serializeEditableOwnerModel);
        writer.writeStringValue("pricing_page_url", createProviderModel.pricingPageUrl);
        writer.writeStringValue("url", createProviderModel.url);
        writer.writeAdditionalData(createProviderModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePlanModel(writer: SerializationWriter, planModel: Partial<PlanModel> | undefined | null = {}) : void {
    if (planModel) {
        writer.writeDateValue("created_at", planModel.createdAt);
        writer.writeStringValue("description", planModel.description);
        writer.writeStringValue("etag", planModel.etag);
        writer.writeStringValue("id", planModel.id);
        writer.writeStringValue("name", planModel.name);
        writer.writeCollectionOfObjectValues<PriceModel>("prices", planModel.prices, serializePriceModel);
        writer.writeDateValue("updated_at", planModel.updatedAt);
        writer.writeAdditionalData(planModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePriceModel(writer: SerializationWriter, priceModel: Partial<PriceModel> | undefined | null = {}) : void {
    if (priceModel) {
        writer.writeNumberValue("amount", priceModel.amount);
        writer.writeDateValue("created_at", priceModel.createdAt);
        writer.writeStringValue("currency", priceModel.currency);
        writer.writeDateValue("end_date", priceModel.endDate);
        writer.writeStringValue("etag", priceModel.etag);
        writer.writeStringValue("id", priceModel.id);
        writer.writeDateValue("start_date", priceModel.startDate);
        writer.writeDateValue("updated_at", priceModel.updatedAt);
        writer.writeAdditionalData(priceModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProviderModel(writer: SerializationWriter, providerModel: Partial<ProviderModel> | undefined | null = {}) : void {
    if (providerModel) {
        writer.writeDateValue("created_at", providerModel.createdAt);
        writer.writeStringValue("description", providerModel.description);
        writer.writeStringValue("etag", providerModel.etag);
        writer.writeStringValue("icon_url", providerModel.iconUrl);
        writer.writeStringValue("id", providerModel.id);
        writer.writeStringValue("key", providerModel.key);
        writer.writeCollectionOfPrimitiveValues<string>("labels", providerModel.labels);
        writer.writeStringValue("name", providerModel.name);
        writer.writeObjectValue<OwnerModel>("owner", providerModel.owner, serializeOwnerModel);
        writer.writeCollectionOfObjectValues<PlanModel>("plans", providerModel.plans, serializePlanModel);
        writer.writeStringValue("pricing_page_url", providerModel.pricingPageUrl);
        writer.writeDateValue("updated_at", providerModel.updatedAt);
        writer.writeStringValue("url", providerModel.url);
        writer.writeAdditionalData(providerModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdatePlanModel(writer: SerializationWriter, updatePlanModel: Partial<UpdatePlanModel> | undefined | null = {}) : void {
    if (updatePlanModel) {
        writer.writeStringValue("description", updatePlanModel.description);
        writer.writeStringValue("name", updatePlanModel.name);
        writer.writeStringValue("updateAt", updatePlanModel.updateAt);
        writer.writeAdditionalData(updatePlanModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdatePriceModel(writer: SerializationWriter, updatePriceModel: Partial<UpdatePriceModel> | undefined | null = {}) : void {
    if (updatePriceModel) {
        writer.writeNumberValue("amount", updatePriceModel.amount);
        writer.writeDateValue("created_at", updatePriceModel.createdAt);
        writer.writeStringValue("currency", updatePriceModel.currency);
        writer.writeDateValue("end_date", updatePriceModel.endDate);
        writer.writeDateValue("start_date", updatePriceModel.startDate);
        writer.writeAdditionalData(updatePriceModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateProviderModel(writer: SerializationWriter, updateProviderModel: Partial<UpdateProviderModel> | undefined | null = {}) : void {
    if (updateProviderModel) {
        writer.writeStringValue("description", updateProviderModel.description);
        writer.writeStringValue("icon_url", updateProviderModel.iconUrl);
        writer.writeCollectionOfPrimitiveValues<string>("labels", updateProviderModel.labels);
        writer.writeStringValue("name", updateProviderModel.name);
        writer.writeStringValue("pricing_page_url", updateProviderModel.pricingPageUrl);
        writer.writeDateValue("updated_at", updateProviderModel.updatedAt);
        writer.writeStringValue("url", updateProviderModel.url);
        writer.writeAdditionalData(updateProviderModel.additionalData);
    }
}
export interface UpdatePlanModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The updateAt property
     */
    updateAt?: string | null;
}
export interface UpdatePriceModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * The currency property
     */
    currency?: string | null;
    /**
     * The end_date property
     */
    endDate?: Date | null;
    /**
     * The start_date property
     */
    startDate?: Date | null;
}
export interface UpdateProviderModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The icon_url property
     */
    iconUrl?: string | null;
    /**
     * The labels property
     */
    labels?: string[] | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The pricing_page_url property
     */
    pricingPageUrl?: string | null;
    /**
     * The updated_at property
     */
    updatedAt?: Date | null;
    /**
     * The url property
     */
    url?: string | null;
}
/* tslint:enable */
/* eslint-enable */
