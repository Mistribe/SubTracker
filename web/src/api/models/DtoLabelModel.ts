/* tslint:disable */
/* eslint-disable */
/**
 * SubTracker API
 * This api provide HTTPRest endpoints for the application SubTracker.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mistribe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DtoOwnerModel } from './DtoOwnerModel';
import {
    DtoOwnerModelFromJSON,
    DtoOwnerModelFromJSONTyped,
    DtoOwnerModelToJSON,
    DtoOwnerModelToJSONTyped,
} from './DtoOwnerModel';

/**
 * 
 * @export
 * @interface DtoLabelModel
 */
export interface DtoLabelModel {
    /**
     * @Description Hexadecimal color code for visual representation of the label
     * @type {string}
     * @memberof DtoLabelModel
     */
    color: string;
    /**
     * @Description ISO 8601 timestamp indicating when the label was originally created
     * @type {Date}
     * @memberof DtoLabelModel
     */
    createdAt: Date;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     * @type {string}
     * @memberof DtoLabelModel
     */
    etag: string;
    /**
     * @Description Unique identifier for the label (UUID format)
     * @type {string}
     * @memberof DtoLabelModel
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof DtoLabelModel
     */
    key?: string;
    /**
     * @Description Display name of the label
     * @type {string}
     * @memberof DtoLabelModel
     */
    name: string;
    /**
     * 
     * @type {DtoOwnerModel}
     * @memberof DtoLabelModel
     */
    owner: DtoOwnerModel;
    /**
     * @Description ISO 8601 timestamp indicating when the label was last modified
     * @type {Date}
     * @memberof DtoLabelModel
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the DtoLabelModel interface.
 */
export function instanceOfDtoLabelModel(value: object): value is DtoLabelModel {
    if (!('color' in value) || value['color'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('etag' in value) || value['etag'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('owner' in value) || value['owner'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function DtoLabelModelFromJSON(json: any): DtoLabelModel {
    return DtoLabelModelFromJSONTyped(json, false);
}

export function DtoLabelModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DtoLabelModel {
    if (json == null) {
        return json;
    }
    return {
        
        'color': json['color'],
        'createdAt': (new Date(json['created_at'])),
        'etag': json['etag'],
        'id': json['id'],
        'key': json['key'] == null ? undefined : json['key'],
        'name': json['name'],
        'owner': DtoOwnerModelFromJSON(json['owner']),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function DtoLabelModelToJSON(json: any): DtoLabelModel {
    return DtoLabelModelToJSONTyped(json, false);
}

export function DtoLabelModelToJSONTyped(value?: DtoLabelModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'color': value['color'],
        'created_at': value['createdAt'].toISOString(),
        'etag': value['etag'],
        'id': value['id'],
        'key': value['key'],
        'name': value['name'],
        'owner': DtoOwnerModelToJSON(value['owner']),
        'updated_at': value['updatedAt'].toISOString(),
    };
}

