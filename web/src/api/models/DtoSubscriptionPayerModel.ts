/* tslint:disable */
/* eslint-disable */
/**
 * SubTracker API
 * This api provide HTTPRest endpoints for the application SubTracker.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mistribe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * @Description Information about who pays for this subscription within the family
 * @export
 * @interface DtoSubscriptionPayerModel
 */
export interface DtoSubscriptionPayerModel {
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     * @type {string}
     * @memberof DtoSubscriptionPayerModel
     */
    etag: string;
    /**
     * @Description ID of the family associated with this payer
     * @type {string}
     * @memberof DtoSubscriptionPayerModel
     */
    familyId: string;
    /**
     * @Description ID of the specific family member who pays (required when type is family_member)
     * @type {string}
     * @memberof DtoSubscriptionPayerModel
     */
    memberId?: string;
    /**
     * @Description Type of payer (family or family member)
     * @type {string}
     * @memberof DtoSubscriptionPayerModel
     */
    type: DtoSubscriptionPayerModelTypeEnum;
}


/**
 * @export
 */
export const DtoSubscriptionPayerModelTypeEnum = {
    Family: 'family',
    FamilyMember: 'family_member'
} as const;
export type DtoSubscriptionPayerModelTypeEnum = typeof DtoSubscriptionPayerModelTypeEnum[keyof typeof DtoSubscriptionPayerModelTypeEnum];


/**
 * Check if a given object implements the DtoSubscriptionPayerModel interface.
 */
export function instanceOfDtoSubscriptionPayerModel(value: object): value is DtoSubscriptionPayerModel {
    if (!('etag' in value) || value['etag'] === undefined) return false;
    if (!('familyId' in value) || value['familyId'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function DtoSubscriptionPayerModelFromJSON(json: any): DtoSubscriptionPayerModel {
    return DtoSubscriptionPayerModelFromJSONTyped(json, false);
}

export function DtoSubscriptionPayerModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DtoSubscriptionPayerModel {
    if (json == null) {
        return json;
    }
    return {
        
        'etag': json['etag'],
        'familyId': json['family_id'],
        'memberId': json['memberId'] == null ? undefined : json['memberId'],
        'type': json['type'],
    };
}

export function DtoSubscriptionPayerModelToJSON(json: any): DtoSubscriptionPayerModel {
    return DtoSubscriptionPayerModelToJSONTyped(json, false);
}

export function DtoSubscriptionPayerModelToJSONTyped(value?: DtoSubscriptionPayerModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'etag': value['etag'],
        'family_id': value['familyId'],
        'memberId': value['memberId'],
        'type': value['type'],
    };
}

