/* tslint:disable */
/* eslint-disable */
/**
 * SubTracker API
 * This api provide HTTPRest endpoints for the application SubTracker.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mistribe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DtoLimit
 */
export interface DtoLimit {
    /**
     * 
     * @type {string}
     * @memberof DtoLimit
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof DtoLimit
     */
    feature?: string;
    /**
     * HasLimit indicates whether a limit is imposed.
     * @type {boolean}
     * @memberof DtoLimit
     */
    hasLimit?: boolean;
    /**
     * Limit represents a structure containing quota limits, remaining values, and whether a limit is applied.
     * @type {number}
     * @memberof DtoLimit
     */
    limit?: number;
    /**
     * Remaining indicates the remaining quota available for use.
     * @type {number}
     * @memberof DtoLimit
     */
    remaining?: number;
}

/**
 * Check if a given object implements the DtoLimit interface.
 */
export function instanceOfDtoLimit(value: object): value is DtoLimit {
    return true;
}

export function DtoLimitFromJSON(json: any): DtoLimit {
    return DtoLimitFromJSONTyped(json, false);
}

export function DtoLimitFromJSONTyped(json: any, ignoreDiscriminator: boolean): DtoLimit {
    if (json == null) {
        return json;
    }
    return {
        
        'category': json['category'] == null ? undefined : json['category'],
        'feature': json['feature'] == null ? undefined : json['feature'],
        'hasLimit': json['hasLimit'] == null ? undefined : json['hasLimit'],
        'limit': json['limit'] == null ? undefined : json['limit'],
        'remaining': json['remaining'] == null ? undefined : json['remaining'],
    };
}

export function DtoLimitToJSON(json: any): DtoLimit {
    return DtoLimitToJSONTyped(json, false);
}

export function DtoLimitToJSONTyped(value?: DtoLimit | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'category': value['category'],
        'feature': value['feature'],
        'hasLimit': value['hasLimit'],
        'limit': value['limit'],
        'remaining': value['remaining'],
    };
}

