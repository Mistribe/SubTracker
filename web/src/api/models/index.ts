/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AmountModel extends AdditionalDataHolder, Parsable {
    /**
     * The currency property
     */
    currency?: string | null;
    /**
     * The source property
     */
    source?: AmountModel | null;
    /**
     * The value property
     */
    value?: number | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AmountModel}
 */
// @ts-ignore
export function createAmountModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAmountModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateFamilyMemberModel}
 */
// @ts-ignore
export function createCreateFamilyMemberModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateFamilyMemberModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateFamilyModel}
 */
// @ts-ignore
export function createCreateFamilyModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateFamilyModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateLabelModel}
 */
// @ts-ignore
export function createCreateLabelModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateLabelModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreatePlanModel}
 */
// @ts-ignore
export function createCreatePlanModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreatePlanModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreatePriceModel}
 */
// @ts-ignore
export function createCreatePriceModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreatePriceModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateProviderModel}
 */
// @ts-ignore
export function createCreateProviderModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateProviderModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateSubscriptionModel}
 */
// @ts-ignore
export function createCreateSubscriptionModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateSubscriptionModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CurrencyRateModel}
 */
// @ts-ignore
export function createCurrencyRateModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCurrencyRateModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CurrencyRatesModel}
 */
// @ts-ignore
export function createCurrencyRatesModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCurrencyRatesModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EditableOwnerModel}
 */
// @ts-ignore
export function createEditableOwnerModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEditableOwnerModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EditableSubscriptionPayerModel}
 */
// @ts-ignore
export function createEditableSubscriptionPayerModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEditableSubscriptionPayerModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FamilyInviteRequest}
 */
// @ts-ignore
export function createFamilyInviteRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFamilyInviteRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FamilyInviteResponse}
 */
// @ts-ignore
export function createFamilyInviteResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFamilyInviteResponse;
}
export interface CreateFamilyMemberModel extends AdditionalDataHolder, Parsable {
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The type property
     */
    type?: CreateFamilyMemberModel_type | null;
}
export type CreateFamilyMemberModel_type = (typeof CreateFamilyMemberModel_typeObject)[keyof typeof CreateFamilyMemberModel_typeObject];
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FamilyMemberModel}
 */
// @ts-ignore
export function createFamilyMemberModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFamilyMemberModel;
}
export interface CreateFamilyModel extends AdditionalDataHolder, Parsable {
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * The creator_name property
     */
    creatorName?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The name property
     */
    name?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FamilyModel}
 */
// @ts-ignore
export function createFamilyModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFamilyModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HttpErrorResponse}
 */
// @ts-ignore
export function createHttpErrorResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHttpErrorResponse;
}
export interface CreateLabelModel extends AdditionalDataHolder, Parsable {
    /**
     * The color property
     */
    color?: string | null;
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The owner property
     */
    owner?: EditableOwnerModel | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LabelModel}
 */
// @ts-ignore
export function createLabelModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLabelModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LabelRefModel}
 */
// @ts-ignore
export function createLabelRefModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLabelRefModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OwnerModel}
 */
// @ts-ignore
export function createOwnerModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOwnerModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PaginatedResponseModelEndpoints_labelModel}
 */
// @ts-ignore
export function createPaginatedResponseModelEndpoints_labelModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPaginatedResponseModelEndpoints_labelModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PaginatedResponseModelEndpoints_ProviderModel}
 */
// @ts-ignore
export function createPaginatedResponseModelEndpoints_ProviderModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPaginatedResponseModelEndpoints_ProviderModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PaginatedResponseModelEndpoints_SubscriptionModel}
 */
// @ts-ignore
export function createPaginatedResponseModelEndpoints_SubscriptionModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPaginatedResponseModelEndpoints_SubscriptionModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PatchFamilyMemberModel}
 */
// @ts-ignore
export function createPatchFamilyMemberModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPatchFamilyMemberModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PatchFamilyModel}
 */
// @ts-ignore
export function createPatchFamilyModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPatchFamilyModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PatchSubscriptionModel}
 */
// @ts-ignore
export function createPatchSubscriptionModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPatchSubscriptionModel;
}
export interface CreatePlanModel extends AdditionalDataHolder, Parsable {
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The name property
     */
    name?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PlanModel}
 */
// @ts-ignore
export function createPlanModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPlanModel;
}
/**
 * Price information for a plan
 */
export interface CreatePriceModel extends AdditionalDataHolder, Parsable {
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * The currency property
     */
    currency?: string | null;
    /**
     * The end_date property
     */
    endDate?: Date | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The start_date property
     */
    startDate?: Date | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PriceModel}
 */
// @ts-ignore
export function createPriceModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPriceModel;
}
export interface CreateProviderModel extends AdditionalDataHolder, Parsable {
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The icon_url property
     */
    iconUrl?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The labels property
     */
    labels?: string[] | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The owner property
     */
    owner?: EditableOwnerModel | null;
    /**
     * The pricing_page_url property
     */
    pricingPageUrl?: string | null;
    /**
     * The url property
     */
    url?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProviderModel}
 */
// @ts-ignore
export function createProviderModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProviderModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionFreeTrialModel}
 */
// @ts-ignore
export function createSubscriptionFreeTrialModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionFreeTrialModel;
}
export interface CreateSubscriptionModel extends AdditionalDataHolder, Parsable {
    /**
     * The created_at property
     */
    createdAt?: string | null;
    /**
     * The custom_price property
     */
    customPrice?: AmountModel | null;
    /**
     * The custom_recurrency property
     */
    customRecurrency?: number | null;
    /**
     * The end_date property
     */
    endDate?: Date | null;
    /**
     * @Description Number of free trial days remaining (null if no trial or trial expired)
     */
    freeTrial?: SubscriptionFreeTrialModel | null;
    /**
     * The friendly_name property
     */
    friendlyName?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The labels property
     */
    labels?: string[] | null;
    /**
     * The owner property
     */
    owner?: EditableOwnerModel | null;
    /**
     * Subscription payer object used for updating who pays for a subscription
     */
    payer?: EditableSubscriptionPayerModel | null;
    /**
     * The plan_id property
     */
    planId?: string | null;
    /**
     * The price_id property
     */
    priceId?: string | null;
    /**
     * The provider_id property
     */
    providerId?: string | null;
    /**
     * The recurrency property
     */
    recurrency?: string | null;
    /**
     * The service_users property
     */
    serviceUsers?: string[] | null;
    /**
     * The start_date property
     */
    startDate?: Date | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionModel}
 */
// @ts-ignore
export function createSubscriptionModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionPayerModel}
 */
// @ts-ignore
export function createSubscriptionPayerModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionPayerModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionSummaryResponse}
 */
// @ts-ignore
export function createSubscriptionSummaryResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionSummaryResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionSummaryTopLabelResponse}
 */
// @ts-ignore
export function createSubscriptionSummaryTopLabelResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionSummaryTopLabelResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionSummaryTopProviderResponse}
 */
// @ts-ignore
export function createSubscriptionSummaryTopProviderResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionSummaryTopProviderResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionSummaryUpcomingRenewalResponse}
 */
// @ts-ignore
export function createSubscriptionSummaryUpcomingRenewalResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionSummaryUpcomingRenewalResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateFamilyMemberModel}
 */
// @ts-ignore
export function createUpdateFamilyMemberModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateFamilyMemberModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateFamilyModel}
 */
// @ts-ignore
export function createUpdateFamilyModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateFamilyModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateLabelModel}
 */
// @ts-ignore
export function createUpdateLabelModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateLabelModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdatePlanModel}
 */
// @ts-ignore
export function createUpdatePlanModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdatePlanModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdatePreferredCurrencyModel}
 */
// @ts-ignore
export function createUpdatePreferredCurrencyModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdatePreferredCurrencyModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdatePriceModel}
 */
// @ts-ignore
export function createUpdatePriceModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdatePriceModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateProfileModel}
 */
// @ts-ignore
export function createUpdateProfileModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateProfileModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateProviderModel}
 */
// @ts-ignore
export function createUpdateProviderModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateProviderModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateSubscriptionModel}
 */
// @ts-ignore
export function createUpdateSubscriptionModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateSubscriptionModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserPreferredCurrencyModel}
 */
// @ts-ignore
export function createUserPreferredCurrencyModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserPreferredCurrencyModel;
}
export interface CurrencyRateModel extends AdditionalDataHolder, Parsable {
    /**
     * The currency property
     */
    currency?: string | null;
    /**
     * The rate property
     */
    rate?: number | null;
}
export interface CurrencyRatesModel extends AdditionalDataHolder, Parsable {
    /**
     * The rates property
     */
    rates?: CurrencyRateModel[] | null;
    /**
     * The timestamp property
     */
    timestamp?: Date | null;
}
/**
 * The deserialization information for the current model
 * @param AmountModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAmountModel(amountModel: Partial<AmountModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "currency": n => { amountModel.currency = n.getStringValue(); },
        "source": n => { amountModel.source = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "value": n => { amountModel.value = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CreateFamilyMemberModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateFamilyMemberModel(createFamilyMemberModel: Partial<CreateFamilyMemberModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { createFamilyMemberModel.createdAt = n.getDateValue(); },
        "id": n => { createFamilyMemberModel.id = n.getStringValue(); },
        "name": n => { createFamilyMemberModel.name = n.getStringValue(); },
        "type": n => { createFamilyMemberModel.type = n.getEnumValue<CreateFamilyMemberModel_type>(CreateFamilyMemberModel_typeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param CreateFamilyModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateFamilyModel(createFamilyModel: Partial<CreateFamilyModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { createFamilyModel.createdAt = n.getDateValue(); },
        "creator_name": n => { createFamilyModel.creatorName = n.getStringValue(); },
        "id": n => { createFamilyModel.id = n.getStringValue(); },
        "name": n => { createFamilyModel.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CreateLabelModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateLabelModel(createLabelModel: Partial<CreateLabelModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "color": n => { createLabelModel.color = n.getStringValue(); },
        "created_at": n => { createLabelModel.createdAt = n.getDateValue(); },
        "id": n => { createLabelModel.id = n.getStringValue(); },
        "name": n => { createLabelModel.name = n.getStringValue(); },
        "owner": n => { createLabelModel.owner = n.getObjectValue<EditableOwnerModel>(createEditableOwnerModelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param CreatePlanModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreatePlanModel(createPlanModel: Partial<CreatePlanModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { createPlanModel.createdAt = n.getDateValue(); },
        "description": n => { createPlanModel.description = n.getStringValue(); },
        "id": n => { createPlanModel.id = n.getStringValue(); },
        "name": n => { createPlanModel.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CreatePriceModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreatePriceModel(createPriceModel: Partial<CreatePriceModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { createPriceModel.amount = n.getNumberValue(); },
        "created_at": n => { createPriceModel.createdAt = n.getDateValue(); },
        "currency": n => { createPriceModel.currency = n.getStringValue(); },
        "end_date": n => { createPriceModel.endDate = n.getDateValue(); },
        "id": n => { createPriceModel.id = n.getStringValue(); },
        "start_date": n => { createPriceModel.startDate = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CreateProviderModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateProviderModel(createProviderModel: Partial<CreateProviderModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { createProviderModel.createdAt = n.getDateValue(); },
        "description": n => { createProviderModel.description = n.getStringValue(); },
        "icon_url": n => { createProviderModel.iconUrl = n.getStringValue(); },
        "id": n => { createProviderModel.id = n.getStringValue(); },
        "labels": n => { createProviderModel.labels = n.getCollectionOfPrimitiveValues<string>(); },
        "name": n => { createProviderModel.name = n.getStringValue(); },
        "owner": n => { createProviderModel.owner = n.getObjectValue<EditableOwnerModel>(createEditableOwnerModelFromDiscriminatorValue); },
        "pricing_page_url": n => { createProviderModel.pricingPageUrl = n.getStringValue(); },
        "url": n => { createProviderModel.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CreateSubscriptionModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateSubscriptionModel(createSubscriptionModel: Partial<CreateSubscriptionModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { createSubscriptionModel.createdAt = n.getStringValue(); },
        "custom_price": n => { createSubscriptionModel.customPrice = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "custom_recurrency": n => { createSubscriptionModel.customRecurrency = n.getNumberValue(); },
        "end_date": n => { createSubscriptionModel.endDate = n.getDateValue(); },
        "free_trial": n => { createSubscriptionModel.freeTrial = n.getObjectValue<SubscriptionFreeTrialModel>(createSubscriptionFreeTrialModelFromDiscriminatorValue); },
        "friendly_name": n => { createSubscriptionModel.friendlyName = n.getStringValue(); },
        "id": n => { createSubscriptionModel.id = n.getStringValue(); },
        "labels": n => { createSubscriptionModel.labels = n.getCollectionOfPrimitiveValues<string>(); },
        "owner": n => { createSubscriptionModel.owner = n.getObjectValue<EditableOwnerModel>(createEditableOwnerModelFromDiscriminatorValue); },
        "payer": n => { createSubscriptionModel.payer = n.getObjectValue<EditableSubscriptionPayerModel>(createEditableSubscriptionPayerModelFromDiscriminatorValue); },
        "plan_id": n => { createSubscriptionModel.planId = n.getStringValue(); },
        "price_id": n => { createSubscriptionModel.priceId = n.getStringValue(); },
        "provider_id": n => { createSubscriptionModel.providerId = n.getStringValue(); },
        "recurrency": n => { createSubscriptionModel.recurrency = n.getStringValue(); },
        "service_users": n => { createSubscriptionModel.serviceUsers = n.getCollectionOfPrimitiveValues<string>(); },
        "start_date": n => { createSubscriptionModel.startDate = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CurrencyRateModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCurrencyRateModel(currencyRateModel: Partial<CurrencyRateModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "currency": n => { currencyRateModel.currency = n.getStringValue(); },
        "rate": n => { currencyRateModel.rate = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CurrencyRatesModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCurrencyRatesModel(currencyRatesModel: Partial<CurrencyRatesModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "rates": n => { currencyRatesModel.rates = n.getCollectionOfObjectValues<CurrencyRateModel>(createCurrencyRateModelFromDiscriminatorValue); },
        "timestamp": n => { currencyRatesModel.timestamp = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param EditableOwnerModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEditableOwnerModel(editableOwnerModel: Partial<EditableOwnerModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "family_id": n => { editableOwnerModel.familyId = n.getStringValue(); },
        "type": n => { editableOwnerModel.type = n.getEnumValue<EditableOwnerModel_type>(EditableOwnerModel_typeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param EditableSubscriptionPayerModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEditableSubscriptionPayerModel(editableSubscriptionPayerModel: Partial<EditableSubscriptionPayerModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "family_id": n => { editableSubscriptionPayerModel.familyId = n.getStringValue(); },
        "memberId": n => { editableSubscriptionPayerModel.memberId = n.getStringValue(); },
        "type": n => { editableSubscriptionPayerModel.type = n.getEnumValue<EditableSubscriptionPayerModel_type>(EditableSubscriptionPayerModel_typeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param FamilyInviteRequest The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFamilyInviteRequest(familyInviteRequest: Partial<FamilyInviteRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { familyInviteRequest.email = n.getStringValue(); },
        "family_member_id": n => { familyInviteRequest.familyMemberId = n.getStringValue(); },
        "name": n => { familyInviteRequest.name = n.getStringValue(); },
        "type": n => { familyInviteRequest.type = n.getEnumValue<FamilyInviteRequest_type>(FamilyInviteRequest_typeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param FamilyInviteResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFamilyInviteResponse(familyInviteResponse: Partial<FamilyInviteResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { familyInviteResponse.code = n.getStringValue(); },
        "family_id": n => { familyInviteResponse.familyId = n.getStringValue(); },
        "family_member_id": n => { familyInviteResponse.familyMemberId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param FamilyMemberModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFamilyMemberModel(familyMemberModel: Partial<FamilyMemberModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { familyMemberModel.createdAt = n.getDateValue(); },
        "etag": n => { familyMemberModel.etag = n.getStringValue(); },
        "family_id": n => { familyMemberModel.familyId = n.getStringValue(); },
        "has_account": n => { familyMemberModel.hasAccount = n.getBooleanValue(); },
        "id": n => { familyMemberModel.id = n.getStringValue(); },
        "is_you": n => { familyMemberModel.isYou = n.getBooleanValue(); },
        "name": n => { familyMemberModel.name = n.getStringValue(); },
        "type": n => { familyMemberModel.type = n.getEnumValue<FamilyMemberModel_type>(FamilyMemberModel_typeObject); },
        "updated_at": n => { familyMemberModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param FamilyModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFamilyModel(familyModel: Partial<FamilyModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { familyModel.createdAt = n.getDateValue(); },
        "etag": n => { familyModel.etag = n.getStringValue(); },
        "id": n => { familyModel.id = n.getStringValue(); },
        "is_owner": n => { familyModel.isOwner = n.getBooleanValue(); },
        "members": n => { familyModel.members = n.getCollectionOfObjectValues<FamilyMemberModel>(createFamilyMemberModelFromDiscriminatorValue); },
        "name": n => { familyModel.name = n.getStringValue(); },
        "updated_at": n => { familyModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param HttpErrorResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHttpErrorResponse(httpErrorResponse: Partial<HttpErrorResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "message": n => { httpErrorResponse.messageEscaped = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param LabelModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLabelModel(labelModel: Partial<LabelModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "color": n => { labelModel.color = n.getStringValue(); },
        "created_at": n => { labelModel.createdAt = n.getDateValue(); },
        "etag": n => { labelModel.etag = n.getStringValue(); },
        "id": n => { labelModel.id = n.getStringValue(); },
        "key": n => { labelModel.key = n.getStringValue(); },
        "name": n => { labelModel.name = n.getStringValue(); },
        "owner": n => { labelModel.owner = n.getObjectValue<OwnerModel>(createOwnerModelFromDiscriminatorValue); },
        "updated_at": n => { labelModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param LabelRefModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLabelRefModel(labelRefModel: Partial<LabelRefModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "label_id": n => { labelRefModel.labelId = n.getStringValue(); },
        "source": n => { labelRefModel.source = n.getEnumValue<LabelRefModel_source>(LabelRefModel_sourceObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param OwnerModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOwnerModel(ownerModel: Partial<OwnerModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "etag": n => { ownerModel.etag = n.getStringValue(); },
        "family_id": n => { ownerModel.familyId = n.getStringValue(); },
        "type": n => { ownerModel.type = n.getEnumValue<OwnerModel_type>(OwnerModel_typeObject); },
        "userId": n => { ownerModel.userId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param PaginatedResponseModelEndpoints_labelModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPaginatedResponseModelEndpoints_labelModel(paginatedResponseModelEndpoints_labelModel: Partial<PaginatedResponseModelEndpoints_labelModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "data": n => { paginatedResponseModelEndpoints_labelModel.data = n.getCollectionOfObjectValues<LabelModel>(createLabelModelFromDiscriminatorValue); },
        "length": n => { paginatedResponseModelEndpoints_labelModel.length = n.getNumberValue(); },
        "total": n => { paginatedResponseModelEndpoints_labelModel.total = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param PaginatedResponseModelEndpoints_ProviderModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPaginatedResponseModelEndpoints_ProviderModel(paginatedResponseModelEndpoints_ProviderModel: Partial<PaginatedResponseModelEndpoints_ProviderModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "data": n => { paginatedResponseModelEndpoints_ProviderModel.data = n.getCollectionOfObjectValues<ProviderModel>(createProviderModelFromDiscriminatorValue); },
        "length": n => { paginatedResponseModelEndpoints_ProviderModel.length = n.getNumberValue(); },
        "total": n => { paginatedResponseModelEndpoints_ProviderModel.total = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param PaginatedResponseModelEndpoints_SubscriptionModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPaginatedResponseModelEndpoints_SubscriptionModel(paginatedResponseModelEndpoints_SubscriptionModel: Partial<PaginatedResponseModelEndpoints_SubscriptionModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "data": n => { paginatedResponseModelEndpoints_SubscriptionModel.data = n.getCollectionOfObjectValues<SubscriptionModel>(createSubscriptionModelFromDiscriminatorValue); },
        "length": n => { paginatedResponseModelEndpoints_SubscriptionModel.length = n.getNumberValue(); },
        "total": n => { paginatedResponseModelEndpoints_SubscriptionModel.total = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param PatchFamilyMemberModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPatchFamilyMemberModel(patchFamilyMemberModel: Partial<PatchFamilyMemberModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { patchFamilyMemberModel.id = n.getStringValue(); },
        "name": n => { patchFamilyMemberModel.name = n.getStringValue(); },
        "type": n => { patchFamilyMemberModel.type = n.getEnumValue<PatchFamilyMemberModel_type>(PatchFamilyMemberModel_typeObject); },
        "updated_at": n => { patchFamilyMemberModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param PatchFamilyModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPatchFamilyModel(patchFamilyModel: Partial<PatchFamilyModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { patchFamilyModel.id = n.getStringValue(); },
        "members": n => { patchFamilyModel.members = n.getCollectionOfObjectValues<PatchFamilyMemberModel>(createPatchFamilyMemberModelFromDiscriminatorValue); },
        "name": n => { patchFamilyModel.name = n.getStringValue(); },
        "updated_at": n => { patchFamilyModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param PatchSubscriptionModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPatchSubscriptionModel(patchSubscriptionModel: Partial<PatchSubscriptionModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "custom_price": n => { patchSubscriptionModel.customPrice = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "custom_recurrency": n => { patchSubscriptionModel.customRecurrency = n.getNumberValue(); },
        "end_date": n => { patchSubscriptionModel.endDate = n.getDateValue(); },
        "free_trial": n => { patchSubscriptionModel.freeTrial = n.getObjectValue<SubscriptionFreeTrialModel>(createSubscriptionFreeTrialModelFromDiscriminatorValue); },
        "friendly_name": n => { patchSubscriptionModel.friendlyName = n.getStringValue(); },
        "id": n => { patchSubscriptionModel.id = n.getStringValue(); },
        "labels": n => { patchSubscriptionModel.labels = n.getCollectionOfPrimitiveValues<string>(); },
        "owner": n => { patchSubscriptionModel.owner = n.getObjectValue<EditableOwnerModel>(createEditableOwnerModelFromDiscriminatorValue); },
        "payer": n => { patchSubscriptionModel.payer = n.getObjectValue<EditableSubscriptionPayerModel>(createEditableSubscriptionPayerModelFromDiscriminatorValue); },
        "plan_id": n => { patchSubscriptionModel.planId = n.getStringValue(); },
        "price_id": n => { patchSubscriptionModel.priceId = n.getStringValue(); },
        "provider_id": n => { patchSubscriptionModel.providerId = n.getStringValue(); },
        "recurrency": n => { patchSubscriptionModel.recurrency = n.getStringValue(); },
        "service_users": n => { patchSubscriptionModel.serviceUsers = n.getCollectionOfPrimitiveValues<string>(); },
        "start_date": n => { patchSubscriptionModel.startDate = n.getDateValue(); },
        "updated_at": n => { patchSubscriptionModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param PlanModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPlanModel(planModel: Partial<PlanModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { planModel.createdAt = n.getDateValue(); },
        "description": n => { planModel.description = n.getStringValue(); },
        "etag": n => { planModel.etag = n.getStringValue(); },
        "id": n => { planModel.id = n.getStringValue(); },
        "name": n => { planModel.name = n.getStringValue(); },
        "prices": n => { planModel.prices = n.getCollectionOfObjectValues<PriceModel>(createPriceModelFromDiscriminatorValue); },
        "updated_at": n => { planModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param PriceModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPriceModel(priceModel: Partial<PriceModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { priceModel.amount = n.getNumberValue(); },
        "created_at": n => { priceModel.createdAt = n.getDateValue(); },
        "currency": n => { priceModel.currency = n.getStringValue(); },
        "end_date": n => { priceModel.endDate = n.getDateValue(); },
        "etag": n => { priceModel.etag = n.getStringValue(); },
        "id": n => { priceModel.id = n.getStringValue(); },
        "start_date": n => { priceModel.startDate = n.getDateValue(); },
        "updated_at": n => { priceModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProviderModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProviderModel(providerModel: Partial<ProviderModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { providerModel.createdAt = n.getDateValue(); },
        "description": n => { providerModel.description = n.getStringValue(); },
        "etag": n => { providerModel.etag = n.getStringValue(); },
        "icon_url": n => { providerModel.iconUrl = n.getStringValue(); },
        "id": n => { providerModel.id = n.getStringValue(); },
        "key": n => { providerModel.key = n.getStringValue(); },
        "labels": n => { providerModel.labels = n.getCollectionOfPrimitiveValues<string>(); },
        "name": n => { providerModel.name = n.getStringValue(); },
        "owner": n => { providerModel.owner = n.getObjectValue<OwnerModel>(createOwnerModelFromDiscriminatorValue); },
        "plans": n => { providerModel.plans = n.getCollectionOfObjectValues<PlanModel>(createPlanModelFromDiscriminatorValue); },
        "pricing_page_url": n => { providerModel.pricingPageUrl = n.getStringValue(); },
        "updated_at": n => { providerModel.updatedAt = n.getDateValue(); },
        "url": n => { providerModel.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param SubscriptionFreeTrialModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionFreeTrialModel(subscriptionFreeTrialModel: Partial<SubscriptionFreeTrialModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "end_date": n => { subscriptionFreeTrialModel.endDate = n.getDateValue(); },
        "start_date": n => { subscriptionFreeTrialModel.startDate = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param SubscriptionModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionModel(subscriptionModel: Partial<SubscriptionModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "created_at": n => { subscriptionModel.createdAt = n.getDateValue(); },
        "custom_price": n => { subscriptionModel.customPrice = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "custom_recurrency": n => { subscriptionModel.customRecurrency = n.getNumberValue(); },
        "end_date": n => { subscriptionModel.endDate = n.getDateValue(); },
        "etag": n => { subscriptionModel.etag = n.getStringValue(); },
        "free_trial": n => { subscriptionModel.freeTrial = n.getObjectValue<SubscriptionFreeTrialModel>(createSubscriptionFreeTrialModelFromDiscriminatorValue); },
        "friendly_name": n => { subscriptionModel.friendlyName = n.getStringValue(); },
        "id": n => { subscriptionModel.id = n.getStringValue(); },
        "is_active": n => { subscriptionModel.isActive = n.getBooleanValue(); },
        "label_refs": n => { subscriptionModel.labelRefs = n.getCollectionOfObjectValues<LabelRefModel>(createLabelRefModelFromDiscriminatorValue); },
        "owner": n => { subscriptionModel.owner = n.getObjectValue<OwnerModel>(createOwnerModelFromDiscriminatorValue); },
        "payer": n => { subscriptionModel.payer = n.getObjectValue<SubscriptionPayerModel>(createSubscriptionPayerModelFromDiscriminatorValue); },
        "plan_id": n => { subscriptionModel.planId = n.getStringValue(); },
        "price_id": n => { subscriptionModel.priceId = n.getStringValue(); },
        "provider_id": n => { subscriptionModel.providerId = n.getStringValue(); },
        "recurrency": n => { subscriptionModel.recurrency = n.getEnumValue<SubscriptionModel_recurrency>(SubscriptionModel_recurrencyObject); },
        "service_users": n => { subscriptionModel.serviceUsers = n.getCollectionOfPrimitiveValues<string>(); },
        "start_date": n => { subscriptionModel.startDate = n.getDateValue(); },
        "updated_at": n => { subscriptionModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param SubscriptionPayerModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionPayerModel(subscriptionPayerModel: Partial<SubscriptionPayerModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "etag": n => { subscriptionPayerModel.etag = n.getStringValue(); },
        "family_id": n => { subscriptionPayerModel.familyId = n.getStringValue(); },
        "memberId": n => { subscriptionPayerModel.memberId = n.getStringValue(); },
        "type": n => { subscriptionPayerModel.type = n.getEnumValue<SubscriptionPayerModel_type>(SubscriptionPayerModel_typeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param SubscriptionSummaryResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionSummaryResponse(subscriptionSummaryResponse: Partial<SubscriptionSummaryResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "active": n => { subscriptionSummaryResponse.active = n.getNumberValue(); },
        "top_labels": n => { subscriptionSummaryResponse.topLabels = n.getCollectionOfObjectValues<SubscriptionSummaryTopLabelResponse>(createSubscriptionSummaryTopLabelResponseFromDiscriminatorValue); },
        "top_providers": n => { subscriptionSummaryResponse.topProviders = n.getCollectionOfObjectValues<SubscriptionSummaryTopProviderResponse>(createSubscriptionSummaryTopProviderResponseFromDiscriminatorValue); },
        "total_last_month": n => { subscriptionSummaryResponse.totalLastMonth = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "total_last_year": n => { subscriptionSummaryResponse.totalLastYear = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "total_monthly": n => { subscriptionSummaryResponse.totalMonthly = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "total_yearly": n => { subscriptionSummaryResponse.totalYearly = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "upcoming_renewals": n => { subscriptionSummaryResponse.upcomingRenewals = n.getCollectionOfObjectValues<SubscriptionSummaryUpcomingRenewalResponse>(createSubscriptionSummaryUpcomingRenewalResponseFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param SubscriptionSummaryTopLabelResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionSummaryTopLabelResponse(subscriptionSummaryTopLabelResponse: Partial<SubscriptionSummaryTopLabelResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "label_id": n => { subscriptionSummaryTopLabelResponse.labelId = n.getStringValue(); },
        "total": n => { subscriptionSummaryTopLabelResponse.total = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param SubscriptionSummaryTopProviderResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionSummaryTopProviderResponse(subscriptionSummaryTopProviderResponse: Partial<SubscriptionSummaryTopProviderResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "duration": n => { subscriptionSummaryTopProviderResponse.duration = n.getStringValue(); },
        "provider_id": n => { subscriptionSummaryTopProviderResponse.providerId = n.getStringValue(); },
        "total": n => { subscriptionSummaryTopProviderResponse.total = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param SubscriptionSummaryUpcomingRenewalResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionSummaryUpcomingRenewalResponse(subscriptionSummaryUpcomingRenewalResponse: Partial<SubscriptionSummaryUpcomingRenewalResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "at": n => { subscriptionSummaryUpcomingRenewalResponse.at = n.getDateValue(); },
        "provider_id": n => { subscriptionSummaryUpcomingRenewalResponse.providerId = n.getStringValue(); },
        "source": n => { subscriptionSummaryUpcomingRenewalResponse.source = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "total": n => { subscriptionSummaryUpcomingRenewalResponse.total = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param UpdateFamilyMemberModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateFamilyMemberModel(updateFamilyMemberModel: Partial<UpdateFamilyMemberModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { updateFamilyMemberModel.name = n.getStringValue(); },
        "type": n => { updateFamilyMemberModel.type = n.getEnumValue<UpdateFamilyMemberModel_type>(UpdateFamilyMemberModel_typeObject); },
        "updated_at": n => { updateFamilyMemberModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param UpdateFamilyModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateFamilyModel(updateFamilyModel: Partial<UpdateFamilyModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { updateFamilyModel.name = n.getStringValue(); },
        "updated_at": n => { updateFamilyModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param UpdateLabelModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateLabelModel(updateLabelModel: Partial<UpdateLabelModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "color": n => { updateLabelModel.color = n.getStringValue(); },
        "name": n => { updateLabelModel.name = n.getStringValue(); },
        "updated_at": n => { updateLabelModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param UpdatePlanModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdatePlanModel(updatePlanModel: Partial<UpdatePlanModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { updatePlanModel.description = n.getStringValue(); },
        "name": n => { updatePlanModel.name = n.getStringValue(); },
        "updateAt": n => { updatePlanModel.updateAt = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param UpdatePreferredCurrencyModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdatePreferredCurrencyModel(updatePreferredCurrencyModel: Partial<UpdatePreferredCurrencyModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "currency": n => { updatePreferredCurrencyModel.currency = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param UpdatePriceModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdatePriceModel(updatePriceModel: Partial<UpdatePriceModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { updatePriceModel.amount = n.getNumberValue(); },
        "created_at": n => { updatePriceModel.createdAt = n.getDateValue(); },
        "currency": n => { updatePriceModel.currency = n.getStringValue(); },
        "end_date": n => { updatePriceModel.endDate = n.getDateValue(); },
        "start_date": n => { updatePriceModel.startDate = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param UpdateProfileModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateProfileModel(updateProfileModel: Partial<UpdateProfileModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "family_name": n => { updateProfileModel.familyName = n.getStringValue(); },
        "given_name": n => { updateProfileModel.givenName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param UpdateProviderModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateProviderModel(updateProviderModel: Partial<UpdateProviderModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { updateProviderModel.description = n.getStringValue(); },
        "icon_url": n => { updateProviderModel.iconUrl = n.getStringValue(); },
        "labels": n => { updateProviderModel.labels = n.getCollectionOfPrimitiveValues<string>(); },
        "name": n => { updateProviderModel.name = n.getStringValue(); },
        "pricing_page_url": n => { updateProviderModel.pricingPageUrl = n.getStringValue(); },
        "updated_at": n => { updateProviderModel.updatedAt = n.getDateValue(); },
        "url": n => { updateProviderModel.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param UpdateSubscriptionModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateSubscriptionModel(updateSubscriptionModel: Partial<UpdateSubscriptionModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "custom_price": n => { updateSubscriptionModel.customPrice = n.getObjectValue<AmountModel>(createAmountModelFromDiscriminatorValue); },
        "custom_recurrency": n => { updateSubscriptionModel.customRecurrency = n.getNumberValue(); },
        "end_date": n => { updateSubscriptionModel.endDate = n.getDateValue(); },
        "free_trial": n => { updateSubscriptionModel.freeTrial = n.getObjectValue<SubscriptionFreeTrialModel>(createSubscriptionFreeTrialModelFromDiscriminatorValue); },
        "friendly_name": n => { updateSubscriptionModel.friendlyName = n.getStringValue(); },
        "labels": n => { updateSubscriptionModel.labels = n.getCollectionOfPrimitiveValues<string>(); },
        "owner": n => { updateSubscriptionModel.owner = n.getObjectValue<EditableOwnerModel>(createEditableOwnerModelFromDiscriminatorValue); },
        "payer": n => { updateSubscriptionModel.payer = n.getObjectValue<EditableSubscriptionPayerModel>(createEditableSubscriptionPayerModelFromDiscriminatorValue); },
        "plan_id": n => { updateSubscriptionModel.planId = n.getStringValue(); },
        "price_id": n => { updateSubscriptionModel.priceId = n.getStringValue(); },
        "provider_id": n => { updateSubscriptionModel.providerId = n.getStringValue(); },
        "recurrency": n => { updateSubscriptionModel.recurrency = n.getStringValue(); },
        "service_users": n => { updateSubscriptionModel.serviceUsers = n.getCollectionOfPrimitiveValues<string>(); },
        "start_date": n => { updateSubscriptionModel.startDate = n.getDateValue(); },
        "updated_at": n => { updateSubscriptionModel.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param UserPreferredCurrencyModel The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserPreferredCurrencyModel(userPreferredCurrencyModel: Partial<UserPreferredCurrencyModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "currency": n => { userPreferredCurrencyModel.currency = n.getStringValue(); },
    }
}
export interface EditableOwnerModel extends AdditionalDataHolder, Parsable {
    /**
     * @Description Family ID when an ownership type is family (required for family ownership)
     */
    familyId?: string | null;
    /**
     * @Description Type of ownership (personal, family or system)
     */
    type?: EditableOwnerModel_type | null;
}
export type EditableOwnerModel_type = (typeof EditableOwnerModel_typeObject)[keyof typeof EditableOwnerModel_typeObject];
/**
 * Subscription payer object used for updating who pays for a subscription
 */
export interface EditableSubscriptionPayerModel extends AdditionalDataHolder, Parsable {
    /**
     * @Description ID of the family associated with this payer
     */
    familyId?: string | null;
    /**
     * @Description ID of the specific family member who pays (required when type is family_member)
     */
    memberId?: string | null;
    /**
     * @Description Type of payer (family or family member)
     */
    type?: EditableSubscriptionPayerModel_type | null;
}
export type EditableSubscriptionPayerModel_type = (typeof EditableSubscriptionPayerModel_typeObject)[keyof typeof EditableSubscriptionPayerModel_typeObject];
export interface FamilyInviteRequest extends AdditionalDataHolder, Parsable {
    /**
     * Email of the invited member
     */
    email?: string | null;
    /**
     * ID of the family member to be invited
     */
    familyMemberId?: string | null;
    /**
     * Name of the invited member
     */
    name?: string | null;
    /**
     * Type of the member (adult or kid)
     */
    type?: FamilyInviteRequest_type | null;
}
export type FamilyInviteRequest_type = (typeof FamilyInviteRequest_typeObject)[keyof typeof FamilyInviteRequest_typeObject];
export interface FamilyInviteResponse extends AdditionalDataHolder, Parsable {
    /**
     * The code property
     */
    code?: string | null;
    /**
     * The family_id property
     */
    familyId?: string | null;
    /**
     * The family_member_id property
     */
    familyMemberId?: string | null;
}
/**
 * Family member object containing member information
 */
export interface FamilyMemberModel extends AdditionalDataHolder, Parsable {
    /**
     * @Description Timestamp when the member was created
     */
    createdAt?: Date | null;
    /**
     * @Description Entity tag for optimistic concurrency control
     */
    etag?: string | null;
    /**
     * @Description ID of the family this member belongs to
     */
    familyId?: string | null;
    /**
     * @Description Indicates whether this member has an account with the service provider
     */
    hasAccount?: boolean | null;
    /**
     * @Description Unique identifier for the family member
     */
    id?: string | null;
    /**
     * @Description Indicates whether this member is the current authenticated user
     */
    isYou?: boolean | null;
    /**
     * @Description Name of the family member
     */
    name?: string | null;
    /**
     * @Description Whether this member is a child (affects permissions and features)
     */
    type?: FamilyMemberModel_type | null;
    /**
     * @Description Timestamp when the member was last updated
     */
    updatedAt?: Date | null;
}
export type FamilyMemberModel_type = (typeof FamilyMemberModel_typeObject)[keyof typeof FamilyMemberModel_typeObject];
/**
 * Family object containing family information and members
 */
export interface FamilyModel extends AdditionalDataHolder, Parsable {
    /**
     * @Description ISO 8601 timestamp indicating when the family was originally created
     */
    createdAt?: Date | null;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     */
    etag?: string | null;
    /**
     * @Description Unique identifier for the family (UUID format)
     */
    id?: string | null;
    /**
     * @Description Indicates whether the current authenticated user is the owner of this family
     */
    isOwner?: boolean | null;
    /**
     * @Description Complete list of all members belonging to this family
     */
    members?: FamilyMemberModel[] | null;
    /**
     * @Description Display name of the family
     */
    name?: string | null;
    /**
     * @Description ISO 8601 timestamp indicating when the family information was last modified
     */
    updatedAt?: Date | null;
}
export interface HttpErrorResponse extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * The message property
     */
    messageEscaped?: string | null;
}
/**
 * Label object used for categorizing and organizing subscriptions with customizable colors
 */
export interface LabelModel extends AdditionalDataHolder, Parsable {
    /**
     * @Description Hexadecimal color code for visual representation of the label
     */
    color?: string | null;
    /**
     * @Description ISO 8601 timestamp indicating when the label was originally created
     */
    createdAt?: Date | null;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     */
    etag?: string | null;
    /**
     * @Description Unique identifier for the label (UUID format)
     */
    id?: string | null;
    /**
     * The key property
     */
    key?: string | null;
    /**
     * @Description Display name of the label
     */
    name?: string | null;
    /**
     * @Description Ownership information specifying whether this subscription belongs to a user or family
     */
    owner?: OwnerModel | null;
    /**
     * @Description ISO 8601 timestamp indicating when the label was last modified
     */
    updatedAt?: Date | null;
}
export interface LabelRefModel extends AdditionalDataHolder, Parsable {
    /**
     * The label_id property
     */
    labelId?: string | null;
    /**
     * The source property
     */
    source?: LabelRefModel_source | null;
}
export type LabelRefModel_source = (typeof LabelRefModel_sourceObject)[keyof typeof LabelRefModel_sourceObject];
/**
 * @Description Ownership information specifying whether this subscription belongs to a user or family
 */
export interface OwnerModel extends AdditionalDataHolder, Parsable {
    /**
     * @Description Entity tag for optimistic concurrency control
     */
    etag?: string | null;
    /**
     * @Description Family ID when an ownership type is family (required for family ownership)
     */
    familyId?: string | null;
    /**
     * @Description Type of ownership (personal, family or system)
     */
    type?: OwnerModel_type | null;
    /**
     * @Description UserProfile ID when an ownership type is personal (required for personal ownership)
     */
    userId?: string | null;
}
export type OwnerModel_type = (typeof OwnerModel_typeObject)[keyof typeof OwnerModel_typeObject];
export interface PaginatedResponseModelEndpoints_labelModel extends AdditionalDataHolder, Parsable {
    /**
     * Data contains the list of items for the current page
     */
    data?: LabelModel[] | null;
    /**
     * Length represents the number of items in the current page
     */
    length?: number | null;
    /**
     * Total represents the total number of items available
     */
    total?: number | null;
}
export interface PaginatedResponseModelEndpoints_ProviderModel extends AdditionalDataHolder, Parsable {
    /**
     * Data contains the list of items for the current page
     */
    data?: ProviderModel[] | null;
    /**
     * Length represents the number of items in the current page
     */
    length?: number | null;
    /**
     * Total represents the total number of items available
     */
    total?: number | null;
}
export interface PaginatedResponseModelEndpoints_SubscriptionModel extends AdditionalDataHolder, Parsable {
    /**
     * Data contains the list of items for the current page
     */
    data?: SubscriptionModel[] | null;
    /**
     * Length represents the number of items in the current page
     */
    length?: number | null;
    /**
     * Total represents the total number of items available
     */
    total?: number | null;
}
/**
 * Model for updating family member details
 */
export interface PatchFamilyMemberModel extends AdditionalDataHolder, Parsable {
    /**
     * Optional member ID. If not provided, new member will be created
     */
    id?: string | null;
    /**
     * member's name
     */
    name?: string | null;
    /**
     * Indicates if the member is a kid
     */
    type?: PatchFamilyMemberModel_type | null;
    /**
     * Optional timestamp of the last update
     */
    updatedAt?: Date | null;
}
export type PatchFamilyMemberModel_type = (typeof PatchFamilyMemberModel_typeObject)[keyof typeof PatchFamilyMemberModel_typeObject];
/**
 * Model for updating family details
 */
export interface PatchFamilyModel extends AdditionalDataHolder, Parsable {
    /**
     * Family ID
     */
    id?: string | null;
    /**
     * List of family members
     */
    members?: PatchFamilyMemberModel[] | null;
    /**
     * Family name
     */
    name?: string | null;
    /**
     * Optional timestamp of the last update
     */
    updatedAt?: Date | null;
}
export interface PatchSubscriptionModel extends AdditionalDataHolder, Parsable {
    /**
     * The custom_price property
     */
    customPrice?: AmountModel | null;
    /**
     * The custom_recurrency property
     */
    customRecurrency?: number | null;
    /**
     * The end_date property
     */
    endDate?: Date | null;
    /**
     * @Description Number of free trial days remaining (null if no trial or trial expired)
     */
    freeTrial?: SubscriptionFreeTrialModel | null;
    /**
     * The friendly_name property
     */
    friendlyName?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The labels property
     */
    labels?: string[] | null;
    /**
     * The owner property
     */
    owner?: EditableOwnerModel | null;
    /**
     * Subscription payer object used for updating who pays for a subscription
     */
    payer?: EditableSubscriptionPayerModel | null;
    /**
     * The plan_id property
     */
    planId?: string | null;
    /**
     * The price_id property
     */
    priceId?: string | null;
    /**
     * The provider_id property
     */
    providerId?: string | null;
    /**
     * The recurrency property
     */
    recurrency?: string | null;
    /**
     * The service_users property
     */
    serviceUsers?: string[] | null;
    /**
     * The start_date property
     */
    startDate?: Date | null;
    /**
     * The updated_at property
     */
    updatedAt?: Date | null;
}
/**
 * Plan object defining a specific subscription tier with associated pricing options
 */
export interface PlanModel extends AdditionalDataHolder, Parsable {
    /**
     * @Description ISO 8601 timestamp when the plan was originally created
     */
    createdAt?: Date | null;
    /**
     * @Description Optional detailed description of the plan features and benefits
     */
    description?: string | null;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     */
    etag?: string | null;
    /**
     * @Description Unique identifier for the plan (UUID format)
     */
    id?: string | null;
    /**
     * @Description Display name of the subscription plan
     */
    name?: string | null;
    /**
     * @Description List of pricing options available for this plan (different currencies, time periods, etc.)
     */
    prices?: PriceModel[] | null;
    /**
     * @Description ISO 8601 timestamp when the plan was last modified
     */
    updatedAt?: Date | null;
}
/**
 * Price object defining the cost of a subscription plan with currency and time validity
 */
export interface PriceModel extends AdditionalDataHolder, Parsable {
    /**
     * @Description Price amount in the specified currency (supports decimal values)
     */
    amount?: number | null;
    /**
     * @Description ISO 8601 timestamp when the price was originally created
     */
    createdAt?: Date | null;
    /**
     * @Description ISO 4217 currency code for the price
     */
    currency?: string | null;
    /**
     * @Description ISO 8601 timestamp when this price expires (null means indefinite)
     */
    endDate?: Date | null;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     */
    etag?: string | null;
    /**
     * @Description Unique identifier for the price (UUID format)
     */
    id?: string | null;
    /**
     * @Description ISO 8601 timestamp when this price becomes effective
     */
    startDate?: Date | null;
    /**
     * @Description ISO 8601 timestamp when the price was last modified
     */
    updatedAt?: Date | null;
}
/**
 * Provider object containing information about a subscription service provider and their available plans
 */
export interface ProviderModel extends AdditionalDataHolder, Parsable {
    /**
     * @Description ISO 8601 timestamp when the provider was originally created
     */
    createdAt?: Date | null;
    /**
     * @Description Optional detailed description of the provider and their services
     */
    description?: string | null;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     */
    etag?: string | null;
    /**
     * @Description Optional URL to the provider's icon or logo image
     */
    iconUrl?: string | null;
    /**
     * @Description Unique identifier for the provider (UUID format)
     */
    id?: string | null;
    /**
     * The key property
     */
    key?: string | null;
    /**
     * @Description List of label IDs associated with this provider for categorization
     */
    labels?: string[] | null;
    /**
     * @Description Display name of the service provider
     */
    name?: string | null;
    /**
     * @Description Ownership information specifying whether this subscription belongs to a user or family
     */
    owner?: OwnerModel | null;
    /**
     * @Description List of subscription plans offered by this provider
     */
    plans?: PlanModel[] | null;
    /**
     * @Description Optional URL to the provider's pricing information page
     */
    pricingPageUrl?: string | null;
    /**
     * @Description ISO 8601 timestamp when the provider was last modified
     */
    updatedAt?: Date | null;
    /**
     * @Description Optional URL to the provider's main website
     */
    url?: string | null;
}
/**
 * Serializes information the current object
 * @param AmountModel The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAmountModel(writer: SerializationWriter, amountModel: Partial<AmountModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!amountModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("currency", amountModel.currency);
    writer.writeObjectValue<AmountModel>("source", amountModel.source, serializeAmountModel);
    writer.writeNumberValue("value", amountModel.value);
    writer.writeAdditionalData(amountModel.additionalData);
}
/**
 * Serializes information the current object
 * @param CreateFamilyMemberModel The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateFamilyMemberModel(writer: SerializationWriter, createFamilyMemberModel: Partial<CreateFamilyMemberModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!createFamilyMemberModel || isSerializingDerivedType) { return; }
    writer.writeDateValue("created_at", createFamilyMemberModel.createdAt);
    writer.writeStringValue("id", createFamilyMemberModel.id);
    writer.writeStringValue("name", createFamilyMemberModel.name);
    writer.writeEnumValue<CreateFamilyMemberModel_type>("type", createFamilyMemberModel.type);
    writer.writeAdditionalData(createFamilyMemberModel.additionalData);
}
/**
 * Serializes information the current object
 * @param CreateFamilyModel The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateFamilyModel(writer: SerializationWriter, createFamilyModel: Partial<CreateFamilyModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!createFamilyModel || isSerializingDerivedType) { return; }
    writer.writeDateValue("created_at", createFamilyModel.createdAt);
    writer.writeStringValue("creator_name", createFamilyModel.creatorName);
    writer.writeStringValue("id", createFamilyModel.id);
    writer.writeStringValue("name", createFamilyModel.name);
    writer.writeAdditionalData(createFamilyModel.additionalData);
}
/**
 * Serializes information the current object
 * @param CreateLabelModel The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateLabelModel(writer: SerializationWriter, createLabelModel: Partial<CreateLabelModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!createLabelModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("color", createLabelModel.color);
    writer.writeDateValue("created_at", createLabelModel.createdAt);
    writer.writeStringValue("id", createLabelModel.id);
    writer.writeStringValue("name", createLabelModel.name);
    writer.writeObjectValue<EditableOwnerModel>("owner", createLabelModel.owner, serializeEditableOwnerModel);
    writer.writeAdditionalData(createLabelModel.additionalData);
}
/**
 * Serializes information the current object
 * @param CreatePlanModel The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreatePlanModel(writer: SerializationWriter, createPlanModel: Partial<CreatePlanModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!createPlanModel || isSerializingDerivedType) { return; }
    writer.writeDateValue("created_at", createPlanModel.createdAt);
    writer.writeStringValue("description", createPlanModel.description);
    writer.writeStringValue("id", createPlanModel.id);
    writer.writeStringValue("name", createPlanModel.name);
    writer.writeAdditionalData(createPlanModel.additionalData);
}
/**
 * Serializes information the current object
 * @param CreatePriceModel The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreatePriceModel(writer: SerializationWriter, createPriceModel: Partial<CreatePriceModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!createPriceModel || isSerializingDerivedType) { return; }
    writer.writeNumberValue("amount", createPriceModel.amount);
    writer.writeDateValue("created_at", createPriceModel.createdAt);
    writer.writeStringValue("currency", createPriceModel.currency);
    writer.writeDateValue("end_date", createPriceModel.endDate);
    writer.writeStringValue("id", createPriceModel.id);
    writer.writeDateValue("start_date", createPriceModel.startDate);
    writer.writeAdditionalData(createPriceModel.additionalData);
}
/**
 * Serializes information the current object
 * @param CreateProviderModel The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateProviderModel(writer: SerializationWriter, createProviderModel: Partial<CreateProviderModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!createProviderModel || isSerializingDerivedType) { return; }
    writer.writeDateValue("created_at", createProviderModel.createdAt);
    writer.writeStringValue("description", createProviderModel.description);
    writer.writeStringValue("icon_url", createProviderModel.iconUrl);
    writer.writeStringValue("id", createProviderModel.id);
    writer.writeCollectionOfPrimitiveValues<string>("labels", createProviderModel.labels);
    writer.writeStringValue("name", createProviderModel.name);
    writer.writeObjectValue<EditableOwnerModel>("owner", createProviderModel.owner, serializeEditableOwnerModel);
    writer.writeStringValue("pricing_page_url", createProviderModel.pricingPageUrl);
    writer.writeStringValue("url", createProviderModel.url);
    writer.writeAdditionalData(createProviderModel.additionalData);
}
/**
 * Serializes information the current object
 * @param CreateSubscriptionModel The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateSubscriptionModel(writer: SerializationWriter, createSubscriptionModel: Partial<CreateSubscriptionModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!createSubscriptionModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("created_at", createSubscriptionModel.createdAt);
    writer.writeObjectValue<AmountModel>("custom_price", createSubscriptionModel.customPrice, serializeAmountModel);
    writer.writeNumberValue("custom_recurrency", createSubscriptionModel.customRecurrency);
    writer.writeDateValue("end_date", createSubscriptionModel.endDate);
    writer.writeObjectValue<SubscriptionFreeTrialModel>("free_trial", createSubscriptionModel.freeTrial, serializeSubscriptionFreeTrialModel);
    writer.writeStringValue("friendly_name", createSubscriptionModel.friendlyName);
    writer.writeStringValue("id", createSubscriptionModel.id);
    writer.writeCollectionOfPrimitiveValues<string>("labels", createSubscriptionModel.labels);
    writer.writeObjectValue<EditableOwnerModel>("owner", createSubscriptionModel.owner, serializeEditableOwnerModel);
    writer.writeObjectValue<EditableSubscriptionPayerModel>("payer", createSubscriptionModel.payer, serializeEditableSubscriptionPayerModel);
    writer.writeStringValue("plan_id", createSubscriptionModel.planId);
    writer.writeStringValue("price_id", createSubscriptionModel.priceId);
    writer.writeStringValue("provider_id", createSubscriptionModel.providerId);
    writer.writeStringValue("recurrency", createSubscriptionModel.recurrency);
    writer.writeCollectionOfPrimitiveValues<string>("service_users", createSubscriptionModel.serviceUsers);
    writer.writeDateValue("start_date", createSubscriptionModel.startDate);
    writer.writeAdditionalData(createSubscriptionModel.additionalData);
}
/**
 * Serializes information the current object
 * @param CurrencyRateModel The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCurrencyRateModel(writer: SerializationWriter, currencyRateModel: Partial<CurrencyRateModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!currencyRateModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("currency", currencyRateModel.currency);
    writer.writeNumberValue("rate", currencyRateModel.rate);
    writer.writeAdditionalData(currencyRateModel.additionalData);
}
/**
 * Serializes information the current object
 * @param CurrencyRatesModel The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCurrencyRatesModel(writer: SerializationWriter, currencyRatesModel: Partial<CurrencyRatesModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!currencyRatesModel || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<CurrencyRateModel>("rates", currencyRatesModel.rates, serializeCurrencyRateModel);
    writer.writeDateValue("timestamp", currencyRatesModel.timestamp);
    writer.writeAdditionalData(currencyRatesModel.additionalData);
}
/**
 * Serializes information the current object
 * @param EditableOwnerModel The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEditableOwnerModel(writer: SerializationWriter, editableOwnerModel: Partial<EditableOwnerModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!editableOwnerModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("family_id", editableOwnerModel.familyId);
    writer.writeEnumValue<EditableOwnerModel_type>("type", editableOwnerModel.type);
    writer.writeAdditionalData(editableOwnerModel.additionalData);
}
/**
 * Serializes information the current object
 * @param EditableSubscriptionPayerModel The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEditableSubscriptionPayerModel(writer: SerializationWriter, editableSubscriptionPayerModel: Partial<EditableSubscriptionPayerModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!editableSubscriptionPayerModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("family_id", editableSubscriptionPayerModel.familyId);
    writer.writeStringValue("memberId", editableSubscriptionPayerModel.memberId);
    writer.writeEnumValue<EditableSubscriptionPayerModel_type>("type", editableSubscriptionPayerModel.type);
    writer.writeAdditionalData(editableSubscriptionPayerModel.additionalData);
}
/**
 * Serializes information the current object
 * @param FamilyInviteRequest The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFamilyInviteRequest(writer: SerializationWriter, familyInviteRequest: Partial<FamilyInviteRequest> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!familyInviteRequest || isSerializingDerivedType) { return; }
    writer.writeStringValue("email", familyInviteRequest.email);
    writer.writeStringValue("family_member_id", familyInviteRequest.familyMemberId);
    writer.writeStringValue("name", familyInviteRequest.name);
    writer.writeEnumValue<FamilyInviteRequest_type>("type", familyInviteRequest.type);
    writer.writeAdditionalData(familyInviteRequest.additionalData);
}
/**
 * Serializes information the current object
 * @param FamilyInviteResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFamilyInviteResponse(writer: SerializationWriter, familyInviteResponse: Partial<FamilyInviteResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!familyInviteResponse || isSerializingDerivedType) { return; }
    writer.writeStringValue("code", familyInviteResponse.code);
    writer.writeStringValue("family_id", familyInviteResponse.familyId);
    writer.writeStringValue("family_member_id", familyInviteResponse.familyMemberId);
    writer.writeAdditionalData(familyInviteResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param FamilyMemberModel The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFamilyMemberModel(writer: SerializationWriter, familyMemberModel: Partial<FamilyMemberModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!familyMemberModel || isSerializingDerivedType) { return; }
    writer.writeDateValue("created_at", familyMemberModel.createdAt);
    writer.writeStringValue("etag", familyMemberModel.etag);
    writer.writeStringValue("family_id", familyMemberModel.familyId);
    writer.writeBooleanValue("has_account", familyMemberModel.hasAccount);
    writer.writeStringValue("id", familyMemberModel.id);
    writer.writeBooleanValue("is_you", familyMemberModel.isYou);
    writer.writeStringValue("name", familyMemberModel.name);
    writer.writeEnumValue<FamilyMemberModel_type>("type", familyMemberModel.type);
    writer.writeDateValue("updated_at", familyMemberModel.updatedAt);
    writer.writeAdditionalData(familyMemberModel.additionalData);
}
/**
 * Serializes information the current object
 * @param FamilyModel The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFamilyModel(writer: SerializationWriter, familyModel: Partial<FamilyModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!familyModel || isSerializingDerivedType) { return; }
    writer.writeDateValue("created_at", familyModel.createdAt);
    writer.writeStringValue("etag", familyModel.etag);
    writer.writeStringValue("id", familyModel.id);
    writer.writeBooleanValue("is_owner", familyModel.isOwner);
    writer.writeCollectionOfObjectValues<FamilyMemberModel>("members", familyModel.members, serializeFamilyMemberModel);
    writer.writeStringValue("name", familyModel.name);
    writer.writeDateValue("updated_at", familyModel.updatedAt);
    writer.writeAdditionalData(familyModel.additionalData);
}
/**
 * Serializes information the current object
 * @param HttpErrorResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHttpErrorResponse(writer: SerializationWriter, httpErrorResponse: Partial<HttpErrorResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!httpErrorResponse || isSerializingDerivedType) { return; }
    writer.writeStringValue("message", httpErrorResponse.messageEscaped);
    writer.writeAdditionalData(httpErrorResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param LabelModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLabelModel(writer: SerializationWriter, labelModel: Partial<LabelModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!labelModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("color", labelModel.color);
    writer.writeDateValue("created_at", labelModel.createdAt);
    writer.writeStringValue("etag", labelModel.etag);
    writer.writeStringValue("id", labelModel.id);
    writer.writeStringValue("key", labelModel.key);
    writer.writeStringValue("name", labelModel.name);
    writer.writeObjectValue<OwnerModel>("owner", labelModel.owner, serializeOwnerModel);
    writer.writeDateValue("updated_at", labelModel.updatedAt);
    writer.writeAdditionalData(labelModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param LabelRefModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLabelRefModel(writer: SerializationWriter, labelRefModel: Partial<LabelRefModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!labelRefModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("label_id", labelRefModel.labelId);
    writer.writeEnumValue<LabelRefModel_source>("source", labelRefModel.source);
    writer.writeAdditionalData(labelRefModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param OwnerModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOwnerModel(writer: SerializationWriter, ownerModel: Partial<OwnerModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!ownerModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("etag", ownerModel.etag);
    writer.writeStringValue("family_id", ownerModel.familyId);
    writer.writeEnumValue<OwnerModel_type>("type", ownerModel.type);
    writer.writeStringValue("userId", ownerModel.userId);
    writer.writeAdditionalData(ownerModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param PaginatedResponseModelEndpoints_labelModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePaginatedResponseModelEndpoints_labelModel(writer: SerializationWriter, paginatedResponseModelEndpoints_labelModel: Partial<PaginatedResponseModelEndpoints_labelModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!paginatedResponseModelEndpoints_labelModel || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<LabelModel>("data", paginatedResponseModelEndpoints_labelModel.data, serializeLabelModel);
    writer.writeNumberValue("length", paginatedResponseModelEndpoints_labelModel.length);
    writer.writeNumberValue("total", paginatedResponseModelEndpoints_labelModel.total);
    writer.writeAdditionalData(paginatedResponseModelEndpoints_labelModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param PaginatedResponseModelEndpoints_ProviderModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePaginatedResponseModelEndpoints_ProviderModel(writer: SerializationWriter, paginatedResponseModelEndpoints_ProviderModel: Partial<PaginatedResponseModelEndpoints_ProviderModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!paginatedResponseModelEndpoints_ProviderModel || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<ProviderModel>("data", paginatedResponseModelEndpoints_ProviderModel.data, serializeProviderModel);
    writer.writeNumberValue("length", paginatedResponseModelEndpoints_ProviderModel.length);
    writer.writeNumberValue("total", paginatedResponseModelEndpoints_ProviderModel.total);
    writer.writeAdditionalData(paginatedResponseModelEndpoints_ProviderModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param PaginatedResponseModelEndpoints_SubscriptionModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePaginatedResponseModelEndpoints_SubscriptionModel(writer: SerializationWriter, paginatedResponseModelEndpoints_SubscriptionModel: Partial<PaginatedResponseModelEndpoints_SubscriptionModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!paginatedResponseModelEndpoints_SubscriptionModel || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<SubscriptionModel>("data", paginatedResponseModelEndpoints_SubscriptionModel.data, serializeSubscriptionModel);
    writer.writeNumberValue("length", paginatedResponseModelEndpoints_SubscriptionModel.length);
    writer.writeNumberValue("total", paginatedResponseModelEndpoints_SubscriptionModel.total);
    writer.writeAdditionalData(paginatedResponseModelEndpoints_SubscriptionModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param PatchFamilyMemberModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePatchFamilyMemberModel(writer: SerializationWriter, patchFamilyMemberModel: Partial<PatchFamilyMemberModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!patchFamilyMemberModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("id", patchFamilyMemberModel.id);
    writer.writeStringValue("name", patchFamilyMemberModel.name);
    writer.writeEnumValue<PatchFamilyMemberModel_type>("type", patchFamilyMemberModel.type);
    writer.writeDateValue("updated_at", patchFamilyMemberModel.updatedAt);
    writer.writeAdditionalData(patchFamilyMemberModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param PatchFamilyModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePatchFamilyModel(writer: SerializationWriter, patchFamilyModel: Partial<PatchFamilyModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!patchFamilyModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("id", patchFamilyModel.id);
    writer.writeCollectionOfObjectValues<PatchFamilyMemberModel>("members", patchFamilyModel.members, serializePatchFamilyMemberModel);
    writer.writeStringValue("name", patchFamilyModel.name);
    writer.writeDateValue("updated_at", patchFamilyModel.updatedAt);
    writer.writeAdditionalData(patchFamilyModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param PatchSubscriptionModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePatchSubscriptionModel(writer: SerializationWriter, patchSubscriptionModel: Partial<PatchSubscriptionModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!patchSubscriptionModel || isSerializingDerivedType) { return; }
    writer.writeObjectValue<AmountModel>("custom_price", patchSubscriptionModel.customPrice, serializeAmountModel);
    writer.writeNumberValue("custom_recurrency", patchSubscriptionModel.customRecurrency);
    writer.writeDateValue("end_date", patchSubscriptionModel.endDate);
    writer.writeObjectValue<SubscriptionFreeTrialModel>("free_trial", patchSubscriptionModel.freeTrial, serializeSubscriptionFreeTrialModel);
    writer.writeStringValue("friendly_name", patchSubscriptionModel.friendlyName);
    writer.writeStringValue("id", patchSubscriptionModel.id);
    writer.writeCollectionOfPrimitiveValues<string>("labels", patchSubscriptionModel.labels);
    writer.writeObjectValue<EditableOwnerModel>("owner", patchSubscriptionModel.owner, serializeEditableOwnerModel);
    writer.writeObjectValue<EditableSubscriptionPayerModel>("payer", patchSubscriptionModel.payer, serializeEditableSubscriptionPayerModel);
    writer.writeStringValue("plan_id", patchSubscriptionModel.planId);
    writer.writeStringValue("price_id", patchSubscriptionModel.priceId);
    writer.writeStringValue("provider_id", patchSubscriptionModel.providerId);
    writer.writeStringValue("recurrency", patchSubscriptionModel.recurrency);
    writer.writeCollectionOfPrimitiveValues<string>("service_users", patchSubscriptionModel.serviceUsers);
    writer.writeDateValue("start_date", patchSubscriptionModel.startDate);
    writer.writeDateValue("updated_at", patchSubscriptionModel.updatedAt);
    writer.writeAdditionalData(patchSubscriptionModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param PlanModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePlanModel(writer: SerializationWriter, planModel: Partial<PlanModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!planModel || isSerializingDerivedType) { return; }
    writer.writeDateValue("created_at", planModel.createdAt);
    writer.writeStringValue("description", planModel.description);
    writer.writeStringValue("etag", planModel.etag);
    writer.writeStringValue("id", planModel.id);
    writer.writeStringValue("name", planModel.name);
    writer.writeCollectionOfObjectValues<PriceModel>("prices", planModel.prices, serializePriceModel);
    writer.writeDateValue("updated_at", planModel.updatedAt);
    writer.writeAdditionalData(planModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param PriceModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePriceModel(writer: SerializationWriter, priceModel: Partial<PriceModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!priceModel || isSerializingDerivedType) { return; }
    writer.writeNumberValue("amount", priceModel.amount);
    writer.writeDateValue("created_at", priceModel.createdAt);
    writer.writeStringValue("currency", priceModel.currency);
    writer.writeDateValue("end_date", priceModel.endDate);
    writer.writeStringValue("etag", priceModel.etag);
    writer.writeStringValue("id", priceModel.id);
    writer.writeDateValue("start_date", priceModel.startDate);
    writer.writeDateValue("updated_at", priceModel.updatedAt);
    writer.writeAdditionalData(priceModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProviderModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProviderModel(writer: SerializationWriter, providerModel: Partial<ProviderModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!providerModel || isSerializingDerivedType) { return; }
    writer.writeDateValue("created_at", providerModel.createdAt);
    writer.writeStringValue("description", providerModel.description);
    writer.writeStringValue("etag", providerModel.etag);
    writer.writeStringValue("icon_url", providerModel.iconUrl);
    writer.writeStringValue("id", providerModel.id);
    writer.writeStringValue("key", providerModel.key);
    writer.writeCollectionOfPrimitiveValues<string>("labels", providerModel.labels);
    writer.writeStringValue("name", providerModel.name);
    writer.writeObjectValue<OwnerModel>("owner", providerModel.owner, serializeOwnerModel);
    writer.writeCollectionOfObjectValues<PlanModel>("plans", providerModel.plans, serializePlanModel);
    writer.writeStringValue("pricing_page_url", providerModel.pricingPageUrl);
    writer.writeDateValue("updated_at", providerModel.updatedAt);
    writer.writeStringValue("url", providerModel.url);
    writer.writeAdditionalData(providerModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SubscriptionFreeTrialModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionFreeTrialModel(writer: SerializationWriter, subscriptionFreeTrialModel: Partial<SubscriptionFreeTrialModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!subscriptionFreeTrialModel || isSerializingDerivedType) { return; }
    writer.writeDateValue("end_date", subscriptionFreeTrialModel.endDate);
    writer.writeDateValue("start_date", subscriptionFreeTrialModel.startDate);
    writer.writeAdditionalData(subscriptionFreeTrialModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SubscriptionModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionModel(writer: SerializationWriter, subscriptionModel: Partial<SubscriptionModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!subscriptionModel || isSerializingDerivedType) { return; }
    writer.writeDateValue("created_at", subscriptionModel.createdAt);
    writer.writeObjectValue<AmountModel>("custom_price", subscriptionModel.customPrice, serializeAmountModel);
    writer.writeNumberValue("custom_recurrency", subscriptionModel.customRecurrency);
    writer.writeDateValue("end_date", subscriptionModel.endDate);
    writer.writeStringValue("etag", subscriptionModel.etag);
    writer.writeObjectValue<SubscriptionFreeTrialModel>("free_trial", subscriptionModel.freeTrial, serializeSubscriptionFreeTrialModel);
    writer.writeStringValue("friendly_name", subscriptionModel.friendlyName);
    writer.writeStringValue("id", subscriptionModel.id);
    writer.writeBooleanValue("is_active", subscriptionModel.isActive);
    writer.writeCollectionOfObjectValues<LabelRefModel>("label_refs", subscriptionModel.labelRefs, serializeLabelRefModel);
    writer.writeObjectValue<OwnerModel>("owner", subscriptionModel.owner, serializeOwnerModel);
    writer.writeObjectValue<SubscriptionPayerModel>("payer", subscriptionModel.payer, serializeSubscriptionPayerModel);
    writer.writeStringValue("plan_id", subscriptionModel.planId);
    writer.writeStringValue("price_id", subscriptionModel.priceId);
    writer.writeStringValue("provider_id", subscriptionModel.providerId);
    writer.writeEnumValue<SubscriptionModel_recurrency>("recurrency", subscriptionModel.recurrency);
    writer.writeCollectionOfPrimitiveValues<string>("service_users", subscriptionModel.serviceUsers);
    writer.writeDateValue("start_date", subscriptionModel.startDate);
    writer.writeDateValue("updated_at", subscriptionModel.updatedAt);
    writer.writeAdditionalData(subscriptionModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SubscriptionPayerModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionPayerModel(writer: SerializationWriter, subscriptionPayerModel: Partial<SubscriptionPayerModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!subscriptionPayerModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("etag", subscriptionPayerModel.etag);
    writer.writeStringValue("family_id", subscriptionPayerModel.familyId);
    writer.writeStringValue("memberId", subscriptionPayerModel.memberId);
    writer.writeEnumValue<SubscriptionPayerModel_type>("type", subscriptionPayerModel.type);
    writer.writeAdditionalData(subscriptionPayerModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SubscriptionSummaryResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionSummaryResponse(writer: SerializationWriter, subscriptionSummaryResponse: Partial<SubscriptionSummaryResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!subscriptionSummaryResponse || isSerializingDerivedType) { return; }
    writer.writeNumberValue("active", subscriptionSummaryResponse.active);
    writer.writeCollectionOfObjectValues<SubscriptionSummaryTopLabelResponse>("top_labels", subscriptionSummaryResponse.topLabels, serializeSubscriptionSummaryTopLabelResponse);
    writer.writeCollectionOfObjectValues<SubscriptionSummaryTopProviderResponse>("top_providers", subscriptionSummaryResponse.topProviders, serializeSubscriptionSummaryTopProviderResponse);
    writer.writeObjectValue<AmountModel>("total_last_month", subscriptionSummaryResponse.totalLastMonth, serializeAmountModel);
    writer.writeObjectValue<AmountModel>("total_last_year", subscriptionSummaryResponse.totalLastYear, serializeAmountModel);
    writer.writeObjectValue<AmountModel>("total_monthly", subscriptionSummaryResponse.totalMonthly, serializeAmountModel);
    writer.writeObjectValue<AmountModel>("total_yearly", subscriptionSummaryResponse.totalYearly, serializeAmountModel);
    writer.writeCollectionOfObjectValues<SubscriptionSummaryUpcomingRenewalResponse>("upcoming_renewals", subscriptionSummaryResponse.upcomingRenewals, serializeSubscriptionSummaryUpcomingRenewalResponse);
    writer.writeAdditionalData(subscriptionSummaryResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SubscriptionSummaryTopLabelResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionSummaryTopLabelResponse(writer: SerializationWriter, subscriptionSummaryTopLabelResponse: Partial<SubscriptionSummaryTopLabelResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!subscriptionSummaryTopLabelResponse || isSerializingDerivedType) { return; }
    writer.writeStringValue("label_id", subscriptionSummaryTopLabelResponse.labelId);
    writer.writeObjectValue<AmountModel>("total", subscriptionSummaryTopLabelResponse.total, serializeAmountModel);
    writer.writeAdditionalData(subscriptionSummaryTopLabelResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SubscriptionSummaryTopProviderResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionSummaryTopProviderResponse(writer: SerializationWriter, subscriptionSummaryTopProviderResponse: Partial<SubscriptionSummaryTopProviderResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!subscriptionSummaryTopProviderResponse || isSerializingDerivedType) { return; }
    writer.writeStringValue("duration", subscriptionSummaryTopProviderResponse.duration);
    writer.writeStringValue("provider_id", subscriptionSummaryTopProviderResponse.providerId);
    writer.writeObjectValue<AmountModel>("total", subscriptionSummaryTopProviderResponse.total, serializeAmountModel);
    writer.writeAdditionalData(subscriptionSummaryTopProviderResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SubscriptionSummaryUpcomingRenewalResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionSummaryUpcomingRenewalResponse(writer: SerializationWriter, subscriptionSummaryUpcomingRenewalResponse: Partial<SubscriptionSummaryUpcomingRenewalResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!subscriptionSummaryUpcomingRenewalResponse || isSerializingDerivedType) { return; }
    writer.writeDateValue("at", subscriptionSummaryUpcomingRenewalResponse.at);
    writer.writeStringValue("provider_id", subscriptionSummaryUpcomingRenewalResponse.providerId);
    writer.writeObjectValue<AmountModel>("source", subscriptionSummaryUpcomingRenewalResponse.source, serializeAmountModel);
    writer.writeObjectValue<AmountModel>("total", subscriptionSummaryUpcomingRenewalResponse.total, serializeAmountModel);
    writer.writeAdditionalData(subscriptionSummaryUpcomingRenewalResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UpdateFamilyMemberModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateFamilyMemberModel(writer: SerializationWriter, updateFamilyMemberModel: Partial<UpdateFamilyMemberModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!updateFamilyMemberModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("name", updateFamilyMemberModel.name);
    writer.writeEnumValue<UpdateFamilyMemberModel_type>("type", updateFamilyMemberModel.type);
    writer.writeDateValue("updated_at", updateFamilyMemberModel.updatedAt);
    writer.writeAdditionalData(updateFamilyMemberModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UpdateFamilyModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateFamilyModel(writer: SerializationWriter, updateFamilyModel: Partial<UpdateFamilyModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!updateFamilyModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("name", updateFamilyModel.name);
    writer.writeDateValue("updated_at", updateFamilyModel.updatedAt);
    writer.writeAdditionalData(updateFamilyModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UpdateLabelModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateLabelModel(writer: SerializationWriter, updateLabelModel: Partial<UpdateLabelModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!updateLabelModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("color", updateLabelModel.color);
    writer.writeStringValue("name", updateLabelModel.name);
    writer.writeDateValue("updated_at", updateLabelModel.updatedAt);
    writer.writeAdditionalData(updateLabelModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UpdatePlanModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdatePlanModel(writer: SerializationWriter, updatePlanModel: Partial<UpdatePlanModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!updatePlanModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("description", updatePlanModel.description);
    writer.writeStringValue("name", updatePlanModel.name);
    writer.writeStringValue("updateAt", updatePlanModel.updateAt);
    writer.writeAdditionalData(updatePlanModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UpdatePreferredCurrencyModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdatePreferredCurrencyModel(writer: SerializationWriter, updatePreferredCurrencyModel: Partial<UpdatePreferredCurrencyModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!updatePreferredCurrencyModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("currency", updatePreferredCurrencyModel.currency);
    writer.writeAdditionalData(updatePreferredCurrencyModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UpdatePriceModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdatePriceModel(writer: SerializationWriter, updatePriceModel: Partial<UpdatePriceModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!updatePriceModel || isSerializingDerivedType) { return; }
    writer.writeNumberValue("amount", updatePriceModel.amount);
    writer.writeDateValue("created_at", updatePriceModel.createdAt);
    writer.writeStringValue("currency", updatePriceModel.currency);
    writer.writeDateValue("end_date", updatePriceModel.endDate);
    writer.writeDateValue("start_date", updatePriceModel.startDate);
    writer.writeAdditionalData(updatePriceModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UpdateProfileModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateProfileModel(writer: SerializationWriter, updateProfileModel: Partial<UpdateProfileModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!updateProfileModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("family_name", updateProfileModel.familyName);
    writer.writeStringValue("given_name", updateProfileModel.givenName);
    writer.writeAdditionalData(updateProfileModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UpdateProviderModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateProviderModel(writer: SerializationWriter, updateProviderModel: Partial<UpdateProviderModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!updateProviderModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("description", updateProviderModel.description);
    writer.writeStringValue("icon_url", updateProviderModel.iconUrl);
    writer.writeCollectionOfPrimitiveValues<string>("labels", updateProviderModel.labels);
    writer.writeStringValue("name", updateProviderModel.name);
    writer.writeStringValue("pricing_page_url", updateProviderModel.pricingPageUrl);
    writer.writeDateValue("updated_at", updateProviderModel.updatedAt);
    writer.writeStringValue("url", updateProviderModel.url);
    writer.writeAdditionalData(updateProviderModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UpdateSubscriptionModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateSubscriptionModel(writer: SerializationWriter, updateSubscriptionModel: Partial<UpdateSubscriptionModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!updateSubscriptionModel || isSerializingDerivedType) { return; }
    writer.writeObjectValue<AmountModel>("custom_price", updateSubscriptionModel.customPrice, serializeAmountModel);
    writer.writeNumberValue("custom_recurrency", updateSubscriptionModel.customRecurrency);
    writer.writeDateValue("end_date", updateSubscriptionModel.endDate);
    writer.writeObjectValue<SubscriptionFreeTrialModel>("free_trial", updateSubscriptionModel.freeTrial, serializeSubscriptionFreeTrialModel);
    writer.writeStringValue("friendly_name", updateSubscriptionModel.friendlyName);
    writer.writeCollectionOfPrimitiveValues<string>("labels", updateSubscriptionModel.labels);
    writer.writeObjectValue<EditableOwnerModel>("owner", updateSubscriptionModel.owner, serializeEditableOwnerModel);
    writer.writeObjectValue<EditableSubscriptionPayerModel>("payer", updateSubscriptionModel.payer, serializeEditableSubscriptionPayerModel);
    writer.writeStringValue("plan_id", updateSubscriptionModel.planId);
    writer.writeStringValue("price_id", updateSubscriptionModel.priceId);
    writer.writeStringValue("provider_id", updateSubscriptionModel.providerId);
    writer.writeStringValue("recurrency", updateSubscriptionModel.recurrency);
    writer.writeCollectionOfPrimitiveValues<string>("service_users", updateSubscriptionModel.serviceUsers);
    writer.writeDateValue("start_date", updateSubscriptionModel.startDate);
    writer.writeDateValue("updated_at", updateSubscriptionModel.updatedAt);
    writer.writeAdditionalData(updateSubscriptionModel.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UserPreferredCurrencyModel The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserPreferredCurrencyModel(writer: SerializationWriter, userPreferredCurrencyModel: Partial<UserPreferredCurrencyModel> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!userPreferredCurrencyModel || isSerializingDerivedType) { return; }
    writer.writeStringValue("currency", userPreferredCurrencyModel.currency);
    writer.writeAdditionalData(userPreferredCurrencyModel.additionalData);
}
/**
 * @Description Number of free trial days remaining (null if no trial or trial expired)
 */
export interface SubscriptionFreeTrialModel extends AdditionalDataHolder, Parsable {
    /**
     * The end_date property
     */
    endDate?: Date | null;
    /**
     * The start_date property
     */
    startDate?: Date | null;
}
/**
 * Subscription object containing all information about an active subscription including billing and usage details
 */
export interface SubscriptionModel extends AdditionalDataHolder, Parsable {
    /**
     * @Description ISO 8601 timestamp when the subscription was originally created
     */
    createdAt?: Date | null;
    /**
     * The custom_price property
     */
    customPrice?: AmountModel | null;
    /**
     * @Description CustomRecurrency recurrency interval in days (required when recurrency is custom)
     */
    customRecurrency?: number | null;
    /**
     * @Description ISO 8601 timestamp when the subscription expires (null for ongoing subscriptions)
     */
    endDate?: Date | null;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     */
    etag?: string | null;
    /**
     * @Description Number of free trial days remaining (null if no trial or trial expired)
     */
    freeTrial?: SubscriptionFreeTrialModel | null;
    /**
     * @Description Optional custom name for easy identification of the subscription
     */
    friendlyName?: string | null;
    /**
     * @Description Unique identifier for the subscription (UUID format)
     */
    id?: string | null;
    /**
     * @Description Indicates whether the subscription is currently active or not
     */
    isActive?: boolean | null;
    /**
     * @Description List of labels associated with this subscription
     */
    labelRefs?: LabelRefModel[] | null;
    /**
     * @Description Ownership information specifying whether this subscription belongs to a user or family
     */
    owner?: OwnerModel | null;
    /**
     * @Description Information about who pays for this subscription within the family
     */
    payer?: SubscriptionPayerModel | null;
    /**
     * @Description ID of the specific plan being subscribed to
     */
    planId?: string | null;
    /**
     * @Description ID of the pricing tier for this subscription
     */
    priceId?: string | null;
    /**
     * @Description ID of the service provider offering this subscription
     */
    providerId?: string | null;
    /**
     * @Description Billing recurrency pattern (monthly, yearly, custom, etc.)
     */
    recurrency?: SubscriptionModel_recurrency | null;
    /**
     * @Description List of family member IDs who use this service (for shared subscriptions)
     */
    serviceUsers?: string[] | null;
    /**
     * @Description ISO 8601 timestamp when the subscription becomes active
     */
    startDate?: Date | null;
    /**
     * @Description ISO 8601 timestamp when the subscription was last modified
     */
    updatedAt?: Date | null;
}
export type SubscriptionModel_recurrency = (typeof SubscriptionModel_recurrencyObject)[keyof typeof SubscriptionModel_recurrencyObject];
/**
 * @Description Information about who pays for this subscription within the family
 */
export interface SubscriptionPayerModel extends AdditionalDataHolder, Parsable {
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     */
    etag?: string | null;
    /**
     * @Description ID of the family associated with this payer
     */
    familyId?: string | null;
    /**
     * @Description ID of the specific family member who pays (required when type is family_member)
     */
    memberId?: string | null;
    /**
     * @Description Type of payer (family or family member)
     */
    type?: SubscriptionPayerModel_type | null;
}
export type SubscriptionPayerModel_type = (typeof SubscriptionPayerModel_typeObject)[keyof typeof SubscriptionPayerModel_typeObject];
/**
 * Response containing subscription summary information
 */
export interface SubscriptionSummaryResponse extends AdditionalDataHolder, Parsable {
    /**
     * The active property
     */
    active?: number | null;
    /**
     * The top_labels property
     */
    topLabels?: SubscriptionSummaryTopLabelResponse[] | null;
    /**
     * The top_providers property
     */
    topProviders?: SubscriptionSummaryTopProviderResponse[] | null;
    /**
     * The total_last_month property
     */
    totalLastMonth?: AmountModel | null;
    /**
     * The total_last_year property
     */
    totalLastYear?: AmountModel | null;
    /**
     * The total_monthly property
     */
    totalMonthly?: AmountModel | null;
    /**
     * The total_yearly property
     */
    totalYearly?: AmountModel | null;
    /**
     * The upcoming_renewals property
     */
    upcomingRenewals?: SubscriptionSummaryUpcomingRenewalResponse[] | null;
}
export interface SubscriptionSummaryTopLabelResponse extends AdditionalDataHolder, Parsable {
    /**
     * The label_id property
     */
    labelId?: string | null;
    /**
     * The total property
     */
    total?: AmountModel | null;
}
export interface SubscriptionSummaryTopProviderResponse extends AdditionalDataHolder, Parsable {
    /**
     * The duration property
     */
    duration?: string | null;
    /**
     * The provider_id property
     */
    providerId?: string | null;
    /**
     * The total property
     */
    total?: AmountModel | null;
}
export interface SubscriptionSummaryUpcomingRenewalResponse extends AdditionalDataHolder, Parsable {
    /**
     * The at property
     */
    at?: Date | null;
    /**
     * The provider_id property
     */
    providerId?: string | null;
    /**
     * The source property
     */
    source?: AmountModel | null;
    /**
     * The total property
     */
    total?: AmountModel | null;
}
export interface UpdateFamilyMemberModel extends AdditionalDataHolder, Parsable {
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The type property
     */
    type?: UpdateFamilyMemberModel_type | null;
    /**
     * The updated_at property
     */
    updatedAt?: Date | null;
}
export type UpdateFamilyMemberModel_type = (typeof UpdateFamilyMemberModel_typeObject)[keyof typeof UpdateFamilyMemberModel_typeObject];
export interface UpdateFamilyModel extends AdditionalDataHolder, Parsable {
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The updated_at property
     */
    updatedAt?: Date | null;
}
export interface UpdateLabelModel extends AdditionalDataHolder, Parsable {
    /**
     * The color property
     */
    color?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The updated_at property
     */
    updatedAt?: Date | null;
}
export interface UpdatePlanModel extends AdditionalDataHolder, Parsable {
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The updateAt property
     */
    updateAt?: string | null;
}
export interface UpdatePreferredCurrencyModel extends AdditionalDataHolder, Parsable {
    /**
     * The currency property
     */
    currency?: string | null;
}
export interface UpdatePriceModel extends AdditionalDataHolder, Parsable {
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * The currency property
     */
    currency?: string | null;
    /**
     * The end_date property
     */
    endDate?: Date | null;
    /**
     * The start_date property
     */
    startDate?: Date | null;
}
export interface UpdateProfileModel extends AdditionalDataHolder, Parsable {
    /**
     * The family_name property
     */
    familyName?: string | null;
    /**
     * The given_name property
     */
    givenName?: string | null;
}
export interface UpdateProviderModel extends AdditionalDataHolder, Parsable {
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The icon_url property
     */
    iconUrl?: string | null;
    /**
     * The labels property
     */
    labels?: string[] | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The pricing_page_url property
     */
    pricingPageUrl?: string | null;
    /**
     * The updated_at property
     */
    updatedAt?: Date | null;
    /**
     * The url property
     */
    url?: string | null;
}
export interface UpdateSubscriptionModel extends AdditionalDataHolder, Parsable {
    /**
     * The custom_price property
     */
    customPrice?: AmountModel | null;
    /**
     * The custom_recurrency property
     */
    customRecurrency?: number | null;
    /**
     * The end_date property
     */
    endDate?: Date | null;
    /**
     * @Description Number of free trial days remaining (null if no trial or trial expired)
     */
    freeTrial?: SubscriptionFreeTrialModel | null;
    /**
     * The friendly_name property
     */
    friendlyName?: string | null;
    /**
     * The labels property
     */
    labels?: string[] | null;
    /**
     * The owner property
     */
    owner?: EditableOwnerModel | null;
    /**
     * Subscription payer object used for updating who pays for a subscription
     */
    payer?: EditableSubscriptionPayerModel | null;
    /**
     * The plan_id property
     */
    planId?: string | null;
    /**
     * The price_id property
     */
    priceId?: string | null;
    /**
     * The provider_id property
     */
    providerId?: string | null;
    /**
     * The recurrency property
     */
    recurrency?: string | null;
    /**
     * The service_users property
     */
    serviceUsers?: string[] | null;
    /**
     * The start_date property
     */
    startDate?: Date | null;
    /**
     * The updated_at property
     */
    updatedAt?: Date | null;
}
export interface UserPreferredCurrencyModel extends AdditionalDataHolder, Parsable {
    /**
     * The currency property
     */
    currency?: string | null;
}
export const CreateFamilyMemberModel_typeObject = {
    Owner: "owner",
    Adult: "adult",
    Kid: "kid",
} as const;
/**
 * @Description Type of ownership (personal, family or system)
 */
export const EditableOwnerModel_typeObject = {
    Personal: "personal",
    Family: "family",
    System: "system",
} as const;
/**
 * @Description Type of payer (family or family member)
 */
export const EditableSubscriptionPayerModel_typeObject = {
    Family: "family",
    Family_member: "family_member",
} as const;
/**
 * Type of the member (adult or kid)
 */
export const FamilyInviteRequest_typeObject = {
    Adult: "adult",
    Kid: "kid",
} as const;
/**
 * @Description Whether this member is a child (affects permissions and features)
 */
export const FamilyMemberModel_typeObject = {
    Owner: "owner",
    Adult: "adult",
    Kid: "kid",
} as const;
export const LabelRefModel_sourceObject = {
    Subscription: "subscription",
    Provider: "provider",
} as const;
/**
 * @Description Type of ownership (personal, family or system)
 */
export const OwnerModel_typeObject = {
    Personal: "personal",
    Family: "family",
    System: "system",
} as const;
/**
 * Indicates if the member is a kid
 */
export const PatchFamilyMemberModel_typeObject = {
    Owner: "owner",
    Adult: "adult",
    Kid: "kid",
} as const;
/**
 * @Description Billing recurrency pattern (monthly, yearly, custom, etc.)
 */
export const SubscriptionModel_recurrencyObject = {
    Unknown: "unknown",
    One_time: "one_time",
    Monthly: "monthly",
    Quarterly: "quarterly",
    Half_yearly: "half_yearly",
    Yearly: "yearly",
    Custom: "custom",
} as const;
/**
 * @Description Type of payer (family or family member)
 */
export const SubscriptionPayerModel_typeObject = {
    Family: "family",
    Family_member: "family_member",
} as const;
export const UpdateFamilyMemberModel_typeObject = {
    Owner: "owner",
    Adult: "adult",
    Kid: "kid",
} as const;
/* tslint:enable */
/* eslint-enable */
