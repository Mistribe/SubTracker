/* tslint:disable */
/* eslint-disable */
/**
 * SubTracker API
 * This api provide HTTPRest endpoints for the application SubTracker.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mistribe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DtoSubscriptionPayerModel } from './DtoSubscriptionPayerModel';
import {
    DtoSubscriptionPayerModelFromJSON,
    DtoSubscriptionPayerModelFromJSONTyped,
    DtoSubscriptionPayerModelToJSON,
    DtoSubscriptionPayerModelToJSONTyped,
} from './DtoSubscriptionPayerModel';
import type { DtoSubscriptionFreeTrialModel } from './DtoSubscriptionFreeTrialModel';
import {
    DtoSubscriptionFreeTrialModelFromJSON,
    DtoSubscriptionFreeTrialModelFromJSONTyped,
    DtoSubscriptionFreeTrialModelToJSON,
    DtoSubscriptionFreeTrialModelToJSONTyped,
} from './DtoSubscriptionFreeTrialModel';
import type { DtoOwnerModel } from './DtoOwnerModel';
import {
    DtoOwnerModelFromJSON,
    DtoOwnerModelFromJSONTyped,
    DtoOwnerModelToJSON,
    DtoOwnerModelToJSONTyped,
} from './DtoOwnerModel';
import type { DtoAmountModel } from './DtoAmountModel';
import {
    DtoAmountModelFromJSON,
    DtoAmountModelFromJSONTyped,
    DtoAmountModelToJSON,
    DtoAmountModelToJSONTyped,
} from './DtoAmountModel';
import type { DtoLabelRefModel } from './DtoLabelRefModel';
import {
    DtoLabelRefModelFromJSON,
    DtoLabelRefModelFromJSONTyped,
    DtoLabelRefModelToJSON,
    DtoLabelRefModelToJSONTyped,
} from './DtoLabelRefModel';
import type { DtoSubscriptionPriceModel } from './DtoSubscriptionPriceModel';
import {
    DtoSubscriptionPriceModelFromJSON,
    DtoSubscriptionPriceModelFromJSONTyped,
    DtoSubscriptionPriceModelToJSON,
    DtoSubscriptionPriceModelToJSONTyped,
} from './DtoSubscriptionPriceModel';

/**
 * Subscription object containing all information about an active subscription including billing and usage details
 * @export
 * @interface DtoSubscriptionModel
 */
export interface DtoSubscriptionModel {
    /**
     * @Description ISO 8601 timestamp when the subscription was originally created
     * @type {Date}
     * @memberof DtoSubscriptionModel
     */
    createdAt: Date;
    /**
     * 
     * @type {DtoAmountModel}
     * @memberof DtoSubscriptionModel
     */
    customPrice?: DtoAmountModel;
    /**
     * @Description CustomRecurrency recurrency interval in days (required when recurrency is custom)
     * @type {number}
     * @memberof DtoSubscriptionModel
     */
    customRecurrency?: number;
    /**
     * @Description ISO 8601 timestamp when the subscription expires (null for ongoing subscriptions)
     * @type {Date}
     * @memberof DtoSubscriptionModel
     */
    endDate?: Date;
    /**
     * @Description Entity tag used for optimistic concurrency control to prevent conflicting updates
     * @type {string}
     * @memberof DtoSubscriptionModel
     */
    etag: string;
    /**
     * 
     * @type {DtoSubscriptionFreeTrialModel}
     * @memberof DtoSubscriptionModel
     */
    freeTrial?: DtoSubscriptionFreeTrialModel;
    /**
     * @Description Optional custom name for easy identification of the subscription
     * @type {string}
     * @memberof DtoSubscriptionModel
     */
    friendlyName?: string;
    /**
     * @Description Unique identifier for the subscription (UUID format)
     * @type {string}
     * @memberof DtoSubscriptionModel
     */
    id: string;
    /**
     * @Description Indicates whether the subscription is currently active or not
     * @type {boolean}
     * @memberof DtoSubscriptionModel
     */
    isActive: boolean;
    /**
     * @Description List of labels associated with this subscription
     * @type {Array<DtoLabelRefModel>}
     * @memberof DtoSubscriptionModel
     */
    labelRefs?: Array<DtoLabelRefModel>;
    /**
     * 
     * @type {DtoOwnerModel}
     * @memberof DtoSubscriptionModel
     */
    owner: DtoOwnerModel;
    /**
     * 
     * @type {DtoSubscriptionPayerModel}
     * @memberof DtoSubscriptionModel
     */
    payer?: DtoSubscriptionPayerModel;
    /**
     * @Description LabelID of the specific plan being subscribed to
     * @type {string}
     * @memberof DtoSubscriptionModel
     */
    planId?: string;
    /**
     * 
     * @type {DtoSubscriptionPriceModel}
     * @memberof DtoSubscriptionModel
     */
    price?: DtoSubscriptionPriceModel;
    /**
     * @Description LabelID of the pricing tier for this subscription
     * @type {string}
     * @memberof DtoSubscriptionModel
     */
    priceId?: string;
    /**
     * @Description LabelID of the service provider offering this subscription
     * @type {string}
     * @memberof DtoSubscriptionModel
     */
    providerId: string;
    /**
     * @Description Billing recurrency pattern (monthly, yearly, custom, etc.)
     * @type {string}
     * @memberof DtoSubscriptionModel
     */
    recurrency: DtoSubscriptionModelRecurrencyEnum;
    /**
     * @Description List of family member IDs who use this service (for shared subscriptions)
     * @type {Array<string>}
     * @memberof DtoSubscriptionModel
     */
    serviceUsers?: Array<string>;
    /**
     * @Description ISO 8601 timestamp when the subscription becomes active
     * @type {Date}
     * @memberof DtoSubscriptionModel
     */
    startDate: Date;
    /**
     * @Description ISO 8601 timestamp when the subscription was last modified
     * @type {Date}
     * @memberof DtoSubscriptionModel
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const DtoSubscriptionModelRecurrencyEnum = {
    Unknown: 'unknown',
    OneTime: 'one_time',
    Monthly: 'monthly',
    Quarterly: 'quarterly',
    HalfYearly: 'half_yearly',
    Yearly: 'yearly',
    Custom: 'custom'
} as const;
export type DtoSubscriptionModelRecurrencyEnum = typeof DtoSubscriptionModelRecurrencyEnum[keyof typeof DtoSubscriptionModelRecurrencyEnum];


/**
 * Check if a given object implements the DtoSubscriptionModel interface.
 */
export function instanceOfDtoSubscriptionModel(value: object): value is DtoSubscriptionModel {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('etag' in value) || value['etag'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('isActive' in value) || value['isActive'] === undefined) return false;
    if (!('owner' in value) || value['owner'] === undefined) return false;
    if (!('providerId' in value) || value['providerId'] === undefined) return false;
    if (!('recurrency' in value) || value['recurrency'] === undefined) return false;
    if (!('startDate' in value) || value['startDate'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function DtoSubscriptionModelFromJSON(json: any): DtoSubscriptionModel {
    return DtoSubscriptionModelFromJSONTyped(json, false);
}

export function DtoSubscriptionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DtoSubscriptionModel {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['created_at'])),
        'customPrice': json['custom_price'] == null ? undefined : DtoAmountModelFromJSON(json['custom_price']),
        'customRecurrency': json['custom_recurrency'] == null ? undefined : json['custom_recurrency'],
        'endDate': json['end_date'] == null ? undefined : (new Date(json['end_date'])),
        'etag': json['etag'],
        'freeTrial': json['free_trial'] == null ? undefined : DtoSubscriptionFreeTrialModelFromJSON(json['free_trial']),
        'friendlyName': json['friendly_name'] == null ? undefined : json['friendly_name'],
        'id': json['id'],
        'isActive': json['is_active'],
        'labelRefs': json['label_refs'] == null ? undefined : ((json['label_refs'] as Array<any>).map(DtoLabelRefModelFromJSON)),
        'owner': DtoOwnerModelFromJSON(json['owner']),
        'payer': json['payer'] == null ? undefined : DtoSubscriptionPayerModelFromJSON(json['payer']),
        'planId': json['plan_id'] == null ? undefined : json['plan_id'],
        'price': json['price'] == null ? undefined : DtoSubscriptionPriceModelFromJSON(json['price']),
        'priceId': json['price_id'] == null ? undefined : json['price_id'],
        'providerId': json['provider_id'],
        'recurrency': json['recurrency'],
        'serviceUsers': json['service_users'] == null ? undefined : json['service_users'],
        'startDate': (new Date(json['start_date'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function DtoSubscriptionModelToJSON(json: any): DtoSubscriptionModel {
    return DtoSubscriptionModelToJSONTyped(json, false);
}

export function DtoSubscriptionModelToJSONTyped(value?: DtoSubscriptionModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created_at': value['createdAt'].toISOString(),
        'custom_price': DtoAmountModelToJSON(value['customPrice']),
        'custom_recurrency': value['customRecurrency'],
        'end_date': value['endDate'] == null ? value['endDate'] : value['endDate'].toISOString(),
        'etag': value['etag'],
        'free_trial': DtoSubscriptionFreeTrialModelToJSON(value['freeTrial']),
        'friendly_name': value['friendlyName'],
        'id': value['id'],
        'is_active': value['isActive'],
        'label_refs': value['labelRefs'] == null ? undefined : ((value['labelRefs'] as Array<any>).map(DtoLabelRefModelToJSON)),
        'owner': DtoOwnerModelToJSON(value['owner']),
        'payer': DtoSubscriptionPayerModelToJSON(value['payer']),
        'plan_id': value['planId'],
        'price': DtoSubscriptionPriceModelToJSON(value['price']),
        'price_id': value['priceId'],
        'provider_id': value['providerId'],
        'recurrency': value['recurrency'],
        'service_users': value['serviceUsers'],
        'start_date': value['startDate'].toISOString(),
        'updated_at': value['updatedAt'].toISOString(),
    };
}

