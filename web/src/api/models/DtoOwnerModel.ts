/* tslint:disable */
/* eslint-disable */
/**
 * SubTracker API
 * This api provide HTTPRest endpoints for the application SubTracker.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mistribe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * @Description Ownership information specifying whether this subscription belongs to a user or family
 * @export
 * @interface DtoOwnerModel
 */
export interface DtoOwnerModel {
    /**
     * @Description Entity tag for optimistic concurrency control
     * @type {string}
     * @memberof DtoOwnerModel
     */
    etag: string;
    /**
     * @Description Family LabelID when an ownership type is family (required for family ownership)
     * @type {string}
     * @memberof DtoOwnerModel
     */
    familyId?: string;
    /**
     * @Description Type of ownership (personal, family or system)
     * @type {string}
     * @memberof DtoOwnerModel
     */
    type: DtoOwnerModelTypeEnum;
    /**
     * @Description UserProfile LabelID when an ownership type is personal (required for personal ownership)
     * @type {string}
     * @memberof DtoOwnerModel
     */
    userId?: string;
}


/**
 * @export
 */
export const DtoOwnerModelTypeEnum = {
    Personal: 'personal',
    Family: 'family',
    System: 'system'
} as const;
export type DtoOwnerModelTypeEnum = typeof DtoOwnerModelTypeEnum[keyof typeof DtoOwnerModelTypeEnum];


/**
 * Check if a given object implements the DtoOwnerModel interface.
 */
export function instanceOfDtoOwnerModel(value: object): value is DtoOwnerModel {
    if (!('etag' in value) || value['etag'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function DtoOwnerModelFromJSON(json: any): DtoOwnerModel {
    return DtoOwnerModelFromJSONTyped(json, false);
}

export function DtoOwnerModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DtoOwnerModel {
    if (json == null) {
        return json;
    }
    return {
        
        'etag': json['etag'],
        'familyId': json['family_id'] == null ? undefined : json['family_id'],
        'type': json['type'],
        'userId': json['userId'] == null ? undefined : json['userId'],
    };
}

export function DtoOwnerModelToJSON(json: any): DtoOwnerModel {
    return DtoOwnerModelToJSONTyped(json, false);
}

export function DtoOwnerModelToJSONTyped(value?: DtoOwnerModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'etag': value['etag'],
        'family_id': value['familyId'],
        'type': value['type'],
        'userId': value['userId'],
    };
}

