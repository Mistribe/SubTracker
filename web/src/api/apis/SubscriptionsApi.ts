/* tslint:disable */
/* eslint-disable */
/**
 * SubTracker API
 * This api provide HTTPRest endpoints for the application SubTracker.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mistribe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DtoCreateSubscriptionRequest,
  DtoPaginatedResponseModelSubscriptionModel,
  DtoQuotaUsageModel,
  DtoSubscriptionModel,
  DtoSubscriptionSummaryResponse,
  DtoUpdateSubscriptionRequest,
  GinxHttpErrorResponse,
} from '../models/index';
import {
    DtoCreateSubscriptionRequestFromJSON,
    DtoCreateSubscriptionRequestToJSON,
    DtoPaginatedResponseModelSubscriptionModelFromJSON,
    DtoPaginatedResponseModelSubscriptionModelToJSON,
    DtoQuotaUsageModelFromJSON,
    DtoQuotaUsageModelToJSON,
    DtoSubscriptionModelFromJSON,
    DtoSubscriptionModelToJSON,
    DtoSubscriptionSummaryResponseFromJSON,
    DtoSubscriptionSummaryResponseToJSON,
    DtoUpdateSubscriptionRequestFromJSON,
    DtoUpdateSubscriptionRequestToJSON,
    GinxHttpErrorResponseFromJSON,
    GinxHttpErrorResponseToJSON,
} from '../models/index';

export interface SubscriptionsGetRequest {
    search?: string;
    recurrencies?: Array<string>;
    fromDate?: string;
    toDate?: string;
    users?: Array<string>;
    withInactive?: boolean;
    providers?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface SubscriptionsPostRequest {
    dtoCreateSubscriptionRequest: DtoCreateSubscriptionRequest;
}

export interface SubscriptionsSubscriptionIdDeleteRequest {
    subscriptionId: string;
}

export interface SubscriptionsSubscriptionIdGetRequest {
    subscriptionId: string;
}

export interface SubscriptionsSubscriptionIdPutRequest {
    subscriptionId: string;
    dtoUpdateSubscriptionRequest: DtoUpdateSubscriptionRequest;
}

export interface SubscriptionsSummaryGetRequest {
    topProviders: number;
    topLabels: number;
    upcomingRenewals: number;
    totalMonthly: boolean;
    totalYearly: boolean;
}

/**
 * 
 */
export class SubscriptionsApi extends runtime.BaseAPI {

    /**
     * Retrieve a paginated list of all subscriptions for the authenticated user
     * Get all subscriptions
     */
    async subscriptionsGetRaw(requestParameters: SubscriptionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoPaginatedResponseModelSubscriptionModel>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['recurrencies'] != null) {
            queryParameters['recurrencies'] = requestParameters['recurrencies'];
        }

        if (requestParameters['fromDate'] != null) {
            queryParameters['from_date'] = requestParameters['fromDate'];
        }

        if (requestParameters['toDate'] != null) {
            queryParameters['to_date'] = requestParameters['toDate'];
        }

        if (requestParameters['users'] != null) {
            queryParameters['users'] = requestParameters['users'];
        }

        if (requestParameters['withInactive'] != null) {
            queryParameters['with_inactive'] = requestParameters['withInactive'];
        }

        if (requestParameters['providers'] != null) {
            queryParameters['providers'] = requestParameters['providers'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/subscriptions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoPaginatedResponseModelSubscriptionModelFromJSON(jsonValue));
    }

    /**
     * Retrieve a paginated list of all subscriptions for the authenticated user
     * Get all subscriptions
     */
    async subscriptionsGet(requestParameters: SubscriptionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoPaginatedResponseModelSubscriptionModel> {
        const response = await this.subscriptionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new subscription with provider, plan, pricing, and payment information
     * Create a new subscription
     */
    async subscriptionsPostRaw(requestParameters: SubscriptionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoSubscriptionModel>> {
        if (requestParameters['dtoCreateSubscriptionRequest'] == null) {
            throw new runtime.RequiredError(
                'dtoCreateSubscriptionRequest',
                'Required parameter "dtoCreateSubscriptionRequest" was null or undefined when calling subscriptionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/subscriptions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DtoCreateSubscriptionRequestToJSON(requestParameters['dtoCreateSubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoSubscriptionModelFromJSON(jsonValue));
    }

    /**
     * Create a new subscription with provider, plan, pricing, and payment information
     * Create a new subscription
     */
    async subscriptionsPost(requestParameters: SubscriptionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoSubscriptionModel> {
        const response = await this.subscriptionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the current quota usage and limits for the authenticated user
     * Get quota usage
     */
    async subscriptionsQuotaUsageGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DtoQuotaUsageModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/subscriptions/quota/usage`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DtoQuotaUsageModelFromJSON));
    }

    /**
     * Retrieve the current quota usage and limits for the authenticated user
     * Get quota usage
     */
    async subscriptionsQuotaUsageGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DtoQuotaUsageModel>> {
        const response = await this.subscriptionsQuotaUsageGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Permanently delete an existing subscription
     * Delete subscription by LabelID
     */
    async subscriptionsSubscriptionIdDeleteRaw(requestParameters: SubscriptionsSubscriptionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling subscriptionsSubscriptionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/subscriptions/{subscriptionId}`;
        urlPath = urlPath.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters['subscriptionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Permanently delete an existing subscription
     * Delete subscription by LabelID
     */
    async subscriptionsSubscriptionIdDelete(requestParameters: SubscriptionsSubscriptionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscriptionsSubscriptionIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a single subscription with all its details including provider, plan, and pricing information
     * Get subscription by LabelID
     */
    async subscriptionsSubscriptionIdGetRaw(requestParameters: SubscriptionsSubscriptionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoSubscriptionModel>> {
        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling subscriptionsSubscriptionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/subscriptions/{subscriptionId}`;
        urlPath = urlPath.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters['subscriptionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoSubscriptionModelFromJSON(jsonValue));
    }

    /**
     * Retrieve a single subscription with all its details including provider, plan, and pricing information
     * Get subscription by LabelID
     */
    async subscriptionsSubscriptionIdGet(requestParameters: SubscriptionsSubscriptionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoSubscriptionModel> {
        const response = await this.subscriptionsSubscriptionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing subscription\'s details including provider, plan, pricing, and payment information
     * Update subscription by LabelID
     */
    async subscriptionsSubscriptionIdPutRaw(requestParameters: SubscriptionsSubscriptionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoSubscriptionModel>> {
        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling subscriptionsSubscriptionIdPut().'
            );
        }

        if (requestParameters['dtoUpdateSubscriptionRequest'] == null) {
            throw new runtime.RequiredError(
                'dtoUpdateSubscriptionRequest',
                'Required parameter "dtoUpdateSubscriptionRequest" was null or undefined when calling subscriptionsSubscriptionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/subscriptions/{subscriptionId}`;
        urlPath = urlPath.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters['subscriptionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DtoUpdateSubscriptionRequestToJSON(requestParameters['dtoUpdateSubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoSubscriptionModelFromJSON(jsonValue));
    }

    /**
     * Update an existing subscription\'s details including provider, plan, pricing, and payment information
     * Update subscription by LabelID
     */
    async subscriptionsSubscriptionIdPut(requestParameters: SubscriptionsSubscriptionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoSubscriptionModel> {
        const response = await this.subscriptionsSubscriptionIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns summary information about subscriptions including total costs and upcoming renewals
     * Get subscription summary
     */
    async subscriptionsSummaryGetRaw(requestParameters: SubscriptionsSummaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoSubscriptionSummaryResponse>> {
        if (requestParameters['topProviders'] == null) {
            throw new runtime.RequiredError(
                'topProviders',
                'Required parameter "topProviders" was null or undefined when calling subscriptionsSummaryGet().'
            );
        }

        if (requestParameters['topLabels'] == null) {
            throw new runtime.RequiredError(
                'topLabels',
                'Required parameter "topLabels" was null or undefined when calling subscriptionsSummaryGet().'
            );
        }

        if (requestParameters['upcomingRenewals'] == null) {
            throw new runtime.RequiredError(
                'upcomingRenewals',
                'Required parameter "upcomingRenewals" was null or undefined when calling subscriptionsSummaryGet().'
            );
        }

        if (requestParameters['totalMonthly'] == null) {
            throw new runtime.RequiredError(
                'totalMonthly',
                'Required parameter "totalMonthly" was null or undefined when calling subscriptionsSummaryGet().'
            );
        }

        if (requestParameters['totalYearly'] == null) {
            throw new runtime.RequiredError(
                'totalYearly',
                'Required parameter "totalYearly" was null or undefined when calling subscriptionsSummaryGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['topProviders'] != null) {
            queryParameters['top_providers'] = requestParameters['topProviders'];
        }

        if (requestParameters['topLabels'] != null) {
            queryParameters['top_labels'] = requestParameters['topLabels'];
        }

        if (requestParameters['upcomingRenewals'] != null) {
            queryParameters['upcoming_renewals'] = requestParameters['upcomingRenewals'];
        }

        if (requestParameters['totalMonthly'] != null) {
            queryParameters['total_monthly'] = requestParameters['totalMonthly'];
        }

        if (requestParameters['totalYearly'] != null) {
            queryParameters['total_yearly'] = requestParameters['totalYearly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/subscriptions/summary`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoSubscriptionSummaryResponseFromJSON(jsonValue));
    }

    /**
     * Returns summary information about subscriptions including total costs and upcoming renewals
     * Get subscription summary
     */
    async subscriptionsSummaryGet(requestParameters: SubscriptionsSummaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoSubscriptionSummaryResponse> {
        const response = await this.subscriptionsSummaryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
