/* tslint:disable */
/* eslint-disable */
/**
 * SubTracker API
 * This api provide HTTPRest endpoints for the application SubTracker.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mistribe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DtoCreateFamilyMemberRequest,
  DtoCreateFamilyRequest,
  DtoFamilyAcceptInvitationRequest,
  DtoFamilyDeclineInvitationRequest,
  DtoFamilyInviteRequest,
  DtoFamilyInviteResponse,
  DtoFamilyModel,
  DtoFamilySeeInvitationResponse,
  DtoQuotaUsageModel,
  DtoUpdateFamilyMemberRequest,
  DtoUpdateFamilyRequest,
  GinxHttpErrorResponse,
} from '../models/index';
import {
    DtoCreateFamilyMemberRequestFromJSON,
    DtoCreateFamilyMemberRequestToJSON,
    DtoCreateFamilyRequestFromJSON,
    DtoCreateFamilyRequestToJSON,
    DtoFamilyAcceptInvitationRequestFromJSON,
    DtoFamilyAcceptInvitationRequestToJSON,
    DtoFamilyDeclineInvitationRequestFromJSON,
    DtoFamilyDeclineInvitationRequestToJSON,
    DtoFamilyInviteRequestFromJSON,
    DtoFamilyInviteRequestToJSON,
    DtoFamilyInviteResponseFromJSON,
    DtoFamilyInviteResponseToJSON,
    DtoFamilyModelFromJSON,
    DtoFamilyModelToJSON,
    DtoFamilySeeInvitationResponseFromJSON,
    DtoFamilySeeInvitationResponseToJSON,
    DtoQuotaUsageModelFromJSON,
    DtoQuotaUsageModelToJSON,
    DtoUpdateFamilyMemberRequestFromJSON,
    DtoUpdateFamilyMemberRequestToJSON,
    DtoUpdateFamilyRequestFromJSON,
    DtoUpdateFamilyRequestToJSON,
    GinxHttpErrorResponseFromJSON,
    GinxHttpErrorResponseToJSON,
} from '../models/index';

export interface FamilyFamilyIdAcceptPostRequest {
    familyId: string;
    dtoFamilyAcceptInvitationRequest: DtoFamilyAcceptInvitationRequest;
}

export interface FamilyFamilyIdDeclinePostRequest {
    familyId: string;
    dtoFamilyDeclineInvitationRequest: DtoFamilyDeclineInvitationRequest;
}

export interface FamilyFamilyIdDeleteRequest {
    familyId: string;
}

export interface FamilyFamilyIdInvitationGetRequest {
    familyId: string;
    code: string;
    familyMemberId: string;
}

export interface FamilyFamilyIdInvitePostRequest {
    familyId: string;
    dtoFamilyInviteRequest: DtoFamilyInviteRequest;
}

export interface FamilyFamilyIdMembersFamilyMemberIdDeleteRequest {
    familyId: string;
    familyMemberId: string;
}

export interface FamilyFamilyIdMembersFamilyMemberIdPutRequest {
    familyId: string;
    familyMemberId: string;
    dtoUpdateFamilyMemberRequest: DtoUpdateFamilyMemberRequest;
}

export interface FamilyFamilyIdMembersFamilyMemberIdRevokePostRequest {
    familyId: string;
    familyMemberId: string;
    body?: object;
}

export interface FamilyFamilyIdMembersPostRequest {
    familyId: string;
    dtoCreateFamilyMemberRequest: DtoCreateFamilyMemberRequest;
}

export interface FamilyFamilyIdPutRequest {
    familyId: string;
    dtoUpdateFamilyRequest: DtoUpdateFamilyRequest;
}

export interface FamilyPostRequest {
    dtoCreateFamilyRequest: DtoCreateFamilyRequest;
}

/**
 * 
 */
export class FamilyApi extends runtime.BaseAPI {

    /**
     * Accepts an invitation to join a family using the provided invitation code
     * Accept a family invitation
     */
    async familyFamilyIdAcceptPostRaw(requestParameters: FamilyFamilyIdAcceptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['familyId'] == null) {
            throw new runtime.RequiredError(
                'familyId',
                'Required parameter "familyId" was null or undefined when calling familyFamilyIdAcceptPost().'
            );
        }

        if (requestParameters['dtoFamilyAcceptInvitationRequest'] == null) {
            throw new runtime.RequiredError(
                'dtoFamilyAcceptInvitationRequest',
                'Required parameter "dtoFamilyAcceptInvitationRequest" was null or undefined when calling familyFamilyIdAcceptPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/family/{familyId}/accept`;
        urlPath = urlPath.replace(`{${"familyId"}}`, encodeURIComponent(String(requestParameters['familyId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DtoFamilyAcceptInvitationRequestToJSON(requestParameters['dtoFamilyAcceptInvitationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Accepts an invitation to join a family using the provided invitation code
     * Accept a family invitation
     */
    async familyFamilyIdAcceptPost(requestParameters: FamilyFamilyIdAcceptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.familyFamilyIdAcceptPostRaw(requestParameters, initOverrides);
    }

    /**
     * Endpoint to decline an invitation to join a family
     * Decline family invitation
     */
    async familyFamilyIdDeclinePostRaw(requestParameters: FamilyFamilyIdDeclinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['familyId'] == null) {
            throw new runtime.RequiredError(
                'familyId',
                'Required parameter "familyId" was null or undefined when calling familyFamilyIdDeclinePost().'
            );
        }

        if (requestParameters['dtoFamilyDeclineInvitationRequest'] == null) {
            throw new runtime.RequiredError(
                'dtoFamilyDeclineInvitationRequest',
                'Required parameter "dtoFamilyDeclineInvitationRequest" was null or undefined when calling familyFamilyIdDeclinePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/family/{familyId}/decline`;
        urlPath = urlPath.replace(`{${"familyId"}}`, encodeURIComponent(String(requestParameters['familyId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DtoFamilyDeclineInvitationRequestToJSON(requestParameters['dtoFamilyDeclineInvitationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Endpoint to decline an invitation to join a family
     * Decline family invitation
     */
    async familyFamilyIdDeclinePost(requestParameters: FamilyFamilyIdDeclinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.familyFamilyIdDeclinePostRaw(requestParameters, initOverrides);
    }

    /**
     * Permanently delete a family and all its members
     * Delete family by LabelID
     */
    async familyFamilyIdDeleteRaw(requestParameters: FamilyFamilyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['familyId'] == null) {
            throw new runtime.RequiredError(
                'familyId',
                'Required parameter "familyId" was null or undefined when calling familyFamilyIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/family/{familyId}`;
        urlPath = urlPath.replace(`{${"familyId"}}`, encodeURIComponent(String(requestParameters['familyId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Permanently delete a family and all its members
     * Delete family by LabelID
     */
    async familyFamilyIdDelete(requestParameters: FamilyFamilyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.familyFamilyIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get information about a family invitation using invitation code
     * View family invitation details
     */
    async familyFamilyIdInvitationGetRaw(requestParameters: FamilyFamilyIdInvitationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoFamilySeeInvitationResponse>> {
        if (requestParameters['familyId'] == null) {
            throw new runtime.RequiredError(
                'familyId',
                'Required parameter "familyId" was null or undefined when calling familyFamilyIdInvitationGet().'
            );
        }

        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling familyFamilyIdInvitationGet().'
            );
        }

        if (requestParameters['familyMemberId'] == null) {
            throw new runtime.RequiredError(
                'familyMemberId',
                'Required parameter "familyMemberId" was null or undefined when calling familyFamilyIdInvitationGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['familyMemberId'] != null) {
            queryParameters['family_member_id'] = requestParameters['familyMemberId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/family/{familyId}/invitation`;
        urlPath = urlPath.replace(`{${"familyId"}}`, encodeURIComponent(String(requestParameters['familyId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoFamilySeeInvitationResponseFromJSON(jsonValue));
    }

    /**
     * Get information about a family invitation using invitation code
     * View family invitation details
     */
    async familyFamilyIdInvitationGet(requestParameters: FamilyFamilyIdInvitationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoFamilySeeInvitationResponse> {
        const response = await this.familyFamilyIdInvitationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an invitation for a new member to join the family
     * Invite a new member to the family
     */
    async familyFamilyIdInvitePostRaw(requestParameters: FamilyFamilyIdInvitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoFamilyInviteResponse>> {
        if (requestParameters['familyId'] == null) {
            throw new runtime.RequiredError(
                'familyId',
                'Required parameter "familyId" was null or undefined when calling familyFamilyIdInvitePost().'
            );
        }

        if (requestParameters['dtoFamilyInviteRequest'] == null) {
            throw new runtime.RequiredError(
                'dtoFamilyInviteRequest',
                'Required parameter "dtoFamilyInviteRequest" was null or undefined when calling familyFamilyIdInvitePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/family/{familyId}/invite`;
        urlPath = urlPath.replace(`{${"familyId"}}`, encodeURIComponent(String(requestParameters['familyId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DtoFamilyInviteRequestToJSON(requestParameters['dtoFamilyInviteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoFamilyInviteResponseFromJSON(jsonValue));
    }

    /**
     * Creates an invitation for a new member to join the family
     * Invite a new member to the family
     */
    async familyFamilyIdInvitePost(requestParameters: FamilyFamilyIdInvitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoFamilyInviteResponse> {
        const response = await this.familyFamilyIdInvitePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Permanently delete a family member from a family
     * Delete family member by LabelID
     */
    async familyFamilyIdMembersFamilyMemberIdDeleteRaw(requestParameters: FamilyFamilyIdMembersFamilyMemberIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['familyId'] == null) {
            throw new runtime.RequiredError(
                'familyId',
                'Required parameter "familyId" was null or undefined when calling familyFamilyIdMembersFamilyMemberIdDelete().'
            );
        }

        if (requestParameters['familyMemberId'] == null) {
            throw new runtime.RequiredError(
                'familyMemberId',
                'Required parameter "familyMemberId" was null or undefined when calling familyFamilyIdMembersFamilyMemberIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/family/{familyId}/members/{familyMemberId}`;
        urlPath = urlPath.replace(`{${"familyId"}}`, encodeURIComponent(String(requestParameters['familyId'])));
        urlPath = urlPath.replace(`{${"familyMemberId"}}`, encodeURIComponent(String(requestParameters['familyMemberId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Permanently delete a family member from a family
     * Delete family member by LabelID
     */
    async familyFamilyIdMembersFamilyMemberIdDelete(requestParameters: FamilyFamilyIdMembersFamilyMemberIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.familyFamilyIdMembersFamilyMemberIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update an existing family member\'s information such as name and kid status
     * Update family member by LabelID
     */
    async familyFamilyIdMembersFamilyMemberIdPutRaw(requestParameters: FamilyFamilyIdMembersFamilyMemberIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoFamilyModel>> {
        if (requestParameters['familyId'] == null) {
            throw new runtime.RequiredError(
                'familyId',
                'Required parameter "familyId" was null or undefined when calling familyFamilyIdMembersFamilyMemberIdPut().'
            );
        }

        if (requestParameters['familyMemberId'] == null) {
            throw new runtime.RequiredError(
                'familyMemberId',
                'Required parameter "familyMemberId" was null or undefined when calling familyFamilyIdMembersFamilyMemberIdPut().'
            );
        }

        if (requestParameters['dtoUpdateFamilyMemberRequest'] == null) {
            throw new runtime.RequiredError(
                'dtoUpdateFamilyMemberRequest',
                'Required parameter "dtoUpdateFamilyMemberRequest" was null or undefined when calling familyFamilyIdMembersFamilyMemberIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/family/{familyId}/members/{familyMemberId}`;
        urlPath = urlPath.replace(`{${"familyId"}}`, encodeURIComponent(String(requestParameters['familyId'])));
        urlPath = urlPath.replace(`{${"familyMemberId"}}`, encodeURIComponent(String(requestParameters['familyMemberId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DtoUpdateFamilyMemberRequestToJSON(requestParameters['dtoUpdateFamilyMemberRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoFamilyModelFromJSON(jsonValue));
    }

    /**
     * Update an existing family member\'s information such as name and kid status
     * Update family member by LabelID
     */
    async familyFamilyIdMembersFamilyMemberIdPut(requestParameters: FamilyFamilyIdMembersFamilyMemberIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoFamilyModel> {
        const response = await this.familyFamilyIdMembersFamilyMemberIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revokes a member from the family
     * Revoke family member
     */
    async familyFamilyIdMembersFamilyMemberIdRevokePostRaw(requestParameters: FamilyFamilyIdMembersFamilyMemberIdRevokePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['familyId'] == null) {
            throw new runtime.RequiredError(
                'familyId',
                'Required parameter "familyId" was null or undefined when calling familyFamilyIdMembersFamilyMemberIdRevokePost().'
            );
        }

        if (requestParameters['familyMemberId'] == null) {
            throw new runtime.RequiredError(
                'familyMemberId',
                'Required parameter "familyMemberId" was null or undefined when calling familyFamilyIdMembersFamilyMemberIdRevokePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/family/{familyId}/members/{familyMemberId}/revoke`;
        urlPath = urlPath.replace(`{${"familyId"}}`, encodeURIComponent(String(requestParameters['familyId'])));
        urlPath = urlPath.replace(`{${"familyMemberId"}}`, encodeURIComponent(String(requestParameters['familyMemberId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes a member from the family
     * Revoke family member
     */
    async familyFamilyIdMembersFamilyMemberIdRevokePost(requestParameters: FamilyFamilyIdMembersFamilyMemberIdRevokePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.familyFamilyIdMembersFamilyMemberIdRevokePostRaw(requestParameters, initOverrides);
    }

    /**
     * Add a new member to an existing family
     * Add a new family member
     */
    async familyFamilyIdMembersPostRaw(requestParameters: FamilyFamilyIdMembersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoFamilyModel>> {
        if (requestParameters['familyId'] == null) {
            throw new runtime.RequiredError(
                'familyId',
                'Required parameter "familyId" was null or undefined when calling familyFamilyIdMembersPost().'
            );
        }

        if (requestParameters['dtoCreateFamilyMemberRequest'] == null) {
            throw new runtime.RequiredError(
                'dtoCreateFamilyMemberRequest',
                'Required parameter "dtoCreateFamilyMemberRequest" was null or undefined when calling familyFamilyIdMembersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/family/{familyId}/members`;
        urlPath = urlPath.replace(`{${"familyId"}}`, encodeURIComponent(String(requestParameters['familyId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DtoCreateFamilyMemberRequestToJSON(requestParameters['dtoCreateFamilyMemberRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoFamilyModelFromJSON(jsonValue));
    }

    /**
     * Add a new member to an existing family
     * Add a new family member
     */
    async familyFamilyIdMembersPost(requestParameters: FamilyFamilyIdMembersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoFamilyModel> {
        const response = await this.familyFamilyIdMembersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update family information such as name and other details
     * Update a family
     */
    async familyFamilyIdPutRaw(requestParameters: FamilyFamilyIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoFamilyModel>> {
        if (requestParameters['familyId'] == null) {
            throw new runtime.RequiredError(
                'familyId',
                'Required parameter "familyId" was null or undefined when calling familyFamilyIdPut().'
            );
        }

        if (requestParameters['dtoUpdateFamilyRequest'] == null) {
            throw new runtime.RequiredError(
                'dtoUpdateFamilyRequest',
                'Required parameter "dtoUpdateFamilyRequest" was null or undefined when calling familyFamilyIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/family/{familyId}`;
        urlPath = urlPath.replace(`{${"familyId"}}`, encodeURIComponent(String(requestParameters['familyId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DtoUpdateFamilyRequestToJSON(requestParameters['dtoUpdateFamilyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoFamilyModelFromJSON(jsonValue));
    }

    /**
     * Update family information such as name and other details
     * Update a family
     */
    async familyFamilyIdPut(requestParameters: FamilyFamilyIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoFamilyModel> {
        const response = await this.familyFamilyIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the user\'s family
     * Get user\'s family
     */
    async familyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoFamilyModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/family`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoFamilyModelFromJSON(jsonValue));
    }

    /**
     * Retrieve the user\'s family
     * Get user\'s family
     */
    async familyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoFamilyModel> {
        const response = await this.familyGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new family with the authenticated user as the owner and initial member
     * Create a new family
     */
    async familyPostRaw(requestParameters: FamilyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoFamilyModel>> {
        if (requestParameters['dtoCreateFamilyRequest'] == null) {
            throw new runtime.RequiredError(
                'dtoCreateFamilyRequest',
                'Required parameter "dtoCreateFamilyRequest" was null or undefined when calling familyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/family`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DtoCreateFamilyRequestToJSON(requestParameters['dtoCreateFamilyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoFamilyModelFromJSON(jsonValue));
    }

    /**
     * Create a new family with the authenticated user as the owner and initial member
     * Create a new family
     */
    async familyPost(requestParameters: FamilyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoFamilyModel> {
        const response = await this.familyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the current quota usage and limits for the authenticated user
     * Get quota usage
     */
    async familyQuotaUsageGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DtoQuotaUsageModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/family/quota/usage`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DtoQuotaUsageModelFromJSON));
    }

    /**
     * Retrieve the current quota usage and limits for the authenticated user
     * Get quota usage
     */
    async familyQuotaUsageGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DtoQuotaUsageModel>> {
        const response = await this.familyQuotaUsageGetRaw(initOverrides);
        return await response.value();
    }

}
