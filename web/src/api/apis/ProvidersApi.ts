/* tslint:disable */
/* eslint-disable */
/**
 * SubTracker API
 * This api provide HTTPRest endpoints for the application SubTracker.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mistribe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DtoCreateProviderRequest,
  DtoPaginatedResponseModelProviderModel,
  DtoProviderModel,
  DtoUpdateProviderRequest,
  GinxHttpErrorResponse,
} from '../models/index';
import {
    DtoCreateProviderRequestFromJSON,
    DtoCreateProviderRequestToJSON,
    DtoPaginatedResponseModelProviderModelFromJSON,
    DtoPaginatedResponseModelProviderModelToJSON,
    DtoProviderModelFromJSON,
    DtoProviderModelToJSON,
    DtoUpdateProviderRequestFromJSON,
    DtoUpdateProviderRequestToJSON,
    GinxHttpErrorResponseFromJSON,
    GinxHttpErrorResponseToJSON,
} from '../models/index';

export interface ProvidersGetRequest {
    search?: string;
    offset?: number;
    limit?: number;
}

export interface ProvidersPostRequest {
    dtoCreateProviderRequest: DtoCreateProviderRequest;
}

export interface ProvidersProviderIdDeleteRequest {
    providerId: string;
}

export interface ProvidersProviderIdGetRequest {
    providerId: string;
}

export interface ProvidersProviderIdPutRequest {
    providerId: string;
    dtoUpdateProviderRequest: DtoUpdateProviderRequest;
}

/**
 * 
 */
export class ProvidersApi extends runtime.BaseAPI {

    /**
     * Retrieve a paginated list of all providers with their plans and prices
     * Get all providers
     */
    async providersGetRaw(requestParameters: ProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoPaginatedResponseModelProviderModel>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/providers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoPaginatedResponseModelProviderModelFromJSON(jsonValue));
    }

    /**
     * Retrieve a paginated list of all providers with their plans and prices
     * Get all providers
     */
    async providersGet(requestParameters: ProvidersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoPaginatedResponseModelProviderModel> {
        const response = await this.providersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new service provider with labels and owner information
     * Create a new provider
     */
    async providersPostRaw(requestParameters: ProvidersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoProviderModel>> {
        if (requestParameters['dtoCreateProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'dtoCreateProviderRequest',
                'Required parameter "dtoCreateProviderRequest" was null or undefined when calling providersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/providers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DtoCreateProviderRequestToJSON(requestParameters['dtoCreateProviderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoProviderModelFromJSON(jsonValue));
    }

    /**
     * Create a new service provider with labels and owner information
     * Create a new provider
     */
    async providersPost(requestParameters: ProvidersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoProviderModel> {
        const response = await this.providersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Permanently delete a provider and all its associated plans and prices
     * Delete provider by ID
     */
    async providersProviderIdDeleteRaw(requestParameters: ProvidersProviderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling providersProviderIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/providers/{providerId}`;
        urlPath = urlPath.replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Permanently delete a provider and all its associated plans and prices
     * Delete provider by ID
     */
    async providersProviderIdDelete(requestParameters: ProvidersProviderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.providersProviderIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a single provider with all its plans and prices by ID
     * Get provider by ID
     */
    async providersProviderIdGetRaw(requestParameters: ProvidersProviderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoProviderModel>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling providersProviderIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/providers/{providerId}`;
        urlPath = urlPath.replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoProviderModelFromJSON(jsonValue));
    }

    /**
     * Retrieve a single provider with all its plans and prices by ID
     * Get provider by ID
     */
    async providersProviderIdGet(requestParameters: ProvidersProviderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoProviderModel> {
        const response = await this.providersProviderIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing provider\'s basic information
     * Update provider by ID
     */
    async providersProviderIdPutRaw(requestParameters: ProvidersProviderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoProviderModel>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling providersProviderIdPut().'
            );
        }

        if (requestParameters['dtoUpdateProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'dtoUpdateProviderRequest',
                'Required parameter "dtoUpdateProviderRequest" was null or undefined when calling providersProviderIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/providers/{providerId}`;
        urlPath = urlPath.replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DtoUpdateProviderRequestToJSON(requestParameters['dtoUpdateProviderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoProviderModelFromJSON(jsonValue));
    }

    /**
     * Update an existing provider\'s basic information
     * Update provider by ID
     */
    async providersProviderIdPut(requestParameters: ProvidersProviderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoProviderModel> {
        const response = await this.providersProviderIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
