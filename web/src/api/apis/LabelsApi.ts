/* tslint:disable */
/* eslint-disable */
/**
 * SubTracker API
 * This api provide HTTPRest endpoints for the application SubTracker.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mistribe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DtoCreateLabelRequest,
  DtoLabelModel,
  DtoPaginatedResponseModelDtoLabelModel,
  DtoQuotaUsageModel,
  DtoUpdateLabelRequest,
  GinxHttpErrorResponse,
} from '../models/index';
import {
    DtoCreateLabelRequestFromJSON,
    DtoCreateLabelRequestToJSON,
    DtoLabelModelFromJSON,
    DtoLabelModelToJSON,
    DtoPaginatedResponseModelDtoLabelModelFromJSON,
    DtoPaginatedResponseModelDtoLabelModelToJSON,
    DtoQuotaUsageModelFromJSON,
    DtoQuotaUsageModelToJSON,
    DtoUpdateLabelRequestFromJSON,
    DtoUpdateLabelRequestToJSON,
    GinxHttpErrorResponseFromJSON,
    GinxHttpErrorResponseToJSON,
} from '../models/index';

export interface LabelsGetRequest {
    search?: string;
    limit?: number;
    offset?: number;
}

export interface LabelsLabelIdDeleteRequest {
    labelId: string;
}

export interface LabelsLabelIdGetRequest {
    labelId: string;
}

export interface LabelsLabelIdPutRequest {
    labelId: string;
    dtoUpdateLabelRequest: DtoUpdateLabelRequest;
}

export interface LabelsPostRequest {
    dtoCreateLabelRequest: DtoCreateLabelRequest;
}

/**
 * 
 */
export class LabelsApi extends runtime.BaseAPI {

    /**
     * Retrieve a paginated list of labels with optional filtering by owner type and search text
     * Get all labels
     */
    async labelsGetRaw(requestParameters: LabelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoPaginatedResponseModelDtoLabelModel>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/labels`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoPaginatedResponseModelDtoLabelModelFromJSON(jsonValue));
    }

    /**
     * Retrieve a paginated list of labels with optional filtering by owner type and search text
     * Get all labels
     */
    async labelsGet(requestParameters: LabelsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoPaginatedResponseModelDtoLabelModel> {
        const response = await this.labelsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Permanently delete a label by its unique identifier
     * Delete label by LabelID
     */
    async labelsLabelIdDeleteRaw(requestParameters: LabelsLabelIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['labelId'] == null) {
            throw new runtime.RequiredError(
                'labelId',
                'Required parameter "labelId" was null or undefined when calling labelsLabelIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/labels/{labelId}`;
        urlPath = urlPath.replace(`{${"labelId"}}`, encodeURIComponent(String(requestParameters['labelId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Permanently delete a label by its unique identifier
     * Delete label by LabelID
     */
    async labelsLabelIdDelete(requestParameters: LabelsLabelIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.labelsLabelIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a single label by its unique identifier
     * Get label by LabelID
     */
    async labelsLabelIdGetRaw(requestParameters: LabelsLabelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoLabelModel>> {
        if (requestParameters['labelId'] == null) {
            throw new runtime.RequiredError(
                'labelId',
                'Required parameter "labelId" was null or undefined when calling labelsLabelIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/labels/{labelId}`;
        urlPath = urlPath.replace(`{${"labelId"}}`, encodeURIComponent(String(requestParameters['labelId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoLabelModelFromJSON(jsonValue));
    }

    /**
     * Retrieve a single label by its unique identifier
     * Get label by LabelID
     */
    async labelsLabelIdGet(requestParameters: LabelsLabelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoLabelModel> {
        const response = await this.labelsLabelIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing label\'s name and color by its unique identifier
     * Update label by LabelID
     */
    async labelsLabelIdPutRaw(requestParameters: LabelsLabelIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoLabelModel>> {
        if (requestParameters['labelId'] == null) {
            throw new runtime.RequiredError(
                'labelId',
                'Required parameter "labelId" was null or undefined when calling labelsLabelIdPut().'
            );
        }

        if (requestParameters['dtoUpdateLabelRequest'] == null) {
            throw new runtime.RequiredError(
                'dtoUpdateLabelRequest',
                'Required parameter "dtoUpdateLabelRequest" was null or undefined when calling labelsLabelIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/labels/{labelId}`;
        urlPath = urlPath.replace(`{${"labelId"}}`, encodeURIComponent(String(requestParameters['labelId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DtoUpdateLabelRequestToJSON(requestParameters['dtoUpdateLabelRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoLabelModelFromJSON(jsonValue));
    }

    /**
     * Update an existing label\'s name and color by its unique identifier
     * Update label by LabelID
     */
    async labelsLabelIdPut(requestParameters: LabelsLabelIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoLabelModel> {
        const response = await this.labelsLabelIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new label with specified name, color, and owner information
     * Create a new label
     */
    async labelsPostRaw(requestParameters: LabelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoLabelModel>> {
        if (requestParameters['dtoCreateLabelRequest'] == null) {
            throw new runtime.RequiredError(
                'dtoCreateLabelRequest',
                'Required parameter "dtoCreateLabelRequest" was null or undefined when calling labelsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/labels`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DtoCreateLabelRequestToJSON(requestParameters['dtoCreateLabelRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoLabelModelFromJSON(jsonValue));
    }

    /**
     * Create a new label with specified name, color, and owner information
     * Create a new label
     */
    async labelsPost(requestParameters: LabelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoLabelModel> {
        const response = await this.labelsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the current quota usage and limits for the authenticated user
     * Get quota usage
     */
    async labelsQuotaUsageGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DtoQuotaUsageModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/labels/quota/usage`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DtoQuotaUsageModelFromJSON));
    }

    /**
     * Retrieve the current quota usage and limits for the authenticated user
     * Get quota usage
     */
    async labelsQuotaUsageGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DtoQuotaUsageModel>> {
        const response = await this.labelsQuotaUsageGetRaw(initOverrides);
        return await response.value();
    }

}
