/* tslint:disable */
/* eslint-disable */
/**
 * SubTracker API
 * This api provide HTTPRest endpoints for the application SubTracker.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mistribe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DtoUpdatePreferredCurrencyRequest,
  DtoUserPreferredCurrencyModel,
  GinxHttpErrorResponse,
} from '../models/index';
import {
    DtoUpdatePreferredCurrencyRequestFromJSON,
    DtoUpdatePreferredCurrencyRequestToJSON,
    DtoUserPreferredCurrencyModelFromJSON,
    DtoUserPreferredCurrencyModelToJSON,
    GinxHttpErrorResponseFromJSON,
    GinxHttpErrorResponseToJSON,
} from '../models/index';

export interface UsersPreferredCurrencyPutRequest {
    authorization: string;
    dtoUpdatePreferredCurrencyRequest: DtoUpdatePreferredCurrencyRequest;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Deletes the authenticated user\'s account
     * Delete user
     */
    async usersDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the authenticated user\'s account
     * Delete user
     */
    async usersDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersDeleteRaw(initOverrides);
    }

    /**
     * Returns the preferred currency for the authenticated user
     * Get user preferred currency
     */
    async usersPreferredCurrencyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtoUserPreferredCurrencyModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users/preferred/currency`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtoUserPreferredCurrencyModelFromJSON(jsonValue));
    }

    /**
     * Returns the preferred currency for the authenticated user
     * Get user preferred currency
     */
    async usersPreferredCurrencyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtoUserPreferredCurrencyModel> {
        const response = await this.usersPreferredCurrencyGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates the preferred currency for the authenticated user
     * Update user preferred currency
     */
    async usersPreferredCurrencyPutRaw(requestParameters: UsersPreferredCurrencyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling usersPreferredCurrencyPut().'
            );
        }

        if (requestParameters['dtoUpdatePreferredCurrencyRequest'] == null) {
            throw new runtime.RequiredError(
                'dtoUpdatePreferredCurrencyRequest',
                'Required parameter "dtoUpdatePreferredCurrencyRequest" was null or undefined when calling usersPreferredCurrencyPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }


        let urlPath = `/users/preferred/currency`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DtoUpdatePreferredCurrencyRequestToJSON(requestParameters['dtoUpdatePreferredCurrencyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the preferred currency for the authenticated user
     * Update user preferred currency
     */
    async usersPreferredCurrencyPut(requestParameters: UsersPreferredCurrencyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersPreferredCurrencyPutRaw(requestParameters, initOverrides);
    }

}
