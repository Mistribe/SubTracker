/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHttpErrorResponseFromDiscriminatorValue, type HttpErrorResponse } from '../../../../../models/ginx/index.js';
// @ts-ignore
import { createPriceModelFromDiscriminatorValue, serializeCreatePriceModel, serializePriceModel, type CreatePriceModel, type PriceModel } from '../../../../../models/provider/index.js';
// @ts-ignore
import { type WithPriceItemRequestBuilder, WithPriceItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /providers/{providerId}/plans/{planId}/prices
 */
export interface PricesRequestBuilder extends BaseRequestBuilder<PricesRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.providers.item.plans.item.prices.item collection
     * @param priceId Price ID (UUID format)
     * @returns {WithPriceItemRequestBuilder}
     */
     byPriceId(priceId: string) : WithPriceItemRequestBuilder;
    /**
     * Create a new pricing option for a specific provider plan
     * @param body Price information for a plan
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PriceModel>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 404 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     post(body: CreatePriceModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PriceModel | undefined>;
    /**
     * Create a new pricing option for a specific provider plan
     * @param body Price information for a plan
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreatePriceModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const PricesRequestBuilderUriTemplate = "{+baseurl}/providers/{providerId}/plans/{planId}/prices";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PricesRequestBuilderNavigationMetadata: Record<Exclude<keyof PricesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byPriceId: {
        requestsMetadata: WithPriceItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["priceId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PricesRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: PricesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPriceModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreatePriceModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
