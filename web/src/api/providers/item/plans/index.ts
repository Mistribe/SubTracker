/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHttpErrorFromDiscriminatorValue, createPlanModelFromDiscriminatorValue, serializeCreatePlanModel, serializePlanModel, type CreatePlanModel, type HttpError, type PlanModel } from '../../../models/index.js';
// @ts-ignore
import { type WithPlanItemRequestBuilder, WithPlanItemRequestBuilderNavigationMetadata, WithPlanItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /providers/{providerId}/plans
 */
export interface PlansRequestBuilder extends BaseRequestBuilder<PlansRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.providers.item.plans.item collection
     * @param planId Plan ID (UUID format)
     * @returns {WithPlanItemRequestBuilder}
     */
     byPlanId(planId: string) : WithPlanItemRequestBuilder;
    /**
     * Create a new subscription plan for an existing provider
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PlanModel>}
     * @throws {HttpError} error when the service returns a 400 status code
     * @throws {HttpError} error when the service returns a 404 status code
     * @throws {HttpError} error when the service returns a 500 status code
     */
     post(body: CreatePlanModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PlanModel | undefined>;
    /**
     * Create a new subscription plan for an existing provider
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreatePlanModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const PlansRequestBuilderUriTemplate = "{+baseurl}/providers/{providerId}/plans";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PlansRequestBuilderNavigationMetadata: Record<Exclude<keyof PlansRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byPlanId: {
        requestsMetadata: WithPlanItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithPlanItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["planId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PlansRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: PlansRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPlanModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreatePlanModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
