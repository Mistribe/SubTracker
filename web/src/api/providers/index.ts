/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createPaginatedResponseModelProvider_ProviderModelFromDiscriminatorValue, type PaginatedResponseModelProvider_ProviderModel } from '../models/dto/index.js';
// @ts-ignore
import { createHttpErrorResponseFromDiscriminatorValue, type HttpErrorResponse } from '../models/ginx/index.js';
// @ts-ignore
import { createProviderModelFromDiscriminatorValue, serializeCreateProviderModel, serializeProviderModel, type CreateProviderModel, type ProviderModel } from '../models/provider/index.js';
// @ts-ignore
import { type WithProviderItemRequestBuilder, WithProviderItemRequestBuilderNavigationMetadata, WithProviderItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /providers
 */
export interface ProvidersRequestBuilder extends BaseRequestBuilder<ProvidersRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.providers.item collection
     * @param providerId Provider ID (UUID format)
     * @returns {WithProviderItemRequestBuilder}
     */
     byProviderId(providerId: string) : WithProviderItemRequestBuilder;
    /**
     * Retrieve a paginated list of all providers with their plans and prices
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PaginatedResponseModelProvider_ProviderModel>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<ProvidersRequestBuilderGetQueryParameters> | undefined) : Promise<PaginatedResponseModelProvider_ProviderModel | undefined>;
    /**
     * Create a new service provider with labels and owner information
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ProviderModel>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 401 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     post(body: CreateProviderModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ProviderModel | undefined>;
    /**
     * Retrieve a paginated list of all providers with their plans and prices
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ProvidersRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new service provider with labels and owner information
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateProviderModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve a paginated list of all providers with their plans and prices
 */
export interface ProvidersRequestBuilderGetQueryParameters {
    /**
     * Limit per request (default: 10)
     */
    limit?: number;
    /**
     * Offset (default: 0)
     */
    offset?: number;
    /**
     * Search term
     */
    search?: string;
}
/**
 * Uri template for the request builder.
 */
export const ProvidersRequestBuilderUriTemplate = "{+baseurl}/providers{?limit*,offset*,search*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ProvidersRequestBuilderNavigationMetadata: Record<Exclude<keyof ProvidersRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byProviderId: {
        requestsMetadata: WithProviderItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithProviderItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["providerId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ProvidersRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ProvidersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPaginatedResponseModelProvider_ProviderModelFromDiscriminatorValue,
    },
    post: {
        uriTemplate: ProvidersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createProviderModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateProviderModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
