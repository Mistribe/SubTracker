/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createFamilySeeInvitationResponseFromDiscriminatorValue, createHttpErrorResponseFromDiscriminatorValue, type FamilySeeInvitationResponse, type HttpErrorResponse } from '../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /families/{familyId}/invitation
 */
export interface InvitationRequestBuilder extends BaseRequestBuilder<InvitationRequestBuilder> {
    /**
     * Get information about a family invitation using invitation code
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FamilySeeInvitationResponse>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     */
     get(requestConfiguration?: RequestConfiguration<InvitationRequestBuilderGetQueryParameters> | undefined) : Promise<FamilySeeInvitationResponse | undefined>;
    /**
     * Get information about a family invitation using invitation code
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<InvitationRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get information about a family invitation using invitation code
 */
export interface InvitationRequestBuilderGetQueryParameters {
    /**
     * Invitation code
     */
    code?: string;
    /**
     * Family member ID
     */
    familyMemberId?: string;
}
/**
 * Uri template for the request builder.
 */
export const InvitationRequestBuilderUriTemplate = "{+baseurl}/families/{familyId}/invitation?code={code}&family_member_id={family_member_id}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const InvitationRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "familyMemberId": "family_member_id",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const InvitationRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: InvitationRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFamilySeeInvitationResponseFromDiscriminatorValue,
        queryParametersMapper: InvitationRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
