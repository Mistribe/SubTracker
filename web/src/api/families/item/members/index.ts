/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createFamilyModelFromDiscriminatorValue, createHttpErrorFromDiscriminatorValue, serializeCreateFamilyMemberModel, serializeFamilyModel, type CreateFamilyMemberModel, type FamilyModel, type HttpError } from '../../../models/index.js';
// @ts-ignore
import { MembersItemRequestBuilderRequestsMetadata, type MembersItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /families/{familyId}/members
 */
export interface MembersRequestBuilder extends BaseRequestBuilder<MembersRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.families.item.members.item collection
     * @param id Family member ID (UUID format)
     * @returns {MembersItemRequestBuilder}
     */
     byId(id: string) : MembersItemRequestBuilder;
    /**
     * Add a new member to an existing family
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FamilyModel>}
     * @throws {HttpError} error when the service returns a 400 status code
     * @throws {HttpError} error when the service returns a 401 status code
     * @throws {HttpError} error when the service returns a 404 status code
     * @throws {HttpError} error when the service returns a 500 status code
     */
     post(body: CreateFamilyMemberModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<FamilyModel | undefined>;
    /**
     * Add a new member to an existing family
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateFamilyMemberModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const MembersRequestBuilderUriTemplate = "{+baseurl}/families/{familyId}/members";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const MembersRequestBuilderNavigationMetadata: Record<Exclude<keyof MembersRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: MembersItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const MembersRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: MembersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFamilyModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateFamilyMemberModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
