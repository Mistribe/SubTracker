/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createFamilyModelFromDiscriminatorValue, createHttpErrorFromDiscriminatorValue, serializeFamilyModel, serializeUpdateFamilyMemberModel, type FamilyModel, type HttpError, type UpdateFamilyMemberModel } from '../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /families/{familyId}/members/{id}
 */
export interface MembersItemRequestBuilder extends BaseRequestBuilder<MembersItemRequestBuilder> {
    /**
     * Delete family member by ID
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {HttpError} error when the service returns a 400 status code
     * @throws {HttpError} error when the service returns a 404 status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Update family member by ID
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FamilyModel>}
     * @throws {HttpError} error when the service returns a 400 status code
     * @throws {HttpError} error when the service returns a 404 status code
     */
     put(body: UpdateFamilyMemberModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<FamilyModel | undefined>;
    /**
     * Delete family member by ID
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Update family member by ID
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdateFamilyMemberModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const MembersItemRequestBuilderUriTemplate = "{+baseurl}/families/{familyId}/members/{id}";
/**
 * Metadata for all the requests in the request builder.
 */
export const MembersItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: MembersItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    put: {
        uriTemplate: MembersItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFamilyModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdateFamilyMemberModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
