/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createFamilyModelFromDiscriminatorValue, serializeFamilyModel, serializeUpdateFamilyMemberModel, type FamilyModel, type UpdateFamilyMemberModel } from '../../../../models/family/index.js';
// @ts-ignore
import { createHttpErrorResponseFromDiscriminatorValue, type HttpErrorResponse } from '../../../../models/ginx/index.js';
// @ts-ignore
import { RevokeRequestBuilderRequestsMetadata, type RevokeRequestBuilder } from './revoke/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /families/{familyId}/members/{familyMember-id}
 */
export interface FamilyMemberItemRequestBuilder extends BaseRequestBuilder<FamilyMemberItemRequestBuilder> {
    /**
     * The revoke property
     */
    get revoke(): RevokeRequestBuilder;
    /**
     * Permanently delete a family member from a family
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 404 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Update an existing family member's information such as name and kid status
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FamilyModel>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 401 status code
     * @throws {HttpErrorResponse} error when the service returns a 404 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     put(body: UpdateFamilyMemberModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<FamilyModel | undefined>;
    /**
     * Permanently delete a family member from a family
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Update an existing family member's information such as name and kid status
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdateFamilyMemberModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const FamilyMemberItemRequestBuilderUriTemplate = "{+baseurl}/families/{familyId}/members/{familyMember%2Did}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const FamilyMemberItemRequestBuilderNavigationMetadata: Record<Exclude<keyof FamilyMemberItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    revoke: {
        requestsMetadata: RevokeRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const FamilyMemberItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: FamilyMemberItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    put: {
        uriTemplate: FamilyMemberItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFamilyModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdateFamilyMemberModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
