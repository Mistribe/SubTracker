/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createFamilyModelFromDiscriminatorValue, createHttpErrorResponseFromDiscriminatorValue, serializeFamilyModel, serializeUpdateFamilyModel, type FamilyModel, type HttpErrorResponse, type UpdateFamilyModel } from '../../models/index.js';
// @ts-ignore
import { AcceptRequestBuilderRequestsMetadata, type AcceptRequestBuilder } from './accept/index.js';
// @ts-ignore
import { InviteRequestBuilderRequestsMetadata, type InviteRequestBuilder } from './invite/index.js';
// @ts-ignore
import { MembersRequestBuilderNavigationMetadata, MembersRequestBuilderRequestsMetadata, type MembersRequestBuilder } from './members/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /families/{familyId}
 */
export interface WithFamilyItemRequestBuilder extends BaseRequestBuilder<WithFamilyItemRequestBuilder> {
    /**
     * The accept property
     */
    get accept(): AcceptRequestBuilder;
    /**
     * The invite property
     */
    get invite(): InviteRequestBuilder;
    /**
     * The members property
     */
    get members(): MembersRequestBuilder;
    /**
     * Permanently delete a family and all its members
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 404 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Update family information such as name and other details
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FamilyModel>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 401 status code
     * @throws {HttpErrorResponse} error when the service returns a 404 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     put(body: UpdateFamilyModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<FamilyModel | undefined>;
    /**
     * Permanently delete a family and all its members
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Update family information such as name and other details
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdateFamilyModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithFamilyItemRequestBuilderUriTemplate = "{+baseurl}/families/{familyId}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithFamilyItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithFamilyItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    accept: {
        requestsMetadata: AcceptRequestBuilderRequestsMetadata,
    },
    invite: {
        requestsMetadata: InviteRequestBuilderRequestsMetadata,
    },
    members: {
        requestsMetadata: MembersRequestBuilderRequestsMetadata,
        navigationMetadata: MembersRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithFamilyItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithFamilyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    put: {
        uriTemplate: WithFamilyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFamilyModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdateFamilyModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
