/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createFamilyModelFromDiscriminatorValue, createHttpErrorResponseFromDiscriminatorValue, createPaginatedResponseModelEndpoints_familyModelFromDiscriminatorValue, serializeCreateFamilyModel, serializeFamilyModel, serializePatchFamilyModel, type CreateFamilyModel, type FamilyModel, type HttpErrorResponse, type PaginatedResponseModelEndpoints_familyModel, type PatchFamilyModel } from '../models/index.js';
// @ts-ignore
import { type WithFamilyItemRequestBuilder, WithFamilyItemRequestBuilderNavigationMetadata, WithFamilyItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /families
 */
export interface FamiliesRequestBuilder extends BaseRequestBuilder<FamiliesRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.families.item collection
     * @param familyId Family ID (UUID format)
     * @returns {WithFamilyItemRequestBuilder}
     */
     byFamilyId(familyId: string) : WithFamilyItemRequestBuilder;
    /**
     * Retrieve a paginated list of families for the authenticated user
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PaginatedResponseModelEndpoints_familyModel>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 401 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<FamiliesRequestBuilderGetQueryParameters> | undefined) : Promise<PaginatedResponseModelEndpoints_familyModel | undefined>;
    /**
     * Update or create a family with specified members. If family doesn't exist, it will be created.
     * @param body Model for updating family details
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FamilyModel>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 401 status code
     * @throws {HttpErrorResponse} error when the service returns a 404 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     patch(body: PatchFamilyModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<FamilyModel | undefined>;
    /**
     * Create a new family with the authenticated user as the owner and initial member
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FamilyModel>}
     * @throws {HttpErrorResponse} error when the service returns a 400 status code
     * @throws {HttpErrorResponse} error when the service returns a 401 status code
     * @throws {HttpErrorResponse} error when the service returns a 500 status code
     */
     post(body: CreateFamilyModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<FamilyModel | undefined>;
    /**
     * Retrieve a paginated list of families for the authenticated user
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<FamiliesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update or create a family with specified members. If family doesn't exist, it will be created.
     * @param body Model for updating family details
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: PatchFamilyModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Create a new family with the authenticated user as the owner and initial member
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateFamilyModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve a paginated list of families for the authenticated user
 */
export interface FamiliesRequestBuilderGetQueryParameters {
    /**
     * Number of items per page (default: 10)
     */
    limit?: number;
    /**
     * Page number (default: 1)
     */
    offset?: number;
}
/**
 * Uri template for the request builder.
 */
export const FamiliesRequestBuilderUriTemplate = "{+baseurl}/families{?limit*,offset*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const FamiliesRequestBuilderNavigationMetadata: Record<Exclude<keyof FamiliesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byFamilyId: {
        requestsMetadata: WithFamilyItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithFamilyItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["familyId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const FamiliesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: FamiliesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPaginatedResponseModelEndpoints_familyModelFromDiscriminatorValue,
    },
    patch: {
        uriTemplate: FamiliesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFamilyModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePatchFamilyModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    post: {
        uriTemplate: FamiliesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createHttpErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFamilyModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateFamilyModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
