// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package label

import (
	"context"

	"github.com/google/uuid"
	"github.com/mistribe/subtracker/internal/domain/label"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockRepository
func (_mock *MockRepository) Delete(ctx context.Context, entityId uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, entityId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, entityId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, entityId)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, entityId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - entityId uuid.UUID
func (_e *MockRepository_Expecter) Delete(ctx interface{}, entityId interface{}) *MockRepository_Delete_Call {
	return &MockRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, entityId)}
}

func (_c *MockRepository_Delete_Call) Run(run func(ctx context.Context, entityId uuid.UUID)) *MockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Delete_Call) Return(b bool, err error) *MockRepository_Delete_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, entityId uuid.UUID) (bool, error)) *MockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockRepository
func (_mock *MockRepository) Exists(ctx context.Context, ids ...uuid.UUID) (bool, error) {
	var tmpRet mock.Arguments
	if len(ids) > 0 {
		tmpRet = _mock.Called(ctx, ids)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, ids...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, ids...)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...uuid.UUID) error); ok {
		r1 = returnFunc(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...uuid.UUID
func (_e *MockRepository_Expecter) Exists(ctx interface{}, ids ...interface{}) *MockRepository_Exists_Call {
	return &MockRepository_Exists_Call{Call: _e.mock.On("Exists",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *MockRepository_Exists_Call) Run(run func(ctx context.Context, ids ...uuid.UUID)) *MockRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []uuid.UUID
		var variadicArgs []uuid.UUID
		if len(args) > 1 {
			variadicArgs = args[1].([]uuid.UUID)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockRepository_Exists_Call) Return(b bool, err error) *MockRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepository_Exists_Call) RunAndReturn(run func(ctx context.Context, ids ...uuid.UUID) (bool, error)) *MockRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockRepository
func (_mock *MockRepository) GetAll(ctx context.Context, parameters label.QueryParameters) ([]label.Label, error) {
	ret := _mock.Called(ctx, parameters)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []label.Label
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, label.QueryParameters) ([]label.Label, error)); ok {
		return returnFunc(ctx, parameters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, label.QueryParameters) []label.Label); ok {
		r0 = returnFunc(ctx, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]label.Label)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, label.QueryParameters) error); ok {
		r1 = returnFunc(ctx, parameters)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - parameters label.QueryParameters
func (_e *MockRepository_Expecter) GetAll(ctx interface{}, parameters interface{}) *MockRepository_GetAll_Call {
	return &MockRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, parameters)}
}

func (_c *MockRepository_GetAll_Call) Run(run func(ctx context.Context, parameters label.QueryParameters)) *MockRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 label.QueryParameters
		if args[1] != nil {
			arg1 = args[1].(label.QueryParameters)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetAll_Call) Return(labels []label.Label, err error) *MockRepository_GetAll_Call {
	_c.Call.Return(labels, err)
	return _c
}

func (_c *MockRepository_GetAll_Call) RunAndReturn(run func(ctx context.Context, parameters label.QueryParameters) ([]label.Label, error)) *MockRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCount provides a mock function for the type MockRepository
func (_mock *MockRepository) GetAllCount(ctx context.Context, parameters label.QueryParameters) (int64, error) {
	ret := _mock.Called(ctx, parameters)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCount")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, label.QueryParameters) (int64, error)); ok {
		return returnFunc(ctx, parameters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, label.QueryParameters) int64); ok {
		r0 = returnFunc(ctx, parameters)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, label.QueryParameters) error); ok {
		r1 = returnFunc(ctx, parameters)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetAllCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCount'
type MockRepository_GetAllCount_Call struct {
	*mock.Call
}

// GetAllCount is a helper method to define mock.On call
//   - ctx context.Context
//   - parameters label.QueryParameters
func (_e *MockRepository_Expecter) GetAllCount(ctx interface{}, parameters interface{}) *MockRepository_GetAllCount_Call {
	return &MockRepository_GetAllCount_Call{Call: _e.mock.On("GetAllCount", ctx, parameters)}
}

func (_c *MockRepository_GetAllCount_Call) Run(run func(ctx context.Context, parameters label.QueryParameters)) *MockRepository_GetAllCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 label.QueryParameters
		if args[1] != nil {
			arg1 = args[1].(label.QueryParameters)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetAllCount_Call) Return(n int64, err error) *MockRepository_GetAllCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepository_GetAllCount_Call) RunAndReturn(run func(ctx context.Context, parameters label.QueryParameters) (int64, error)) *MockRepository_GetAllCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function for the type MockRepository
func (_mock *MockRepository) GetById(ctx context.Context, entityId uuid.UUID) (label.Label, error) {
	ret := _mock.Called(ctx, entityId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 label.Label
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (label.Label, error)); ok {
		return returnFunc(ctx, entityId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) label.Label); ok {
		r0 = returnFunc(ctx, entityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(label.Label)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, entityId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - entityId uuid.UUID
func (_e *MockRepository_Expecter) GetById(ctx interface{}, entityId interface{}) *MockRepository_GetById_Call {
	return &MockRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, entityId)}
}

func (_c *MockRepository_GetById_Call) Run(run func(ctx context.Context, entityId uuid.UUID)) *MockRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetById_Call) Return(label1 label.Label, err error) *MockRepository_GetById_Call {
	_c.Call.Return(label1, err)
	return _c
}

func (_c *MockRepository_GetById_Call) RunAndReturn(run func(ctx context.Context, entityId uuid.UUID) (label.Label, error)) *MockRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaults provides a mock function for the type MockRepository
func (_mock *MockRepository) GetSystemLabels(ctx context.Context) ([]label.Label, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemLabels")
	}

	var r0 []label.Label
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]label.Label, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []label.Label); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]label.Label)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetDefaults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemLabels'
type MockRepository_GetDefaults_Call struct {
	*mock.Call
}

// GetDefaults is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) GetDefaults(ctx interface{}) *MockRepository_GetDefaults_Call {
	return &MockRepository_GetDefaults_Call{Call: _e.mock.On("GetSystemLabels", ctx)}
}

func (_c *MockRepository_GetDefaults_Call) Run(run func(ctx context.Context)) *MockRepository_GetDefaults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_GetDefaults_Call) Return(labels []label.Label, err error) *MockRepository_GetDefaults_Call {
	_c.Call.Return(labels, err)
	return _c
}

func (_c *MockRepository_GetDefaults_Call) RunAndReturn(run func(ctx context.Context) ([]label.Label, error)) *MockRepository_GetDefaults_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockRepository
func (_mock *MockRepository) Save(ctx context.Context, entity label.Label) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, label.Label) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - entity label.Label
func (_e *MockRepository_Expecter) Save(ctx interface{}, entity interface{}) *MockRepository_Save_Call {
	return &MockRepository_Save_Call{Call: _e.mock.On("Save", ctx, entity)}
}

func (_c *MockRepository_Save_Call) Run(run func(ctx context.Context, entity label.Label)) *MockRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 label.Label
		if args[1] != nil {
			arg1 = args[1].(label.Label)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Save_Call) Return(err error) *MockRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Save_Call) RunAndReturn(run func(ctx context.Context, entity label.Label) error) *MockRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
