// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package currency

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// ConvertTo provides a mock function for the type MockService
func (_mock *MockService) ConvertTo(ctx context.Context, from Amount, to Unit) (Amount, error) {
	ret := _mock.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for ConvertTo")
	}

	var r0 Amount
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, Amount, Unit) (Amount, error)); ok {
		return returnFunc(ctx, from, to)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, Amount, Unit) Amount); ok {
		r0 = returnFunc(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Amount)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, Amount, Unit) error); ok {
		r1 = returnFunc(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ConvertTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertTo'
type MockService_ConvertTo_Call struct {
	*mock.Call
}

// ConvertTo is a helper method to define mock.On call
//   - ctx context.Context
//   - from Amount
//   - to Unit
func (_e *MockService_Expecter) ConvertTo(ctx interface{}, from interface{}, to interface{}) *MockService_ConvertTo_Call {
	return &MockService_ConvertTo_Call{Call: _e.mock.On("ConvertTo", ctx, from, to)}
}

func (_c *MockService_ConvertTo_Call) Run(run func(ctx context.Context, from Amount, to Unit)) *MockService_ConvertTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 Amount
		if args[1] != nil {
			arg1 = args[1].(Amount)
		}
		var arg2 Unit
		if args[2] != nil {
			arg2 = args[2].(Unit)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockService_ConvertTo_Call) Return(amount Amount, err error) *MockService_ConvertTo_Call {
	_c.Call.Return(amount, err)
	return _c
}

func (_c *MockService_ConvertTo_Call) RunAndReturn(run func(ctx context.Context, from Amount, to Unit) (Amount, error)) *MockService_ConvertTo_Call {
	_c.Call.Return(run)
	return _c
}
