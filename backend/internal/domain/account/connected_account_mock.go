// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package account

import (
	"github.com/mistribe/subtracker/internal/domain/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConnectedAccount creates a new instance of MockConnectedAccount. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectedAccount(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectedAccount {
	mock := &MockConnectedAccount{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConnectedAccount is an autogenerated mock type for the ConnectedAccount type
type MockConnectedAccount struct {
	mock.Mock
}

type MockConnectedAccount_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectedAccount) EXPECT() *MockConnectedAccount_Expecter {
	return &MockConnectedAccount_Expecter{mock: &_m.Mock}
}

// PlanID provides a mock function for the type MockConnectedAccount
func (_mock *MockConnectedAccount) PlanID() types.PlanID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PlanID")
	}

	var r0 types.PlanID
	if returnFunc, ok := ret.Get(0).(func() types.PlanID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(types.PlanID)
	}
	return r0
}

// MockConnectedAccount_PlanID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlanID'
type MockConnectedAccount_PlanID_Call struct {
	*mock.Call
}

// PlanID is a helper method to define mock.On call
func (_e *MockConnectedAccount_Expecter) PlanID() *MockConnectedAccount_PlanID_Call {
	return &MockConnectedAccount_PlanID_Call{Call: _e.mock.On("PlanID")}
}

func (_c *MockConnectedAccount_PlanID_Call) Run(run func()) *MockConnectedAccount_PlanID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectedAccount_PlanID_Call) Return(planID types.PlanID) *MockConnectedAccount_PlanID_Call {
	_c.Call.Return(planID)
	return _c
}

func (_c *MockConnectedAccount_PlanID_Call) RunAndReturn(run func() types.PlanID) *MockConnectedAccount_PlanID_Call {
	_c.Call.Return(run)
	return _c
}

// Role provides a mock function for the type MockConnectedAccount
func (_mock *MockConnectedAccount) Role() types.Role {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Role")
	}

	var r0 types.Role
	if returnFunc, ok := ret.Get(0).(func() types.Role); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(types.Role)
	}
	return r0
}

// MockConnectedAccount_Role_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Role'
type MockConnectedAccount_Role_Call struct {
	*mock.Call
}

// Role is a helper method to define mock.On call
func (_e *MockConnectedAccount_Expecter) Role() *MockConnectedAccount_Role_Call {
	return &MockConnectedAccount_Role_Call{Call: _e.mock.On("Role")}
}

func (_c *MockConnectedAccount_Role_Call) Run(run func()) *MockConnectedAccount_Role_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectedAccount_Role_Call) Return(role types.Role) *MockConnectedAccount_Role_Call {
	_c.Call.Return(role)
	return _c
}

func (_c *MockConnectedAccount_Role_Call) RunAndReturn(run func() types.Role) *MockConnectedAccount_Role_Call {
	_c.Call.Return(run)
	return _c
}

// UserID provides a mock function for the type MockConnectedAccount
func (_mock *MockConnectedAccount) UserID() types.UserID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserID")
	}

	var r0 types.UserID
	if returnFunc, ok := ret.Get(0).(func() types.UserID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(types.UserID)
	}
	return r0
}

// MockConnectedAccount_UserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserID'
type MockConnectedAccount_UserID_Call struct {
	*mock.Call
}

// UserID is a helper method to define mock.On call
func (_e *MockConnectedAccount_Expecter) UserID() *MockConnectedAccount_UserID_Call {
	return &MockConnectedAccount_UserID_Call{Call: _e.mock.On("UserID")}
}

func (_c *MockConnectedAccount_UserID_Call) Run(run func()) *MockConnectedAccount_UserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectedAccount_UserID_Call) Return(userID types.UserID) *MockConnectedAccount_UserID_Call {
	_c.Call.Return(userID)
	return _c
}

func (_c *MockConnectedAccount_UserID_Call) RunAndReturn(run func() types.UserID) *MockConnectedAccount_UserID_Call {
	_c.Call.Return(run)
	return _c
}
