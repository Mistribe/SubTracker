// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package user

import (
	"context"

	"github.com/google/uuid"
	"github.com/mistribe/subtracker/internal/domain/currency"
	"github.com/mistribe/subtracker/internal/domain/user"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// GetUserFamilies provides a mock function for the type MockRepository
func (_mock *MockRepository) GetUserFamilies(ctx context.Context, userId string) ([]uuid.UUID, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserFamilies")
	}

	var r0 []uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]uuid.UUID, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []uuid.UUID); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetUserFamilies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserFamilies'
type MockRepository_GetUserFamilies_Call struct {
	*mock.Call
}

// GetUserFamilies is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockRepository_Expecter) GetUserFamilies(ctx interface{}, userId interface{}) *MockRepository_GetUserFamilies_Call {
	return &MockRepository_GetUserFamilies_Call{Call: _e.mock.On("GetUserFamilies", ctx, userId)}
}

func (_c *MockRepository_GetUserFamilies_Call) Run(run func(ctx context.Context, userId string)) *MockRepository_GetUserFamilies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetUserFamilies_Call) Return(uUIDs []uuid.UUID, err error) *MockRepository_GetUserFamilies_Call {
	_c.Call.Return(uUIDs, err)
	return _c
}

func (_c *MockRepository_GetUserFamilies_Call) RunAndReturn(run func(ctx context.Context, userId string) ([]uuid.UUID, error)) *MockRepository_GetUserFamilies_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserProfile provides a mock function for the type MockRepository
func (_mock *MockRepository) GetUserProfile(ctx context.Context, userId string) (user.Profile, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfile")
	}

	var r0 user.Profile
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (user.Profile, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) user.Profile); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user.Profile)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetUserProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserProfile'
type MockRepository_GetUserProfile_Call struct {
	*mock.Call
}

// GetUserProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockRepository_Expecter) GetUserProfile(ctx interface{}, userId interface{}) *MockRepository_GetUserProfile_Call {
	return &MockRepository_GetUserProfile_Call{Call: _e.mock.On("GetUserProfile", ctx, userId)}
}

func (_c *MockRepository_GetUserProfile_Call) Run(run func(ctx context.Context, userId string)) *MockRepository_GetUserProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetUserProfile_Call) Return(profile user.Profile, err error) *MockRepository_GetUserProfile_Call {
	_c.Call.Return(profile, err)
	return _c
}

func (_c *MockRepository_GetUserProfile_Call) RunAndReturn(run func(ctx context.Context, userId string) (user.Profile, error)) *MockRepository_GetUserProfile_Call {
	_c.Call.Return(run)
	return _c
}

// SaveProfile provides a mock function for the type MockRepository
func (_mock *MockRepository) SaveProfile(ctx context.Context, profile user.Profile) error {
	ret := _mock.Called(ctx, profile)

	if len(ret) == 0 {
		panic("no return value specified for SaveProfile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, user.Profile) error); ok {
		r0 = returnFunc(ctx, profile)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_SaveProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveProfile'
type MockRepository_SaveProfile_Call struct {
	*mock.Call
}

// SaveProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - profile user.Profile
func (_e *MockRepository_Expecter) SaveProfile(ctx interface{}, profile interface{}) *MockRepository_SaveProfile_Call {
	return &MockRepository_SaveProfile_Call{Call: _e.mock.On("SaveProfile", ctx, profile)}
}

func (_c *MockRepository_SaveProfile_Call) Run(run func(ctx context.Context, profile user.Profile)) *MockRepository_SaveProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 user.Profile
		if args[1] != nil {
			arg1 = args[1].(user.Profile)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_SaveProfile_Call) Return(err error) *MockRepository_SaveProfile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_SaveProfile_Call) RunAndReturn(run func(ctx context.Context, profile user.Profile) error) *MockRepository_SaveProfile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GetPreferredCurrency provides a mock function for the type MockService
func (_mock *MockService) GetPreferredCurrency(ctx context.Context, userId string) currency.Unit {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetPreferredCurrency")
	}

	var r0 currency.Unit
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) currency.Unit); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		r0 = ret.Get(0).(currency.Unit)
	}
	return r0
}

// MockService_GetPreferredCurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreferredCurrency'
type MockService_GetPreferredCurrency_Call struct {
	*mock.Call
}

// GetPreferredCurrency is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockService_Expecter) GetPreferredCurrency(ctx interface{}, userId interface{}) *MockService_GetPreferredCurrency_Call {
	return &MockService_GetPreferredCurrency_Call{Call: _e.mock.On("GetPreferredCurrency", ctx, userId)}
}

func (_c *MockService_GetPreferredCurrency_Call) Run(run func(ctx context.Context, userId string)) *MockService_GetPreferredCurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_GetPreferredCurrency_Call) Return(v currency.Unit) *MockService_GetPreferredCurrency_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockService_GetPreferredCurrency_Call) RunAndReturn(run func(ctx context.Context, userId string) currency.Unit) *MockService_GetPreferredCurrency_Call {
	_c.Call.Return(run)
	return _c
}
