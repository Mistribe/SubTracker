/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserRequest{}

// UpdateUserRequest struct for UpdateUserRequest
type UpdateUserRequest struct {
	// User's first name.
	GivenName *string `json:"given_name,omitempty"`
	// User's last name.
	FamilyName *string `json:"family_name,omitempty"`
	// The user's profile picture.
	Picture *string `json:"picture,omitempty"`
	// Whether the user is currently suspended or not.
	IsSuspended *bool `json:"is_suspended,omitempty"`
	// Prompt the user to change their password on next sign in.
	IsPasswordResetRequested *bool `json:"is_password_reset_requested,omitempty"`
	// An external id to reference the user.
	ProvidedId *string `json:"provided_id,omitempty"`
}

// NewUpdateUserRequest instantiates a new UpdateUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserRequest() *UpdateUserRequest {
	this := UpdateUserRequest{}
	return &this
}

// NewUpdateUserRequestWithDefaults instantiates a new UpdateUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserRequestWithDefaults() *UpdateUserRequest {
	this := UpdateUserRequest{}
	return &this
}

// GetGivenName returns the GivenName field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetGivenName() string {
	if o == nil || IsNil(o.GivenName) {
		var ret string
		return ret
	}
	return *o.GivenName
}

// GetGivenNameOk returns a tuple with the GivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetGivenNameOk() (*string, bool) {
	if o == nil || IsNil(o.GivenName) {
		return nil, false
	}
	return o.GivenName, true
}

// HasGivenName returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasGivenName() bool {
	if o != nil && !IsNil(o.GivenName) {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given string and assigns it to the GivenName field.
func (o *UpdateUserRequest) SetGivenName(v string) {
	o.GivenName = &v
}

// GetFamilyName returns the FamilyName field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetFamilyName() string {
	if o == nil || IsNil(o.FamilyName) {
		var ret string
		return ret
	}
	return *o.FamilyName
}

// GetFamilyNameOk returns a tuple with the FamilyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetFamilyNameOk() (*string, bool) {
	if o == nil || IsNil(o.FamilyName) {
		return nil, false
	}
	return o.FamilyName, true
}

// HasFamilyName returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasFamilyName() bool {
	if o != nil && !IsNil(o.FamilyName) {
		return true
	}

	return false
}

// SetFamilyName gets a reference to the given string and assigns it to the FamilyName field.
func (o *UpdateUserRequest) SetFamilyName(v string) {
	o.FamilyName = &v
}

// GetPicture returns the Picture field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetPicture() string {
	if o == nil || IsNil(o.Picture) {
		var ret string
		return ret
	}
	return *o.Picture
}

// GetPictureOk returns a tuple with the Picture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetPictureOk() (*string, bool) {
	if o == nil || IsNil(o.Picture) {
		return nil, false
	}
	return o.Picture, true
}

// HasPicture returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasPicture() bool {
	if o != nil && !IsNil(o.Picture) {
		return true
	}

	return false
}

// SetPicture gets a reference to the given string and assigns it to the Picture field.
func (o *UpdateUserRequest) SetPicture(v string) {
	o.Picture = &v
}

// GetIsSuspended returns the IsSuspended field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetIsSuspended() bool {
	if o == nil || IsNil(o.IsSuspended) {
		var ret bool
		return ret
	}
	return *o.IsSuspended
}

// GetIsSuspendedOk returns a tuple with the IsSuspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetIsSuspendedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuspended) {
		return nil, false
	}
	return o.IsSuspended, true
}

// HasIsSuspended returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasIsSuspended() bool {
	if o != nil && !IsNil(o.IsSuspended) {
		return true
	}

	return false
}

// SetIsSuspended gets a reference to the given bool and assigns it to the IsSuspended field.
func (o *UpdateUserRequest) SetIsSuspended(v bool) {
	o.IsSuspended = &v
}

// GetIsPasswordResetRequested returns the IsPasswordResetRequested field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetIsPasswordResetRequested() bool {
	if o == nil || IsNil(o.IsPasswordResetRequested) {
		var ret bool
		return ret
	}
	return *o.IsPasswordResetRequested
}

// GetIsPasswordResetRequestedOk returns a tuple with the IsPasswordResetRequested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetIsPasswordResetRequestedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPasswordResetRequested) {
		return nil, false
	}
	return o.IsPasswordResetRequested, true
}

// HasIsPasswordResetRequested returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasIsPasswordResetRequested() bool {
	if o != nil && !IsNil(o.IsPasswordResetRequested) {
		return true
	}

	return false
}

// SetIsPasswordResetRequested gets a reference to the given bool and assigns it to the IsPasswordResetRequested field.
func (o *UpdateUserRequest) SetIsPasswordResetRequested(v bool) {
	o.IsPasswordResetRequested = &v
}

// GetProvidedId returns the ProvidedId field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetProvidedId() string {
	if o == nil || IsNil(o.ProvidedId) {
		var ret string
		return ret
	}
	return *o.ProvidedId
}

// GetProvidedIdOk returns a tuple with the ProvidedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetProvidedIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProvidedId) {
		return nil, false
	}
	return o.ProvidedId, true
}

// HasProvidedId returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasProvidedId() bool {
	if o != nil && !IsNil(o.ProvidedId) {
		return true
	}

	return false
}

// SetProvidedId gets a reference to the given string and assigns it to the ProvidedId field.
func (o *UpdateUserRequest) SetProvidedId(v string) {
	o.ProvidedId = &v
}

func (o UpdateUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GivenName) {
		toSerialize["given_name"] = o.GivenName
	}
	if !IsNil(o.FamilyName) {
		toSerialize["family_name"] = o.FamilyName
	}
	if !IsNil(o.Picture) {
		toSerialize["picture"] = o.Picture
	}
	if !IsNil(o.IsSuspended) {
		toSerialize["is_suspended"] = o.IsSuspended
	}
	if !IsNil(o.IsPasswordResetRequested) {
		toSerialize["is_password_reset_requested"] = o.IsPasswordResetRequested
	}
	if !IsNil(o.ProvidedId) {
		toSerialize["provided_id"] = o.ProvidedId
	}
	return toSerialize, nil
}

type NullableUpdateUserRequest struct {
	value *UpdateUserRequest
	isSet bool
}

func (v NullableUpdateUserRequest) Get() *UpdateUserRequest {
	return v.value
}

func (v *NullableUpdateUserRequest) Set(val *UpdateUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserRequest(val *UpdateUserRequest) *NullableUpdateUserRequest {
	return &NullableUpdateUserRequest{value: val, isSet: true}
}

func (v NullableUpdateUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
