/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	// Unique ID of the user in Kinde.
	Id *string `json:"id,omitempty"`
	// External ID for user.
	ProvidedId *string `json:"provided_id,omitempty"`
	// Default email address of the user in Kinde.
	PreferredEmail *string `json:"preferred_email,omitempty"`
	// User's primary phone number.
	Phone *string `json:"phone,omitempty"`
	// Primary username of the user in Kinde.
	Username *string `json:"username,omitempty"`
	// User's last name.
	LastName *string `json:"last_name,omitempty"`
	// User's first name.
	FirstName *string `json:"first_name,omitempty"`
	// Whether the user is currently suspended or not.
	IsSuspended *bool `json:"is_suspended,omitempty"`
	// User's profile picture URL.
	Picture *string `json:"picture,omitempty"`
	// Total number of user sign ins.
	TotalSignIns NullableInt32 `json:"total_sign_ins,omitempty"`
	// Number of consecutive failed user sign ins.
	FailedSignIns NullableInt32 `json:"failed_sign_ins,omitempty"`
	// Last sign in date in ISO 8601 format.
	LastSignedIn NullableString `json:"last_signed_in,omitempty"`
	// Date of user creation in ISO 8601 format.
	CreatedOn NullableString `json:"created_on,omitempty"`
	// Array of organizations a user belongs to.
	Organizations []string `json:"organizations,omitempty"`
	// Array of identities belonging to the user.
	Identities []UserIdentitiesInner `json:"identities,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *User) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *User) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *User) SetId(v string) {
	o.Id = &v
}

// GetProvidedId returns the ProvidedId field value if set, zero value otherwise.
func (o *User) GetProvidedId() string {
	if o == nil || IsNil(o.ProvidedId) {
		var ret string
		return ret
	}
	return *o.ProvidedId
}

// GetProvidedIdOk returns a tuple with the ProvidedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetProvidedIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProvidedId) {
		return nil, false
	}
	return o.ProvidedId, true
}

// HasProvidedId returns a boolean if a field has been set.
func (o *User) HasProvidedId() bool {
	if o != nil && !IsNil(o.ProvidedId) {
		return true
	}

	return false
}

// SetProvidedId gets a reference to the given string and assigns it to the ProvidedId field.
func (o *User) SetProvidedId(v string) {
	o.ProvidedId = &v
}

// GetPreferredEmail returns the PreferredEmail field value if set, zero value otherwise.
func (o *User) GetPreferredEmail() string {
	if o == nil || IsNil(o.PreferredEmail) {
		var ret string
		return ret
	}
	return *o.PreferredEmail
}

// GetPreferredEmailOk returns a tuple with the PreferredEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPreferredEmailOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredEmail) {
		return nil, false
	}
	return o.PreferredEmail, true
}

// HasPreferredEmail returns a boolean if a field has been set.
func (o *User) HasPreferredEmail() bool {
	if o != nil && !IsNil(o.PreferredEmail) {
		return true
	}

	return false
}

// SetPreferredEmail gets a reference to the given string and assigns it to the PreferredEmail field.
func (o *User) SetPreferredEmail(v string) {
	o.PreferredEmail = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *User) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *User) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *User) SetPhone(v string) {
	o.Phone = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *User) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *User) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *User) SetUsername(v string) {
	o.Username = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *User) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *User) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *User) SetLastName(v string) {
	o.LastName = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *User) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *User) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *User) SetFirstName(v string) {
	o.FirstName = &v
}

// GetIsSuspended returns the IsSuspended field value if set, zero value otherwise.
func (o *User) GetIsSuspended() bool {
	if o == nil || IsNil(o.IsSuspended) {
		var ret bool
		return ret
	}
	return *o.IsSuspended
}

// GetIsSuspendedOk returns a tuple with the IsSuspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIsSuspendedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuspended) {
		return nil, false
	}
	return o.IsSuspended, true
}

// HasIsSuspended returns a boolean if a field has been set.
func (o *User) HasIsSuspended() bool {
	if o != nil && !IsNil(o.IsSuspended) {
		return true
	}

	return false
}

// SetIsSuspended gets a reference to the given bool and assigns it to the IsSuspended field.
func (o *User) SetIsSuspended(v bool) {
	o.IsSuspended = &v
}

// GetPicture returns the Picture field value if set, zero value otherwise.
func (o *User) GetPicture() string {
	if o == nil || IsNil(o.Picture) {
		var ret string
		return ret
	}
	return *o.Picture
}

// GetPictureOk returns a tuple with the Picture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPictureOk() (*string, bool) {
	if o == nil || IsNil(o.Picture) {
		return nil, false
	}
	return o.Picture, true
}

// HasPicture returns a boolean if a field has been set.
func (o *User) HasPicture() bool {
	if o != nil && !IsNil(o.Picture) {
		return true
	}

	return false
}

// SetPicture gets a reference to the given string and assigns it to the Picture field.
func (o *User) SetPicture(v string) {
	o.Picture = &v
}

// GetTotalSignIns returns the TotalSignIns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetTotalSignIns() int32 {
	if o == nil || IsNil(o.TotalSignIns.Get()) {
		var ret int32
		return ret
	}
	return *o.TotalSignIns.Get()
}

// GetTotalSignInsOk returns a tuple with the TotalSignIns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetTotalSignInsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalSignIns.Get(), o.TotalSignIns.IsSet()
}

// HasTotalSignIns returns a boolean if a field has been set.
func (o *User) HasTotalSignIns() bool {
	if o != nil && o.TotalSignIns.IsSet() {
		return true
	}

	return false
}

// SetTotalSignIns gets a reference to the given NullableInt32 and assigns it to the TotalSignIns field.
func (o *User) SetTotalSignIns(v int32) {
	o.TotalSignIns.Set(&v)
}

// SetTotalSignInsNil sets the value for TotalSignIns to be an explicit nil
func (o *User) SetTotalSignInsNil() {
	o.TotalSignIns.Set(nil)
}

// UnsetTotalSignIns ensures that no value is present for TotalSignIns, not even an explicit nil
func (o *User) UnsetTotalSignIns() {
	o.TotalSignIns.Unset()
}

// GetFailedSignIns returns the FailedSignIns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetFailedSignIns() int32 {
	if o == nil || IsNil(o.FailedSignIns.Get()) {
		var ret int32
		return ret
	}
	return *o.FailedSignIns.Get()
}

// GetFailedSignInsOk returns a tuple with the FailedSignIns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetFailedSignInsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailedSignIns.Get(), o.FailedSignIns.IsSet()
}

// HasFailedSignIns returns a boolean if a field has been set.
func (o *User) HasFailedSignIns() bool {
	if o != nil && o.FailedSignIns.IsSet() {
		return true
	}

	return false
}

// SetFailedSignIns gets a reference to the given NullableInt32 and assigns it to the FailedSignIns field.
func (o *User) SetFailedSignIns(v int32) {
	o.FailedSignIns.Set(&v)
}

// SetFailedSignInsNil sets the value for FailedSignIns to be an explicit nil
func (o *User) SetFailedSignInsNil() {
	o.FailedSignIns.Set(nil)
}

// UnsetFailedSignIns ensures that no value is present for FailedSignIns, not even an explicit nil
func (o *User) UnsetFailedSignIns() {
	o.FailedSignIns.Unset()
}

// GetLastSignedIn returns the LastSignedIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetLastSignedIn() string {
	if o == nil || IsNil(o.LastSignedIn.Get()) {
		var ret string
		return ret
	}
	return *o.LastSignedIn.Get()
}

// GetLastSignedInOk returns a tuple with the LastSignedIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetLastSignedInOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastSignedIn.Get(), o.LastSignedIn.IsSet()
}

// HasLastSignedIn returns a boolean if a field has been set.
func (o *User) HasLastSignedIn() bool {
	if o != nil && o.LastSignedIn.IsSet() {
		return true
	}

	return false
}

// SetLastSignedIn gets a reference to the given NullableString and assigns it to the LastSignedIn field.
func (o *User) SetLastSignedIn(v string) {
	o.LastSignedIn.Set(&v)
}

// SetLastSignedInNil sets the value for LastSignedIn to be an explicit nil
func (o *User) SetLastSignedInNil() {
	o.LastSignedIn.Set(nil)
}

// UnsetLastSignedIn ensures that no value is present for LastSignedIn, not even an explicit nil
func (o *User) UnsetLastSignedIn() {
	o.LastSignedIn.Unset()
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetCreatedOn() string {
	if o == nil || IsNil(o.CreatedOn.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedOn.Get()
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetCreatedOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedOn.Get(), o.CreatedOn.IsSet()
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *User) HasCreatedOn() bool {
	if o != nil && o.CreatedOn.IsSet() {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given NullableString and assigns it to the CreatedOn field.
func (o *User) SetCreatedOn(v string) {
	o.CreatedOn.Set(&v)
}

// SetCreatedOnNil sets the value for CreatedOn to be an explicit nil
func (o *User) SetCreatedOnNil() {
	o.CreatedOn.Set(nil)
}

// UnsetCreatedOn ensures that no value is present for CreatedOn, not even an explicit nil
func (o *User) UnsetCreatedOn() {
	o.CreatedOn.Unset()
}

// GetOrganizations returns the Organizations field value if set, zero value otherwise.
func (o *User) GetOrganizations() []string {
	if o == nil || IsNil(o.Organizations) {
		var ret []string
		return ret
	}
	return o.Organizations
}

// GetOrganizationsOk returns a tuple with the Organizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetOrganizationsOk() ([]string, bool) {
	if o == nil || IsNil(o.Organizations) {
		return nil, false
	}
	return o.Organizations, true
}

// HasOrganizations returns a boolean if a field has been set.
func (o *User) HasOrganizations() bool {
	if o != nil && !IsNil(o.Organizations) {
		return true
	}

	return false
}

// SetOrganizations gets a reference to the given []string and assigns it to the Organizations field.
func (o *User) SetOrganizations(v []string) {
	o.Organizations = v
}

// GetIdentities returns the Identities field value if set, zero value otherwise.
func (o *User) GetIdentities() []UserIdentitiesInner {
	if o == nil || IsNil(o.Identities) {
		var ret []UserIdentitiesInner
		return ret
	}
	return o.Identities
}

// GetIdentitiesOk returns a tuple with the Identities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIdentitiesOk() ([]UserIdentitiesInner, bool) {
	if o == nil || IsNil(o.Identities) {
		return nil, false
	}
	return o.Identities, true
}

// HasIdentities returns a boolean if a field has been set.
func (o *User) HasIdentities() bool {
	if o != nil && !IsNil(o.Identities) {
		return true
	}

	return false
}

// SetIdentities gets a reference to the given []UserIdentitiesInner and assigns it to the Identities field.
func (o *User) SetIdentities(v []UserIdentitiesInner) {
	o.Identities = v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ProvidedId) {
		toSerialize["provided_id"] = o.ProvidedId
	}
	if !IsNil(o.PreferredEmail) {
		toSerialize["preferred_email"] = o.PreferredEmail
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.IsSuspended) {
		toSerialize["is_suspended"] = o.IsSuspended
	}
	if !IsNil(o.Picture) {
		toSerialize["picture"] = o.Picture
	}
	if o.TotalSignIns.IsSet() {
		toSerialize["total_sign_ins"] = o.TotalSignIns.Get()
	}
	if o.FailedSignIns.IsSet() {
		toSerialize["failed_sign_ins"] = o.FailedSignIns.Get()
	}
	if o.LastSignedIn.IsSet() {
		toSerialize["last_signed_in"] = o.LastSignedIn.Get()
	}
	if o.CreatedOn.IsSet() {
		toSerialize["created_on"] = o.CreatedOn.Get()
	}
	if !IsNil(o.Organizations) {
		toSerialize["organizations"] = o.Organizations
	}
	if !IsNil(o.Identities) {
		toSerialize["identities"] = o.Identities
	}
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
