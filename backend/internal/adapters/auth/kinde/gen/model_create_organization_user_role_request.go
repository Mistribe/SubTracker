/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateOrganizationUserRoleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateOrganizationUserRoleRequest{}

// CreateOrganizationUserRoleRequest struct for CreateOrganizationUserRoleRequest
type CreateOrganizationUserRoleRequest struct {
	// The role id.
	RoleId *string `json:"role_id,omitempty"`
}

// NewCreateOrganizationUserRoleRequest instantiates a new CreateOrganizationUserRoleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrganizationUserRoleRequest() *CreateOrganizationUserRoleRequest {
	this := CreateOrganizationUserRoleRequest{}
	return &this
}

// NewCreateOrganizationUserRoleRequestWithDefaults instantiates a new CreateOrganizationUserRoleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrganizationUserRoleRequestWithDefaults() *CreateOrganizationUserRoleRequest {
	this := CreateOrganizationUserRoleRequest{}
	return &this
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *CreateOrganizationUserRoleRequest) GetRoleId() string {
	if o == nil || IsNil(o.RoleId) {
		var ret string
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrganizationUserRoleRequest) GetRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *CreateOrganizationUserRoleRequest) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given string and assigns it to the RoleId field.
func (o *CreateOrganizationUserRoleRequest) SetRoleId(v string) {
	o.RoleId = &v
}

func (o CreateOrganizationUserRoleRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateOrganizationUserRoleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoleId) {
		toSerialize["role_id"] = o.RoleId
	}
	return toSerialize, nil
}

type NullableCreateOrganizationUserRoleRequest struct {
	value *CreateOrganizationUserRoleRequest
	isSet bool
}

func (v NullableCreateOrganizationUserRoleRequest) Get() *CreateOrganizationUserRoleRequest {
	return v.value
}

func (v *NullableCreateOrganizationUserRoleRequest) Set(val *CreateOrganizationUserRoleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrganizationUserRoleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrganizationUserRoleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrganizationUserRoleRequest(val *CreateOrganizationUserRoleRequest) *NullableCreateOrganizationUserRoleRequest {
	return &NullableCreateOrganizationUserRoleRequest{value: val, isSet: true}
}

func (v NullableCreateOrganizationUserRoleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrganizationUserRoleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
