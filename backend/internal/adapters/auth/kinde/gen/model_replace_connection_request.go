/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReplaceConnectionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplaceConnectionRequest{}

// ReplaceConnectionRequest struct for ReplaceConnectionRequest
type ReplaceConnectionRequest struct {
	// The internal name of the connection.
	Name *string `json:"name,omitempty"`
	// The public-facing name of the connection.
	DisplayName *string `json:"display_name,omitempty"`
	// Client IDs of applications in which this connection is to be enabled.
	EnabledApplications []string                         `json:"enabled_applications,omitempty"`
	Options             *ReplaceConnectionRequestOptions `json:"options,omitempty"`
}

// NewReplaceConnectionRequest instantiates a new ReplaceConnectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceConnectionRequest() *ReplaceConnectionRequest {
	this := ReplaceConnectionRequest{}
	return &this
}

// NewReplaceConnectionRequestWithDefaults instantiates a new ReplaceConnectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceConnectionRequestWithDefaults() *ReplaceConnectionRequest {
	this := ReplaceConnectionRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ReplaceConnectionRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceConnectionRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ReplaceConnectionRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ReplaceConnectionRequest) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ReplaceConnectionRequest) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceConnectionRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ReplaceConnectionRequest) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ReplaceConnectionRequest) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnabledApplications returns the EnabledApplications field value if set, zero value otherwise.
func (o *ReplaceConnectionRequest) GetEnabledApplications() []string {
	if o == nil || IsNil(o.EnabledApplications) {
		var ret []string
		return ret
	}
	return o.EnabledApplications
}

// GetEnabledApplicationsOk returns a tuple with the EnabledApplications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceConnectionRequest) GetEnabledApplicationsOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledApplications) {
		return nil, false
	}
	return o.EnabledApplications, true
}

// HasEnabledApplications returns a boolean if a field has been set.
func (o *ReplaceConnectionRequest) HasEnabledApplications() bool {
	if o != nil && !IsNil(o.EnabledApplications) {
		return true
	}

	return false
}

// SetEnabledApplications gets a reference to the given []string and assigns it to the EnabledApplications field.
func (o *ReplaceConnectionRequest) SetEnabledApplications(v []string) {
	o.EnabledApplications = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ReplaceConnectionRequest) GetOptions() ReplaceConnectionRequestOptions {
	if o == nil || IsNil(o.Options) {
		var ret ReplaceConnectionRequestOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceConnectionRequest) GetOptionsOk() (*ReplaceConnectionRequestOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ReplaceConnectionRequest) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given ReplaceConnectionRequestOptions and assigns it to the Options field.
func (o *ReplaceConnectionRequest) SetOptions(v ReplaceConnectionRequestOptions) {
	o.Options = &v
}

func (o ReplaceConnectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplaceConnectionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.EnabledApplications) {
		toSerialize["enabled_applications"] = o.EnabledApplications
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableReplaceConnectionRequest struct {
	value *ReplaceConnectionRequest
	isSet bool
}

func (v NullableReplaceConnectionRequest) Get() *ReplaceConnectionRequest {
	return v.value
}

func (v *NullableReplaceConnectionRequest) Set(val *ReplaceConnectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceConnectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceConnectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceConnectionRequest(val *ReplaceConnectionRequest) *NullableReplaceConnectionRequest {
	return &NullableReplaceConnectionRequest{value: val, isSet: true}
}

func (v NullableReplaceConnectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceConnectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
