/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Identity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Identity{}

// Identity struct for Identity
type Identity struct {
	// The unique ID for the identity
	Id *string `json:"id,omitempty"`
	// The type of identity
	Type *string `json:"type,omitempty"`
	// Whether the identity is confirmed
	IsConfirmed *bool `json:"is_confirmed,omitempty"`
	// Date of user creation in ISO 8601 format
	CreatedOn *string `json:"created_on,omitempty"`
	// Date of last login in ISO 8601 format
	LastLoginOn *string `json:"last_login_on,omitempty"`
	TotalLogins *int32  `json:"total_logins,omitempty"`
	// The value of the identity
	Name *string `json:"name,omitempty"`
	// The associated email of the identity
	Email *string `json:"email,omitempty"`
	// Whether the identity is the primary identity for the user
	IsPrimary NullableBool `json:"is_primary,omitempty"`
}

// NewIdentity instantiates a new Identity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentity() *Identity {
	this := Identity{}
	return &this
}

// NewIdentityWithDefaults instantiates a new Identity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityWithDefaults() *Identity {
	this := Identity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Identity) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Identity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Identity) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Identity) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Identity) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Identity) SetType(v string) {
	o.Type = &v
}

// GetIsConfirmed returns the IsConfirmed field value if set, zero value otherwise.
func (o *Identity) GetIsConfirmed() bool {
	if o == nil || IsNil(o.IsConfirmed) {
		var ret bool
		return ret
	}
	return *o.IsConfirmed
}

// GetIsConfirmedOk returns a tuple with the IsConfirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetIsConfirmedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsConfirmed) {
		return nil, false
	}
	return o.IsConfirmed, true
}

// HasIsConfirmed returns a boolean if a field has been set.
func (o *Identity) HasIsConfirmed() bool {
	if o != nil && !IsNil(o.IsConfirmed) {
		return true
	}

	return false
}

// SetIsConfirmed gets a reference to the given bool and assigns it to the IsConfirmed field.
func (o *Identity) SetIsConfirmed(v bool) {
	o.IsConfirmed = &v
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise.
func (o *Identity) GetCreatedOn() string {
	if o == nil || IsNil(o.CreatedOn) {
		var ret string
		return ret
	}
	return *o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetCreatedOnOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedOn) {
		return nil, false
	}
	return o.CreatedOn, true
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *Identity) HasCreatedOn() bool {
	if o != nil && !IsNil(o.CreatedOn) {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given string and assigns it to the CreatedOn field.
func (o *Identity) SetCreatedOn(v string) {
	o.CreatedOn = &v
}

// GetLastLoginOn returns the LastLoginOn field value if set, zero value otherwise.
func (o *Identity) GetLastLoginOn() string {
	if o == nil || IsNil(o.LastLoginOn) {
		var ret string
		return ret
	}
	return *o.LastLoginOn
}

// GetLastLoginOnOk returns a tuple with the LastLoginOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetLastLoginOnOk() (*string, bool) {
	if o == nil || IsNil(o.LastLoginOn) {
		return nil, false
	}
	return o.LastLoginOn, true
}

// HasLastLoginOn returns a boolean if a field has been set.
func (o *Identity) HasLastLoginOn() bool {
	if o != nil && !IsNil(o.LastLoginOn) {
		return true
	}

	return false
}

// SetLastLoginOn gets a reference to the given string and assigns it to the LastLoginOn field.
func (o *Identity) SetLastLoginOn(v string) {
	o.LastLoginOn = &v
}

// GetTotalLogins returns the TotalLogins field value if set, zero value otherwise.
func (o *Identity) GetTotalLogins() int32 {
	if o == nil || IsNil(o.TotalLogins) {
		var ret int32
		return ret
	}
	return *o.TotalLogins
}

// GetTotalLoginsOk returns a tuple with the TotalLogins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetTotalLoginsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalLogins) {
		return nil, false
	}
	return o.TotalLogins, true
}

// HasTotalLogins returns a boolean if a field has been set.
func (o *Identity) HasTotalLogins() bool {
	if o != nil && !IsNil(o.TotalLogins) {
		return true
	}

	return false
}

// SetTotalLogins gets a reference to the given int32 and assigns it to the TotalLogins field.
func (o *Identity) SetTotalLogins(v int32) {
	o.TotalLogins = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Identity) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Identity) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Identity) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Identity) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Identity) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Identity) SetEmail(v string) {
	o.Email = &v
}

// GetIsPrimary returns the IsPrimary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Identity) GetIsPrimary() bool {
	if o == nil || IsNil(o.IsPrimary.Get()) {
		var ret bool
		return ret
	}
	return *o.IsPrimary.Get()
}

// GetIsPrimaryOk returns a tuple with the IsPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Identity) GetIsPrimaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsPrimary.Get(), o.IsPrimary.IsSet()
}

// HasIsPrimary returns a boolean if a field has been set.
func (o *Identity) HasIsPrimary() bool {
	if o != nil && o.IsPrimary.IsSet() {
		return true
	}

	return false
}

// SetIsPrimary gets a reference to the given NullableBool and assigns it to the IsPrimary field.
func (o *Identity) SetIsPrimary(v bool) {
	o.IsPrimary.Set(&v)
}

// SetIsPrimaryNil sets the value for IsPrimary to be an explicit nil
func (o *Identity) SetIsPrimaryNil() {
	o.IsPrimary.Set(nil)
}

// UnsetIsPrimary ensures that no value is present for IsPrimary, not even an explicit nil
func (o *Identity) UnsetIsPrimary() {
	o.IsPrimary.Unset()
}

func (o Identity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Identity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.IsConfirmed) {
		toSerialize["is_confirmed"] = o.IsConfirmed
	}
	if !IsNil(o.CreatedOn) {
		toSerialize["created_on"] = o.CreatedOn
	}
	if !IsNil(o.LastLoginOn) {
		toSerialize["last_login_on"] = o.LastLoginOn
	}
	if !IsNil(o.TotalLogins) {
		toSerialize["total_logins"] = o.TotalLogins
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if o.IsPrimary.IsSet() {
		toSerialize["is_primary"] = o.IsPrimary.Get()
	}
	return toSerialize, nil
}

type NullableIdentity struct {
	value *Identity
	isSet bool
}

func (v NullableIdentity) Get() *Identity {
	return v.value
}

func (v *NullableIdentity) Set(val *Identity) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentity(val *Identity) *NullableIdentity {
	return &NullableIdentity{value: val, isSet: true}
}

func (v NullableIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
