/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// UpdateConnectionRequestOptions - struct for UpdateConnectionRequestOptions
type UpdateConnectionRequestOptions struct {
	CreateConnectionRequestOptionsOneOf   *CreateConnectionRequestOptionsOneOf
	ReplaceConnectionRequestOptionsOneOf1 *ReplaceConnectionRequestOptionsOneOf1
	UpdateConnectionRequestOptionsOneOf   *UpdateConnectionRequestOptionsOneOf
}

// CreateConnectionRequestOptionsOneOfAsUpdateConnectionRequestOptions is a convenience function that returns CreateConnectionRequestOptionsOneOf wrapped in UpdateConnectionRequestOptions
func CreateConnectionRequestOptionsOneOfAsUpdateConnectionRequestOptions(v *CreateConnectionRequestOptionsOneOf) UpdateConnectionRequestOptions {
	return UpdateConnectionRequestOptions{
		CreateConnectionRequestOptionsOneOf: v,
	}
}

// ReplaceConnectionRequestOptionsOneOf1AsUpdateConnectionRequestOptions is a convenience function that returns ReplaceConnectionRequestOptionsOneOf1 wrapped in UpdateConnectionRequestOptions
func ReplaceConnectionRequestOptionsOneOf1AsUpdateConnectionRequestOptions(v *ReplaceConnectionRequestOptionsOneOf1) UpdateConnectionRequestOptions {
	return UpdateConnectionRequestOptions{
		ReplaceConnectionRequestOptionsOneOf1: v,
	}
}

// UpdateConnectionRequestOptionsOneOfAsUpdateConnectionRequestOptions is a convenience function that returns UpdateConnectionRequestOptionsOneOf wrapped in UpdateConnectionRequestOptions
func UpdateConnectionRequestOptionsOneOfAsUpdateConnectionRequestOptions(v *UpdateConnectionRequestOptionsOneOf) UpdateConnectionRequestOptions {
	return UpdateConnectionRequestOptions{
		UpdateConnectionRequestOptionsOneOf: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateConnectionRequestOptions) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateConnectionRequestOptionsOneOf
	err = newStrictDecoder(data).Decode(&dst.CreateConnectionRequestOptionsOneOf)
	if err == nil {
		jsonCreateConnectionRequestOptionsOneOf, _ := json.Marshal(dst.CreateConnectionRequestOptionsOneOf)
		if string(jsonCreateConnectionRequestOptionsOneOf) == "{}" { // empty struct
			dst.CreateConnectionRequestOptionsOneOf = nil
		} else {
			if err = validator.Validate(dst.CreateConnectionRequestOptionsOneOf); err != nil {
				dst.CreateConnectionRequestOptionsOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateConnectionRequestOptionsOneOf = nil
	}

	// try to unmarshal data into ReplaceConnectionRequestOptionsOneOf1
	err = newStrictDecoder(data).Decode(&dst.ReplaceConnectionRequestOptionsOneOf1)
	if err == nil {
		jsonReplaceConnectionRequestOptionsOneOf1, _ := json.Marshal(dst.ReplaceConnectionRequestOptionsOneOf1)
		if string(jsonReplaceConnectionRequestOptionsOneOf1) == "{}" { // empty struct
			dst.ReplaceConnectionRequestOptionsOneOf1 = nil
		} else {
			if err = validator.Validate(dst.ReplaceConnectionRequestOptionsOneOf1); err != nil {
				dst.ReplaceConnectionRequestOptionsOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ReplaceConnectionRequestOptionsOneOf1 = nil
	}

	// try to unmarshal data into UpdateConnectionRequestOptionsOneOf
	err = newStrictDecoder(data).Decode(&dst.UpdateConnectionRequestOptionsOneOf)
	if err == nil {
		jsonUpdateConnectionRequestOptionsOneOf, _ := json.Marshal(dst.UpdateConnectionRequestOptionsOneOf)
		if string(jsonUpdateConnectionRequestOptionsOneOf) == "{}" { // empty struct
			dst.UpdateConnectionRequestOptionsOneOf = nil
		} else {
			if err = validator.Validate(dst.UpdateConnectionRequestOptionsOneOf); err != nil {
				dst.UpdateConnectionRequestOptionsOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateConnectionRequestOptionsOneOf = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateConnectionRequestOptionsOneOf = nil
		dst.ReplaceConnectionRequestOptionsOneOf1 = nil
		dst.UpdateConnectionRequestOptionsOneOf = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateConnectionRequestOptions)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateConnectionRequestOptions)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateConnectionRequestOptions) MarshalJSON() ([]byte, error) {
	if src.CreateConnectionRequestOptionsOneOf != nil {
		return json.Marshal(&src.CreateConnectionRequestOptionsOneOf)
	}

	if src.ReplaceConnectionRequestOptionsOneOf1 != nil {
		return json.Marshal(&src.ReplaceConnectionRequestOptionsOneOf1)
	}

	if src.UpdateConnectionRequestOptionsOneOf != nil {
		return json.Marshal(&src.UpdateConnectionRequestOptionsOneOf)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateConnectionRequestOptions) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateConnectionRequestOptionsOneOf != nil {
		return obj.CreateConnectionRequestOptionsOneOf
	}

	if obj.ReplaceConnectionRequestOptionsOneOf1 != nil {
		return obj.ReplaceConnectionRequestOptionsOneOf1
	}

	if obj.UpdateConnectionRequestOptionsOneOf != nil {
		return obj.UpdateConnectionRequestOptionsOneOf
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UpdateConnectionRequestOptions) GetActualInstanceValue() interface{} {
	if obj.CreateConnectionRequestOptionsOneOf != nil {
		return *obj.CreateConnectionRequestOptionsOneOf
	}

	if obj.ReplaceConnectionRequestOptionsOneOf1 != nil {
		return *obj.ReplaceConnectionRequestOptionsOneOf1
	}

	if obj.UpdateConnectionRequestOptionsOneOf != nil {
		return *obj.UpdateConnectionRequestOptionsOneOf
	}

	// all schemas are nil
	return nil
}

type NullableUpdateConnectionRequestOptions struct {
	value *UpdateConnectionRequestOptions
	isSet bool
}

func (v NullableUpdateConnectionRequestOptions) Get() *UpdateConnectionRequestOptions {
	return v.value
}

func (v *NullableUpdateConnectionRequestOptions) Set(val *UpdateConnectionRequestOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateConnectionRequestOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateConnectionRequestOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateConnectionRequestOptions(val *UpdateConnectionRequestOptions) *NullableUpdateConnectionRequestOptions {
	return &NullableUpdateConnectionRequestOptions{value: val, isSet: true}
}

func (v NullableUpdateConnectionRequestOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateConnectionRequestOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
