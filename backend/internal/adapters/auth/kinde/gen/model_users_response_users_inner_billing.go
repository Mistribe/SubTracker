/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UsersResponseUsersInnerBilling type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsersResponseUsersInnerBilling{}

// UsersResponseUsersInnerBilling struct for UsersResponseUsersInnerBilling
type UsersResponseUsersInnerBilling struct {
	// The billing customer id.
	CustomerId *string `json:"customer_id,omitempty"`
}

// NewUsersResponseUsersInnerBilling instantiates a new UsersResponseUsersInnerBilling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersResponseUsersInnerBilling() *UsersResponseUsersInnerBilling {
	this := UsersResponseUsersInnerBilling{}
	return &this
}

// NewUsersResponseUsersInnerBillingWithDefaults instantiates a new UsersResponseUsersInnerBilling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersResponseUsersInnerBillingWithDefaults() *UsersResponseUsersInnerBilling {
	this := UsersResponseUsersInnerBilling{}
	return &this
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *UsersResponseUsersInnerBilling) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersResponseUsersInnerBilling) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *UsersResponseUsersInnerBilling) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *UsersResponseUsersInnerBilling) SetCustomerId(v string) {
	o.CustomerId = &v
}

func (o UsersResponseUsersInnerBilling) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsersResponseUsersInnerBilling) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomerId) {
		toSerialize["customer_id"] = o.CustomerId
	}
	return toSerialize, nil
}

type NullableUsersResponseUsersInnerBilling struct {
	value *UsersResponseUsersInnerBilling
	isSet bool
}

func (v NullableUsersResponseUsersInnerBilling) Get() *UsersResponseUsersInnerBilling {
	return v.value
}

func (v *NullableUsersResponseUsersInnerBilling) Set(val *UsersResponseUsersInnerBilling) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersResponseUsersInnerBilling) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersResponseUsersInnerBilling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersResponseUsersInnerBilling(val *UsersResponseUsersInnerBilling) *NullableUsersResponseUsersInnerBilling {
	return &NullableUsersResponseUsersInnerBilling{value: val, isSet: true}
}

func (v NullableUsersResponseUsersInnerBilling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersResponseUsersInnerBilling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
