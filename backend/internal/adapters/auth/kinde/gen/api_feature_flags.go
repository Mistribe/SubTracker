/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// FeatureFlagsAPIService FeatureFlagsAPI service
type FeatureFlagsAPIService service

type ApiCreateFeatureFlagRequest struct {
	ctx                      context.Context
	ApiService               *FeatureFlagsAPIService
	createFeatureFlagRequest *CreateFeatureFlagRequest
}

// Flag details.
func (r ApiCreateFeatureFlagRequest) CreateFeatureFlagRequest(createFeatureFlagRequest CreateFeatureFlagRequest) ApiCreateFeatureFlagRequest {
	r.createFeatureFlagRequest = &createFeatureFlagRequest
	return r
}

func (r ApiCreateFeatureFlagRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.CreateFeatureFlagExecute(r)
}

/*
CreateFeatureFlag Create Feature Flag

Create feature flag.

<div>

	<code>create:feature_flags</code>

</div>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateFeatureFlagRequest
*/
func (a *FeatureFlagsAPIService) CreateFeatureFlag(ctx context.Context) ApiCreateFeatureFlagRequest {
	return ApiCreateFeatureFlagRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SuccessResponse
func (a *FeatureFlagsAPIService) CreateFeatureFlagExecute(r ApiCreateFeatureFlagRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FeatureFlagsAPIService.CreateFeatureFlag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/feature_flags"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createFeatureFlagRequest == nil {
		return localVarReturnValue, nil, reportError("createFeatureFlagRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createFeatureFlagRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteFeatureFlagRequest struct {
	ctx            context.Context
	ApiService     *FeatureFlagsAPIService
	featureFlagKey string
}

func (r ApiDeleteFeatureFlagRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.DeleteFeatureFlagExecute(r)
}

/*
DeleteFeatureFlag Delete Feature Flag

# Delete feature flag

<div>

	<code>delete:feature_flags</code>

</div>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param featureFlagKey The identifier for the feature flag.
	@return ApiDeleteFeatureFlagRequest
*/
func (a *FeatureFlagsAPIService) DeleteFeatureFlag(ctx context.Context, featureFlagKey string) ApiDeleteFeatureFlagRequest {
	return ApiDeleteFeatureFlagRequest{
		ApiService:     a,
		ctx:            ctx,
		featureFlagKey: featureFlagKey,
	}
}

// Execute executes the request
//
//	@return SuccessResponse
func (a *FeatureFlagsAPIService) DeleteFeatureFlagExecute(r ApiDeleteFeatureFlagRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FeatureFlagsAPIService.DeleteFeatureFlag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/feature_flags/{feature_flag_key}"
	localVarPath = strings.Replace(localVarPath, "{"+"feature_flag_key"+"}", url.PathEscape(parameterValueToString(r.featureFlagKey, "featureFlagKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateFeatureFlagRequest struct {
	ctx                context.Context
	ApiService         *FeatureFlagsAPIService
	featureFlagKey     string
	name               *string
	description        *string
	type_              *string
	allowOverrideLevel *string
	defaultValue       *string
}

// The name of the flag.
func (r ApiUpdateFeatureFlagRequest) Name(name string) ApiUpdateFeatureFlagRequest {
	r.name = &name
	return r
}

// Description of the flag purpose.
func (r ApiUpdateFeatureFlagRequest) Description(description string) ApiUpdateFeatureFlagRequest {
	r.description = &description
	return r
}

// The variable type
func (r ApiUpdateFeatureFlagRequest) Type_(type_ string) ApiUpdateFeatureFlagRequest {
	r.type_ = &type_
	return r
}

// Allow the flag to be overridden at a different level.
func (r ApiUpdateFeatureFlagRequest) AllowOverrideLevel(allowOverrideLevel string) ApiUpdateFeatureFlagRequest {
	r.allowOverrideLevel = &allowOverrideLevel
	return r
}

// Default value for the flag used by environments and organizations.
func (r ApiUpdateFeatureFlagRequest) DefaultValue(defaultValue string) ApiUpdateFeatureFlagRequest {
	r.defaultValue = &defaultValue
	return r
}

func (r ApiUpdateFeatureFlagRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.UpdateFeatureFlagExecute(r)
}

/*
UpdateFeatureFlag Replace Feature Flag

Update feature flag.

<div>

	<code>update:feature_flags</code>

</div>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param featureFlagKey The key identifier for the feature flag.
	@return ApiUpdateFeatureFlagRequest
*/
func (a *FeatureFlagsAPIService) UpdateFeatureFlag(ctx context.Context, featureFlagKey string) ApiUpdateFeatureFlagRequest {
	return ApiUpdateFeatureFlagRequest{
		ApiService:     a,
		ctx:            ctx,
		featureFlagKey: featureFlagKey,
	}
}

// Execute executes the request
//
//	@return SuccessResponse
func (a *FeatureFlagsAPIService) UpdateFeatureFlagExecute(r ApiUpdateFeatureFlagRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FeatureFlagsAPIService.UpdateFeatureFlag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/feature_flags/{feature_flag_key}"
	localVarPath = strings.Replace(localVarPath, "{"+"feature_flag_key"+"}", url.PathEscape(parameterValueToString(r.featureFlagKey, "featureFlagKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if r.description == nil {
		return localVarReturnValue, nil, reportError("description is required and must be specified")
	}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}
	if r.allowOverrideLevel == nil {
		return localVarReturnValue, nil, reportError("allowOverrideLevel is required and must be specified")
	}
	if r.defaultValue == nil {
		return localVarReturnValue, nil, reportError("defaultValue is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "allow_override_level", r.allowOverrideLevel, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "default_value", r.defaultValue, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
