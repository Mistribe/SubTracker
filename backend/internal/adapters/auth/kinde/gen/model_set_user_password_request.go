/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SetUserPasswordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetUserPasswordRequest{}

// SetUserPasswordRequest struct for SetUserPasswordRequest
type SetUserPasswordRequest struct {
	// The hashed password.
	HashedPassword string `json:"hashed_password"`
	// The hashing method or algorithm used to encrypt the userâ€™s password. Default is bcrypt.
	HashingMethod *string `json:"hashing_method,omitempty"`
	// Extra characters added to passwords to make them stronger. Not required for bcrypt.
	Salt *string `json:"salt,omitempty"`
	// Position of salt in password string. Not required for bcrypt.
	SaltPosition *string `json:"salt_position,omitempty"`
	// The user will be prompted to set a new password after entering this one.
	IsTemporaryPassword *bool `json:"is_temporary_password,omitempty"`
}

type _SetUserPasswordRequest SetUserPasswordRequest

// NewSetUserPasswordRequest instantiates a new SetUserPasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetUserPasswordRequest(hashedPassword string) *SetUserPasswordRequest {
	this := SetUserPasswordRequest{}
	this.HashedPassword = hashedPassword
	return &this
}

// NewSetUserPasswordRequestWithDefaults instantiates a new SetUserPasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetUserPasswordRequestWithDefaults() *SetUserPasswordRequest {
	this := SetUserPasswordRequest{}
	return &this
}

// GetHashedPassword returns the HashedPassword field value
func (o *SetUserPasswordRequest) GetHashedPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HashedPassword
}

// GetHashedPasswordOk returns a tuple with the HashedPassword field value
// and a boolean to check if the value has been set.
func (o *SetUserPasswordRequest) GetHashedPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HashedPassword, true
}

// SetHashedPassword sets field value
func (o *SetUserPasswordRequest) SetHashedPassword(v string) {
	o.HashedPassword = v
}

// GetHashingMethod returns the HashingMethod field value if set, zero value otherwise.
func (o *SetUserPasswordRequest) GetHashingMethod() string {
	if o == nil || IsNil(o.HashingMethod) {
		var ret string
		return ret
	}
	return *o.HashingMethod
}

// GetHashingMethodOk returns a tuple with the HashingMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetUserPasswordRequest) GetHashingMethodOk() (*string, bool) {
	if o == nil || IsNil(o.HashingMethod) {
		return nil, false
	}
	return o.HashingMethod, true
}

// HasHashingMethod returns a boolean if a field has been set.
func (o *SetUserPasswordRequest) HasHashingMethod() bool {
	if o != nil && !IsNil(o.HashingMethod) {
		return true
	}

	return false
}

// SetHashingMethod gets a reference to the given string and assigns it to the HashingMethod field.
func (o *SetUserPasswordRequest) SetHashingMethod(v string) {
	o.HashingMethod = &v
}

// GetSalt returns the Salt field value if set, zero value otherwise.
func (o *SetUserPasswordRequest) GetSalt() string {
	if o == nil || IsNil(o.Salt) {
		var ret string
		return ret
	}
	return *o.Salt
}

// GetSaltOk returns a tuple with the Salt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetUserPasswordRequest) GetSaltOk() (*string, bool) {
	if o == nil || IsNil(o.Salt) {
		return nil, false
	}
	return o.Salt, true
}

// HasSalt returns a boolean if a field has been set.
func (o *SetUserPasswordRequest) HasSalt() bool {
	if o != nil && !IsNil(o.Salt) {
		return true
	}

	return false
}

// SetSalt gets a reference to the given string and assigns it to the Salt field.
func (o *SetUserPasswordRequest) SetSalt(v string) {
	o.Salt = &v
}

// GetSaltPosition returns the SaltPosition field value if set, zero value otherwise.
func (o *SetUserPasswordRequest) GetSaltPosition() string {
	if o == nil || IsNil(o.SaltPosition) {
		var ret string
		return ret
	}
	return *o.SaltPosition
}

// GetSaltPositionOk returns a tuple with the SaltPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetUserPasswordRequest) GetSaltPositionOk() (*string, bool) {
	if o == nil || IsNil(o.SaltPosition) {
		return nil, false
	}
	return o.SaltPosition, true
}

// HasSaltPosition returns a boolean if a field has been set.
func (o *SetUserPasswordRequest) HasSaltPosition() bool {
	if o != nil && !IsNil(o.SaltPosition) {
		return true
	}

	return false
}

// SetSaltPosition gets a reference to the given string and assigns it to the SaltPosition field.
func (o *SetUserPasswordRequest) SetSaltPosition(v string) {
	o.SaltPosition = &v
}

// GetIsTemporaryPassword returns the IsTemporaryPassword field value if set, zero value otherwise.
func (o *SetUserPasswordRequest) GetIsTemporaryPassword() bool {
	if o == nil || IsNil(o.IsTemporaryPassword) {
		var ret bool
		return ret
	}
	return *o.IsTemporaryPassword
}

// GetIsTemporaryPasswordOk returns a tuple with the IsTemporaryPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetUserPasswordRequest) GetIsTemporaryPasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTemporaryPassword) {
		return nil, false
	}
	return o.IsTemporaryPassword, true
}

// HasIsTemporaryPassword returns a boolean if a field has been set.
func (o *SetUserPasswordRequest) HasIsTemporaryPassword() bool {
	if o != nil && !IsNil(o.IsTemporaryPassword) {
		return true
	}

	return false
}

// SetIsTemporaryPassword gets a reference to the given bool and assigns it to the IsTemporaryPassword field.
func (o *SetUserPasswordRequest) SetIsTemporaryPassword(v bool) {
	o.IsTemporaryPassword = &v
}

func (o SetUserPasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetUserPasswordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hashed_password"] = o.HashedPassword
	if !IsNil(o.HashingMethod) {
		toSerialize["hashing_method"] = o.HashingMethod
	}
	if !IsNil(o.Salt) {
		toSerialize["salt"] = o.Salt
	}
	if !IsNil(o.SaltPosition) {
		toSerialize["salt_position"] = o.SaltPosition
	}
	if !IsNil(o.IsTemporaryPassword) {
		toSerialize["is_temporary_password"] = o.IsTemporaryPassword
	}
	return toSerialize, nil
}

func (o *SetUserPasswordRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hashed_password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetUserPasswordRequest := _SetUserPasswordRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetUserPasswordRequest)

	if err != nil {
		return err
	}

	*o = SetUserPasswordRequest(varSetUserPasswordRequest)

	return err
}

type NullableSetUserPasswordRequest struct {
	value *SetUserPasswordRequest
	isSet bool
}

func (v NullableSetUserPasswordRequest) Get() *SetUserPasswordRequest {
	return v.value
}

func (v *NullableSetUserPasswordRequest) Set(val *SetUserPasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetUserPasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetUserPasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetUserPasswordRequest(val *SetUserPasswordRequest) *NullableSetUserPasswordRequest {
	return &NullableSetUserPasswordRequest{value: val, isSet: true}
}

func (v NullableSetUserPasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetUserPasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
