/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateRolesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRolesRequest{}

// UpdateRolesRequest struct for UpdateRolesRequest
type UpdateRolesRequest struct {
	// The role's name.
	Name string `json:"name"`
	// The role's description.
	Description *string `json:"description,omitempty"`
	// The role identifier to use in code.
	Key string `json:"key"`
	// Set role as default for new users.
	IsDefaultRole *bool `json:"is_default_role,omitempty"`
}

type _UpdateRolesRequest UpdateRolesRequest

// NewUpdateRolesRequest instantiates a new UpdateRolesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRolesRequest(name string, key string) *UpdateRolesRequest {
	this := UpdateRolesRequest{}
	this.Name = name
	this.Key = key
	return &this
}

// NewUpdateRolesRequestWithDefaults instantiates a new UpdateRolesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRolesRequestWithDefaults() *UpdateRolesRequest {
	this := UpdateRolesRequest{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateRolesRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateRolesRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateRolesRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateRolesRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRolesRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateRolesRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateRolesRequest) SetDescription(v string) {
	o.Description = &v
}

// GetKey returns the Key field value
func (o *UpdateRolesRequest) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *UpdateRolesRequest) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *UpdateRolesRequest) SetKey(v string) {
	o.Key = v
}

// GetIsDefaultRole returns the IsDefaultRole field value if set, zero value otherwise.
func (o *UpdateRolesRequest) GetIsDefaultRole() bool {
	if o == nil || IsNil(o.IsDefaultRole) {
		var ret bool
		return ret
	}
	return *o.IsDefaultRole
}

// GetIsDefaultRoleOk returns a tuple with the IsDefaultRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRolesRequest) GetIsDefaultRoleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefaultRole) {
		return nil, false
	}
	return o.IsDefaultRole, true
}

// HasIsDefaultRole returns a boolean if a field has been set.
func (o *UpdateRolesRequest) HasIsDefaultRole() bool {
	if o != nil && !IsNil(o.IsDefaultRole) {
		return true
	}

	return false
}

// SetIsDefaultRole gets a reference to the given bool and assigns it to the IsDefaultRole field.
func (o *UpdateRolesRequest) SetIsDefaultRole(v bool) {
	o.IsDefaultRole = &v
}

func (o UpdateRolesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRolesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["key"] = o.Key
	if !IsNil(o.IsDefaultRole) {
		toSerialize["is_default_role"] = o.IsDefaultRole
	}
	return toSerialize, nil
}

func (o *UpdateRolesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateRolesRequest := _UpdateRolesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateRolesRequest)

	if err != nil {
		return err
	}

	*o = UpdateRolesRequest(varUpdateRolesRequest)

	return err
}

type NullableUpdateRolesRequest struct {
	value *UpdateRolesRequest
	isSet bool
}

func (v NullableUpdateRolesRequest) Get() *UpdateRolesRequest {
	return v.value
}

func (v *NullableUpdateRolesRequest) Set(val *UpdateRolesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRolesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRolesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRolesRequest(val *UpdateRolesRequest) *NullableUpdateRolesRequest {
	return &NullableUpdateRolesRequest{value: val, isSet: true}
}

func (v NullableUpdateRolesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRolesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
