/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvironmentVariable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentVariable{}

// EnvironmentVariable struct for EnvironmentVariable
type EnvironmentVariable struct {
	// The unique ID for the environment variable.
	Id *string `json:"id,omitempty"`
	// The name of the environment variable.
	Key *string `json:"key,omitempty"`
	// The value of the environment variable.
	Value NullableString `json:"value,omitempty"`
	// Whether the environment variable is sensitive.
	IsSecret *bool `json:"is_secret,omitempty"`
	// The date the environment variable was created.
	CreatedOn *string `json:"created_on,omitempty"`
}

// NewEnvironmentVariable instantiates a new EnvironmentVariable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentVariable() *EnvironmentVariable {
	this := EnvironmentVariable{}
	return &this
}

// NewEnvironmentVariableWithDefaults instantiates a new EnvironmentVariable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentVariableWithDefaults() *EnvironmentVariable {
	this := EnvironmentVariable{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EnvironmentVariable) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentVariable) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EnvironmentVariable) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EnvironmentVariable) SetId(v string) {
	o.Id = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *EnvironmentVariable) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentVariable) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *EnvironmentVariable) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *EnvironmentVariable) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentVariable) GetValue() string {
	if o == nil || IsNil(o.Value.Get()) {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentVariable) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *EnvironmentVariable) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *EnvironmentVariable) SetValue(v string) {
	o.Value.Set(&v)
}

// SetValueNil sets the value for Value to be an explicit nil
func (o *EnvironmentVariable) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *EnvironmentVariable) UnsetValue() {
	o.Value.Unset()
}

// GetIsSecret returns the IsSecret field value if set, zero value otherwise.
func (o *EnvironmentVariable) GetIsSecret() bool {
	if o == nil || IsNil(o.IsSecret) {
		var ret bool
		return ret
	}
	return *o.IsSecret
}

// GetIsSecretOk returns a tuple with the IsSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentVariable) GetIsSecretOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecret) {
		return nil, false
	}
	return o.IsSecret, true
}

// HasIsSecret returns a boolean if a field has been set.
func (o *EnvironmentVariable) HasIsSecret() bool {
	if o != nil && !IsNil(o.IsSecret) {
		return true
	}

	return false
}

// SetIsSecret gets a reference to the given bool and assigns it to the IsSecret field.
func (o *EnvironmentVariable) SetIsSecret(v bool) {
	o.IsSecret = &v
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise.
func (o *EnvironmentVariable) GetCreatedOn() string {
	if o == nil || IsNil(o.CreatedOn) {
		var ret string
		return ret
	}
	return *o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentVariable) GetCreatedOnOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedOn) {
		return nil, false
	}
	return o.CreatedOn, true
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *EnvironmentVariable) HasCreatedOn() bool {
	if o != nil && !IsNil(o.CreatedOn) {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given string and assigns it to the CreatedOn field.
func (o *EnvironmentVariable) SetCreatedOn(v string) {
	o.CreatedOn = &v
}

func (o EnvironmentVariable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentVariable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if !IsNil(o.IsSecret) {
		toSerialize["is_secret"] = o.IsSecret
	}
	if !IsNil(o.CreatedOn) {
		toSerialize["created_on"] = o.CreatedOn
	}
	return toSerialize, nil
}

type NullableEnvironmentVariable struct {
	value *EnvironmentVariable
	isSet bool
}

func (v NullableEnvironmentVariable) Get() *EnvironmentVariable {
	return v.value
}

func (v *NullableEnvironmentVariable) Set(val *EnvironmentVariable) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentVariable(val *EnvironmentVariable) *NullableEnvironmentVariable {
	return &NullableEnvironmentVariable{value: val, isSet: true}
}

func (v NullableEnvironmentVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
