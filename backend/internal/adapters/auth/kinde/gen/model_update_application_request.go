/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateApplicationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateApplicationRequest{}

// UpdateApplicationRequest struct for UpdateApplicationRequest
type UpdateApplicationRequest struct {
	// The application's name.
	Name *string `json:"name,omitempty"`
	// The application's language key.
	LanguageKey *string `json:"language_key,omitempty"`
	// The application's logout uris.
	LogoutUris []string `json:"logout_uris,omitempty"`
	// The application's redirect uris.
	RedirectUris []string `json:"redirect_uris,omitempty"`
	// The default login route for resolving session issues.
	LoginUri *string `json:"login_uri,omitempty"`
	// The homepage link to your application.
	HomepageUri *string `json:"homepage_uri,omitempty"`
}

// NewUpdateApplicationRequest instantiates a new UpdateApplicationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateApplicationRequest() *UpdateApplicationRequest {
	this := UpdateApplicationRequest{}
	return &this
}

// NewUpdateApplicationRequestWithDefaults instantiates a new UpdateApplicationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateApplicationRequestWithDefaults() *UpdateApplicationRequest {
	this := UpdateApplicationRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateApplicationRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateApplicationRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateApplicationRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateApplicationRequest) SetName(v string) {
	o.Name = &v
}

// GetLanguageKey returns the LanguageKey field value if set, zero value otherwise.
func (o *UpdateApplicationRequest) GetLanguageKey() string {
	if o == nil || IsNil(o.LanguageKey) {
		var ret string
		return ret
	}
	return *o.LanguageKey
}

// GetLanguageKeyOk returns a tuple with the LanguageKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateApplicationRequest) GetLanguageKeyOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageKey) {
		return nil, false
	}
	return o.LanguageKey, true
}

// HasLanguageKey returns a boolean if a field has been set.
func (o *UpdateApplicationRequest) HasLanguageKey() bool {
	if o != nil && !IsNil(o.LanguageKey) {
		return true
	}

	return false
}

// SetLanguageKey gets a reference to the given string and assigns it to the LanguageKey field.
func (o *UpdateApplicationRequest) SetLanguageKey(v string) {
	o.LanguageKey = &v
}

// GetLogoutUris returns the LogoutUris field value if set, zero value otherwise.
func (o *UpdateApplicationRequest) GetLogoutUris() []string {
	if o == nil || IsNil(o.LogoutUris) {
		var ret []string
		return ret
	}
	return o.LogoutUris
}

// GetLogoutUrisOk returns a tuple with the LogoutUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateApplicationRequest) GetLogoutUrisOk() ([]string, bool) {
	if o == nil || IsNil(o.LogoutUris) {
		return nil, false
	}
	return o.LogoutUris, true
}

// HasLogoutUris returns a boolean if a field has been set.
func (o *UpdateApplicationRequest) HasLogoutUris() bool {
	if o != nil && !IsNil(o.LogoutUris) {
		return true
	}

	return false
}

// SetLogoutUris gets a reference to the given []string and assigns it to the LogoutUris field.
func (o *UpdateApplicationRequest) SetLogoutUris(v []string) {
	o.LogoutUris = v
}

// GetRedirectUris returns the RedirectUris field value if set, zero value otherwise.
func (o *UpdateApplicationRequest) GetRedirectUris() []string {
	if o == nil || IsNil(o.RedirectUris) {
		var ret []string
		return ret
	}
	return o.RedirectUris
}

// GetRedirectUrisOk returns a tuple with the RedirectUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateApplicationRequest) GetRedirectUrisOk() ([]string, bool) {
	if o == nil || IsNil(o.RedirectUris) {
		return nil, false
	}
	return o.RedirectUris, true
}

// HasRedirectUris returns a boolean if a field has been set.
func (o *UpdateApplicationRequest) HasRedirectUris() bool {
	if o != nil && !IsNil(o.RedirectUris) {
		return true
	}

	return false
}

// SetRedirectUris gets a reference to the given []string and assigns it to the RedirectUris field.
func (o *UpdateApplicationRequest) SetRedirectUris(v []string) {
	o.RedirectUris = v
}

// GetLoginUri returns the LoginUri field value if set, zero value otherwise.
func (o *UpdateApplicationRequest) GetLoginUri() string {
	if o == nil || IsNil(o.LoginUri) {
		var ret string
		return ret
	}
	return *o.LoginUri
}

// GetLoginUriOk returns a tuple with the LoginUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateApplicationRequest) GetLoginUriOk() (*string, bool) {
	if o == nil || IsNil(o.LoginUri) {
		return nil, false
	}
	return o.LoginUri, true
}

// HasLoginUri returns a boolean if a field has been set.
func (o *UpdateApplicationRequest) HasLoginUri() bool {
	if o != nil && !IsNil(o.LoginUri) {
		return true
	}

	return false
}

// SetLoginUri gets a reference to the given string and assigns it to the LoginUri field.
func (o *UpdateApplicationRequest) SetLoginUri(v string) {
	o.LoginUri = &v
}

// GetHomepageUri returns the HomepageUri field value if set, zero value otherwise.
func (o *UpdateApplicationRequest) GetHomepageUri() string {
	if o == nil || IsNil(o.HomepageUri) {
		var ret string
		return ret
	}
	return *o.HomepageUri
}

// GetHomepageUriOk returns a tuple with the HomepageUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateApplicationRequest) GetHomepageUriOk() (*string, bool) {
	if o == nil || IsNil(o.HomepageUri) {
		return nil, false
	}
	return o.HomepageUri, true
}

// HasHomepageUri returns a boolean if a field has been set.
func (o *UpdateApplicationRequest) HasHomepageUri() bool {
	if o != nil && !IsNil(o.HomepageUri) {
		return true
	}

	return false
}

// SetHomepageUri gets a reference to the given string and assigns it to the HomepageUri field.
func (o *UpdateApplicationRequest) SetHomepageUri(v string) {
	o.HomepageUri = &v
}

func (o UpdateApplicationRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateApplicationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.LanguageKey) {
		toSerialize["language_key"] = o.LanguageKey
	}
	if !IsNil(o.LogoutUris) {
		toSerialize["logout_uris"] = o.LogoutUris
	}
	if !IsNil(o.RedirectUris) {
		toSerialize["redirect_uris"] = o.RedirectUris
	}
	if !IsNil(o.LoginUri) {
		toSerialize["login_uri"] = o.LoginUri
	}
	if !IsNil(o.HomepageUri) {
		toSerialize["homepage_uri"] = o.HomepageUri
	}
	return toSerialize, nil
}

type NullableUpdateApplicationRequest struct {
	value *UpdateApplicationRequest
	isSet bool
}

func (v NullableUpdateApplicationRequest) Get() *UpdateApplicationRequest {
	return v.value
}

func (v *NullableUpdateApplicationRequest) Set(val *UpdateApplicationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateApplicationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateApplicationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateApplicationRequest(val *UpdateApplicationRequest) *NullableUpdateApplicationRequest {
	return &NullableUpdateApplicationRequest{value: val, isSet: true}
}

func (v NullableUpdateApplicationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateApplicationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
