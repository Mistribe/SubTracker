/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserIdentityResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserIdentityResult{}

// UserIdentityResult The result of the user creation operation.
type UserIdentityResult struct {
	// True if the user identity was successfully created.
	Created *bool `json:"created,omitempty"`
}

// NewUserIdentityResult instantiates a new UserIdentityResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserIdentityResult() *UserIdentityResult {
	this := UserIdentityResult{}
	return &this
}

// NewUserIdentityResultWithDefaults instantiates a new UserIdentityResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserIdentityResultWithDefaults() *UserIdentityResult {
	this := UserIdentityResult{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *UserIdentityResult) GetCreated() bool {
	if o == nil || IsNil(o.Created) {
		var ret bool
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdentityResult) GetCreatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *UserIdentityResult) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given bool and assigns it to the Created field.
func (o *UserIdentityResult) SetCreated(v bool) {
	o.Created = &v
}

func (o UserIdentityResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserIdentityResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	return toSerialize, nil
}

type NullableUserIdentityResult struct {
	value *UserIdentityResult
	isSet bool
}

func (v NullableUserIdentityResult) Get() *UserIdentityResult {
	return v.value
}

func (v *NullableUserIdentityResult) Set(val *UserIdentityResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUserIdentityResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUserIdentityResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserIdentityResult(val *UserIdentityResult) *NullableUserIdentityResult {
	return &NullableUserIdentityResult{value: val, isSet: true}
}

func (v NullableUserIdentityResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserIdentityResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
