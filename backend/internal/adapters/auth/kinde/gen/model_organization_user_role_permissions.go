/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrganizationUserRolePermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationUserRolePermissions{}

// OrganizationUserRolePermissions struct for OrganizationUserRolePermissions
type OrganizationUserRolePermissions struct {
	Id          *string                                     `json:"id,omitempty"`
	Role        *string                                     `json:"role,omitempty"`
	Permissions *OrganizationUserRolePermissionsPermissions `json:"permissions,omitempty"`
}

// NewOrganizationUserRolePermissions instantiates a new OrganizationUserRolePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationUserRolePermissions() *OrganizationUserRolePermissions {
	this := OrganizationUserRolePermissions{}
	return &this
}

// NewOrganizationUserRolePermissionsWithDefaults instantiates a new OrganizationUserRolePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationUserRolePermissionsWithDefaults() *OrganizationUserRolePermissions {
	this := OrganizationUserRolePermissions{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrganizationUserRolePermissions) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUserRolePermissions) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrganizationUserRolePermissions) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrganizationUserRolePermissions) SetId(v string) {
	o.Id = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *OrganizationUserRolePermissions) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUserRolePermissions) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *OrganizationUserRolePermissions) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *OrganizationUserRolePermissions) SetRole(v string) {
	o.Role = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *OrganizationUserRolePermissions) GetPermissions() OrganizationUserRolePermissionsPermissions {
	if o == nil || IsNil(o.Permissions) {
		var ret OrganizationUserRolePermissionsPermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUserRolePermissions) GetPermissionsOk() (*OrganizationUserRolePermissionsPermissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *OrganizationUserRolePermissions) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given OrganizationUserRolePermissionsPermissions and assigns it to the Permissions field.
func (o *OrganizationUserRolePermissions) SetPermissions(v OrganizationUserRolePermissionsPermissions) {
	o.Permissions = &v
}

func (o OrganizationUserRolePermissions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationUserRolePermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

type NullableOrganizationUserRolePermissions struct {
	value *OrganizationUserRolePermissions
	isSet bool
}

func (v NullableOrganizationUserRolePermissions) Get() *OrganizationUserRolePermissions {
	return v.value
}

func (v *NullableOrganizationUserRolePermissions) Set(val *OrganizationUserRolePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationUserRolePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationUserRolePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationUserRolePermissions(val *OrganizationUserRolePermissions) *NullableOrganizationUserRolePermissions {
	return &NullableOrganizationUserRolePermissions{value: val, isSet: true}
}

func (v NullableOrganizationUserRolePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationUserRolePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
