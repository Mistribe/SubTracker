/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserIdentity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserIdentity{}

// UserIdentity struct for UserIdentity
type UserIdentity struct {
	// The type of identity object created.
	Type   *string             `json:"type,omitempty"`
	Result *UserIdentityResult `json:"result,omitempty"`
}

// NewUserIdentity instantiates a new UserIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserIdentity() *UserIdentity {
	this := UserIdentity{}
	return &this
}

// NewUserIdentityWithDefaults instantiates a new UserIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserIdentityWithDefaults() *UserIdentity {
	this := UserIdentity{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserIdentity) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdentity) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserIdentity) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserIdentity) SetType(v string) {
	o.Type = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *UserIdentity) GetResult() UserIdentityResult {
	if o == nil || IsNil(o.Result) {
		var ret UserIdentityResult
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdentity) GetResultOk() (*UserIdentityResult, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *UserIdentity) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given UserIdentityResult and assigns it to the Result field.
func (o *UserIdentity) SetResult(v UserIdentityResult) {
	o.Result = &v
}

func (o UserIdentity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserIdentity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableUserIdentity struct {
	value *UserIdentity
	isSet bool
}

func (v NullableUserIdentity) Get() *UserIdentity {
	return v.value
}

func (v *NullableUserIdentity) Set(val *UserIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableUserIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableUserIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserIdentity(val *UserIdentity) *NullableUserIdentity {
	return &NullableUserIdentity{value: val, isSet: true}
}

func (v NullableUserIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
