/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetPermissionsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetPermissionsResponse{}

// GetPermissionsResponse struct for GetPermissionsResponse
type GetPermissionsResponse struct {
	// Response code.
	Code *string `json:"code,omitempty"`
	// Response message.
	Message     *string       `json:"message,omitempty"`
	Permissions []Permissions `json:"permissions,omitempty"`
	// Pagination token.
	NextToken *string `json:"next_token,omitempty"`
}

// NewGetPermissionsResponse instantiates a new GetPermissionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetPermissionsResponse() *GetPermissionsResponse {
	this := GetPermissionsResponse{}
	return &this
}

// NewGetPermissionsResponseWithDefaults instantiates a new GetPermissionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetPermissionsResponseWithDefaults() *GetPermissionsResponse {
	this := GetPermissionsResponse{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *GetPermissionsResponse) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPermissionsResponse) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *GetPermissionsResponse) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *GetPermissionsResponse) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *GetPermissionsResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPermissionsResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *GetPermissionsResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *GetPermissionsResponse) SetMessage(v string) {
	o.Message = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *GetPermissionsResponse) GetPermissions() []Permissions {
	if o == nil || IsNil(o.Permissions) {
		var ret []Permissions
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPermissionsResponse) GetPermissionsOk() ([]Permissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *GetPermissionsResponse) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []Permissions and assigns it to the Permissions field.
func (o *GetPermissionsResponse) SetPermissions(v []Permissions) {
	o.Permissions = v
}

// GetNextToken returns the NextToken field value if set, zero value otherwise.
func (o *GetPermissionsResponse) GetNextToken() string {
	if o == nil || IsNil(o.NextToken) {
		var ret string
		return ret
	}
	return *o.NextToken
}

// GetNextTokenOk returns a tuple with the NextToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPermissionsResponse) GetNextTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextToken) {
		return nil, false
	}
	return o.NextToken, true
}

// HasNextToken returns a boolean if a field has been set.
func (o *GetPermissionsResponse) HasNextToken() bool {
	if o != nil && !IsNil(o.NextToken) {
		return true
	}

	return false
}

// SetNextToken gets a reference to the given string and assigns it to the NextToken field.
func (o *GetPermissionsResponse) SetNextToken(v string) {
	o.NextToken = &v
}

func (o GetPermissionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetPermissionsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.NextToken) {
		toSerialize["next_token"] = o.NextToken
	}
	return toSerialize, nil
}

type NullableGetPermissionsResponse struct {
	value *GetPermissionsResponse
	isSet bool
}

func (v NullableGetPermissionsResponse) Get() *GetPermissionsResponse {
	return v.value
}

func (v *NullableGetPermissionsResponse) Set(val *GetPermissionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPermissionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPermissionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPermissionsResponse(val *GetPermissionsResponse) *NullableGetPermissionsResponse {
	return &NullableGetPermissionsResponse{value: val, isSet: true}
}

func (v NullableGetPermissionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPermissionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
