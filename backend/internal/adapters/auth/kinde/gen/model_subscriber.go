/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Subscriber type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subscriber{}

// Subscriber struct for Subscriber
type Subscriber struct {
	Id             *string `json:"id,omitempty"`
	PreferredEmail *string `json:"preferred_email,omitempty"`
	FirstName      *string `json:"first_name,omitempty"`
	LastName       *string `json:"last_name,omitempty"`
}

// NewSubscriber instantiates a new Subscriber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriber() *Subscriber {
	this := Subscriber{}
	return &this
}

// NewSubscriberWithDefaults instantiates a new Subscriber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriberWithDefaults() *Subscriber {
	this := Subscriber{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Subscriber) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Subscriber) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Subscriber) SetId(v string) {
	o.Id = &v
}

// GetPreferredEmail returns the PreferredEmail field value if set, zero value otherwise.
func (o *Subscriber) GetPreferredEmail() string {
	if o == nil || IsNil(o.PreferredEmail) {
		var ret string
		return ret
	}
	return *o.PreferredEmail
}

// GetPreferredEmailOk returns a tuple with the PreferredEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetPreferredEmailOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredEmail) {
		return nil, false
	}
	return o.PreferredEmail, true
}

// HasPreferredEmail returns a boolean if a field has been set.
func (o *Subscriber) HasPreferredEmail() bool {
	if o != nil && !IsNil(o.PreferredEmail) {
		return true
	}

	return false
}

// SetPreferredEmail gets a reference to the given string and assigns it to the PreferredEmail field.
func (o *Subscriber) SetPreferredEmail(v string) {
	o.PreferredEmail = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *Subscriber) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *Subscriber) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *Subscriber) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *Subscriber) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *Subscriber) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *Subscriber) SetLastName(v string) {
	o.LastName = &v
}

func (o Subscriber) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subscriber) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PreferredEmail) {
		toSerialize["preferred_email"] = o.PreferredEmail
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	return toSerialize, nil
}

type NullableSubscriber struct {
	value *Subscriber
	isSet bool
}

func (v NullableSubscriber) Get() *Subscriber {
	return v.value
}

func (v *NullableSubscriber) Set(val *Subscriber) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriber) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriber(val *Subscriber) *NullableSubscriber {
	return &NullableSubscriber{value: val, isSet: true}
}

func (v NullableSubscriber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
