/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetEnvironmentResponseEnvironmentLinkColor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEnvironmentResponseEnvironmentLinkColor{}

// GetEnvironmentResponseEnvironmentLinkColor struct for GetEnvironmentResponseEnvironmentLinkColor
type GetEnvironmentResponseEnvironmentLinkColor struct {
	Raw *string `json:"raw,omitempty"`
	Hex *string `json:"hex,omitempty"`
	Hsl *string `json:"hsl,omitempty"`
}

// NewGetEnvironmentResponseEnvironmentLinkColor instantiates a new GetEnvironmentResponseEnvironmentLinkColor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEnvironmentResponseEnvironmentLinkColor() *GetEnvironmentResponseEnvironmentLinkColor {
	this := GetEnvironmentResponseEnvironmentLinkColor{}
	return &this
}

// NewGetEnvironmentResponseEnvironmentLinkColorWithDefaults instantiates a new GetEnvironmentResponseEnvironmentLinkColor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEnvironmentResponseEnvironmentLinkColorWithDefaults() *GetEnvironmentResponseEnvironmentLinkColor {
	this := GetEnvironmentResponseEnvironmentLinkColor{}
	return &this
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *GetEnvironmentResponseEnvironmentLinkColor) GetRaw() string {
	if o == nil || IsNil(o.Raw) {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEnvironmentResponseEnvironmentLinkColor) GetRawOk() (*string, bool) {
	if o == nil || IsNil(o.Raw) {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *GetEnvironmentResponseEnvironmentLinkColor) HasRaw() bool {
	if o != nil && !IsNil(o.Raw) {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *GetEnvironmentResponseEnvironmentLinkColor) SetRaw(v string) {
	o.Raw = &v
}

// GetHex returns the Hex field value if set, zero value otherwise.
func (o *GetEnvironmentResponseEnvironmentLinkColor) GetHex() string {
	if o == nil || IsNil(o.Hex) {
		var ret string
		return ret
	}
	return *o.Hex
}

// GetHexOk returns a tuple with the Hex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEnvironmentResponseEnvironmentLinkColor) GetHexOk() (*string, bool) {
	if o == nil || IsNil(o.Hex) {
		return nil, false
	}
	return o.Hex, true
}

// HasHex returns a boolean if a field has been set.
func (o *GetEnvironmentResponseEnvironmentLinkColor) HasHex() bool {
	if o != nil && !IsNil(o.Hex) {
		return true
	}

	return false
}

// SetHex gets a reference to the given string and assigns it to the Hex field.
func (o *GetEnvironmentResponseEnvironmentLinkColor) SetHex(v string) {
	o.Hex = &v
}

// GetHsl returns the Hsl field value if set, zero value otherwise.
func (o *GetEnvironmentResponseEnvironmentLinkColor) GetHsl() string {
	if o == nil || IsNil(o.Hsl) {
		var ret string
		return ret
	}
	return *o.Hsl
}

// GetHslOk returns a tuple with the Hsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEnvironmentResponseEnvironmentLinkColor) GetHslOk() (*string, bool) {
	if o == nil || IsNil(o.Hsl) {
		return nil, false
	}
	return o.Hsl, true
}

// HasHsl returns a boolean if a field has been set.
func (o *GetEnvironmentResponseEnvironmentLinkColor) HasHsl() bool {
	if o != nil && !IsNil(o.Hsl) {
		return true
	}

	return false
}

// SetHsl gets a reference to the given string and assigns it to the Hsl field.
func (o *GetEnvironmentResponseEnvironmentLinkColor) SetHsl(v string) {
	o.Hsl = &v
}

func (o GetEnvironmentResponseEnvironmentLinkColor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEnvironmentResponseEnvironmentLinkColor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Raw) {
		toSerialize["raw"] = o.Raw
	}
	if !IsNil(o.Hex) {
		toSerialize["hex"] = o.Hex
	}
	if !IsNil(o.Hsl) {
		toSerialize["hsl"] = o.Hsl
	}
	return toSerialize, nil
}

type NullableGetEnvironmentResponseEnvironmentLinkColor struct {
	value *GetEnvironmentResponseEnvironmentLinkColor
	isSet bool
}

func (v NullableGetEnvironmentResponseEnvironmentLinkColor) Get() *GetEnvironmentResponseEnvironmentLinkColor {
	return v.value
}

func (v *NullableGetEnvironmentResponseEnvironmentLinkColor) Set(val *GetEnvironmentResponseEnvironmentLinkColor) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEnvironmentResponseEnvironmentLinkColor) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEnvironmentResponseEnvironmentLinkColor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEnvironmentResponseEnvironmentLinkColor(val *GetEnvironmentResponseEnvironmentLinkColor) *NullableGetEnvironmentResponseEnvironmentLinkColor {
	return &NullableGetEnvironmentResponseEnvironmentLinkColor{value: val, isSet: true}
}

func (v NullableGetEnvironmentResponseEnvironmentLinkColor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEnvironmentResponseEnvironmentLinkColor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
