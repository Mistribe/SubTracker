/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateUserResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserResponse{}

// UpdateUserResponse struct for UpdateUserResponse
type UpdateUserResponse struct {
	// Unique ID of the user in Kinde.
	Id *string `json:"id,omitempty"`
	// User's first name.
	GivenName *string `json:"given_name,omitempty"`
	// User's last name.
	FamilyName *string `json:"family_name,omitempty"`
	// User's preferred email.
	Email *string `json:"email,omitempty"`
	// Whether the user is currently suspended or not.
	IsSuspended *bool `json:"is_suspended,omitempty"`
	// Whether a password reset has been requested.
	IsPasswordResetRequested *bool `json:"is_password_reset_requested,omitempty"`
	// User's profile picture URL.
	Picture NullableString `json:"picture,omitempty"`
}

// NewUpdateUserResponse instantiates a new UpdateUserResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserResponse() *UpdateUserResponse {
	this := UpdateUserResponse{}
	return &this
}

// NewUpdateUserResponseWithDefaults instantiates a new UpdateUserResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserResponseWithDefaults() *UpdateUserResponse {
	this := UpdateUserResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateUserResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateUserResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdateUserResponse) SetId(v string) {
	o.Id = &v
}

// GetGivenName returns the GivenName field value if set, zero value otherwise.
func (o *UpdateUserResponse) GetGivenName() string {
	if o == nil || IsNil(o.GivenName) {
		var ret string
		return ret
	}
	return *o.GivenName
}

// GetGivenNameOk returns a tuple with the GivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserResponse) GetGivenNameOk() (*string, bool) {
	if o == nil || IsNil(o.GivenName) {
		return nil, false
	}
	return o.GivenName, true
}

// HasGivenName returns a boolean if a field has been set.
func (o *UpdateUserResponse) HasGivenName() bool {
	if o != nil && !IsNil(o.GivenName) {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given string and assigns it to the GivenName field.
func (o *UpdateUserResponse) SetGivenName(v string) {
	o.GivenName = &v
}

// GetFamilyName returns the FamilyName field value if set, zero value otherwise.
func (o *UpdateUserResponse) GetFamilyName() string {
	if o == nil || IsNil(o.FamilyName) {
		var ret string
		return ret
	}
	return *o.FamilyName
}

// GetFamilyNameOk returns a tuple with the FamilyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserResponse) GetFamilyNameOk() (*string, bool) {
	if o == nil || IsNil(o.FamilyName) {
		return nil, false
	}
	return o.FamilyName, true
}

// HasFamilyName returns a boolean if a field has been set.
func (o *UpdateUserResponse) HasFamilyName() bool {
	if o != nil && !IsNil(o.FamilyName) {
		return true
	}

	return false
}

// SetFamilyName gets a reference to the given string and assigns it to the FamilyName field.
func (o *UpdateUserResponse) SetFamilyName(v string) {
	o.FamilyName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateUserResponse) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserResponse) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateUserResponse) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateUserResponse) SetEmail(v string) {
	o.Email = &v
}

// GetIsSuspended returns the IsSuspended field value if set, zero value otherwise.
func (o *UpdateUserResponse) GetIsSuspended() bool {
	if o == nil || IsNil(o.IsSuspended) {
		var ret bool
		return ret
	}
	return *o.IsSuspended
}

// GetIsSuspendedOk returns a tuple with the IsSuspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserResponse) GetIsSuspendedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuspended) {
		return nil, false
	}
	return o.IsSuspended, true
}

// HasIsSuspended returns a boolean if a field has been set.
func (o *UpdateUserResponse) HasIsSuspended() bool {
	if o != nil && !IsNil(o.IsSuspended) {
		return true
	}

	return false
}

// SetIsSuspended gets a reference to the given bool and assigns it to the IsSuspended field.
func (o *UpdateUserResponse) SetIsSuspended(v bool) {
	o.IsSuspended = &v
}

// GetIsPasswordResetRequested returns the IsPasswordResetRequested field value if set, zero value otherwise.
func (o *UpdateUserResponse) GetIsPasswordResetRequested() bool {
	if o == nil || IsNil(o.IsPasswordResetRequested) {
		var ret bool
		return ret
	}
	return *o.IsPasswordResetRequested
}

// GetIsPasswordResetRequestedOk returns a tuple with the IsPasswordResetRequested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserResponse) GetIsPasswordResetRequestedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPasswordResetRequested) {
		return nil, false
	}
	return o.IsPasswordResetRequested, true
}

// HasIsPasswordResetRequested returns a boolean if a field has been set.
func (o *UpdateUserResponse) HasIsPasswordResetRequested() bool {
	if o != nil && !IsNil(o.IsPasswordResetRequested) {
		return true
	}

	return false
}

// SetIsPasswordResetRequested gets a reference to the given bool and assigns it to the IsPasswordResetRequested field.
func (o *UpdateUserResponse) SetIsPasswordResetRequested(v bool) {
	o.IsPasswordResetRequested = &v
}

// GetPicture returns the Picture field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserResponse) GetPicture() string {
	if o == nil || IsNil(o.Picture.Get()) {
		var ret string
		return ret
	}
	return *o.Picture.Get()
}

// GetPictureOk returns a tuple with the Picture field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserResponse) GetPictureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Picture.Get(), o.Picture.IsSet()
}

// HasPicture returns a boolean if a field has been set.
func (o *UpdateUserResponse) HasPicture() bool {
	if o != nil && o.Picture.IsSet() {
		return true
	}

	return false
}

// SetPicture gets a reference to the given NullableString and assigns it to the Picture field.
func (o *UpdateUserResponse) SetPicture(v string) {
	o.Picture.Set(&v)
}

// SetPictureNil sets the value for Picture to be an explicit nil
func (o *UpdateUserResponse) SetPictureNil() {
	o.Picture.Set(nil)
}

// UnsetPicture ensures that no value is present for Picture, not even an explicit nil
func (o *UpdateUserResponse) UnsetPicture() {
	o.Picture.Unset()
}

func (o UpdateUserResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.GivenName) {
		toSerialize["given_name"] = o.GivenName
	}
	if !IsNil(o.FamilyName) {
		toSerialize["family_name"] = o.FamilyName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.IsSuspended) {
		toSerialize["is_suspended"] = o.IsSuspended
	}
	if !IsNil(o.IsPasswordResetRequested) {
		toSerialize["is_password_reset_requested"] = o.IsPasswordResetRequested
	}
	if o.Picture.IsSet() {
		toSerialize["picture"] = o.Picture.Get()
	}
	return toSerialize, nil
}

type NullableUpdateUserResponse struct {
	value *UpdateUserResponse
	isSet bool
}

func (v NullableUpdateUserResponse) Get() *UpdateUserResponse {
	return v.value
}

func (v *NullableUpdateUserResponse) Set(val *UpdateUserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserResponse(val *UpdateUserResponse) *NullableUpdateUserResponse {
	return &NullableUpdateUserResponse{value: val, isSet: true}
}

func (v NullableUpdateUserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
