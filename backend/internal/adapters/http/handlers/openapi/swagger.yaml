components:
  schemas:
    dto.AmountModel:
      description: '@Description Custom price for this subscription'
      properties:
        currency:
          example: USD
          type: string
        source:
          $ref: '#/components/schemas/dto.AmountModel'
        value:
          example: 100
          type: number
      required:
      - currency
      - value
      type: object
    dto.CreateFamilyMemberRequest:
      properties:
        created_at:
          format: date-time
          type: string
        id:
          type: string
        name:
          type: string
        type:
          enum:
          - owner
          - adult
          - kid
          type: string
      required:
      - name
      - type
      type: object
    dto.CreateFamilyRequest:
      properties:
        created_at:
          format: date-time
          type: string
        creator_name:
          type: string
        id:
          type: string
        name:
          type: string
      required:
      - creator_name
      - name
      type: object
    dto.CreateLabelRequest:
      properties:
        color:
          type: string
        created_at:
          format: date-time
          type: string
        id:
          type: string
        name:
          type: string
        owner:
          $ref: '#/components/schemas/dto.EditableOwnerModel'
      required:
      - color
      - name
      - owner
      type: object
    dto.CreateProviderRequest:
      properties:
        created_at:
          format: date-time
          type: string
        description:
          type: string
        icon_url:
          type: string
        id:
          type: string
        labels:
          items:
            type: string
          type: array
          uniqueItems: false
        name:
          type: string
        owner:
          $ref: '#/components/schemas/dto.EditableOwnerModel'
        pricing_page_url:
          type: string
        url:
          type: string
      required:
      - labels
      - name
      - owner
      type: object
    dto.CreateSubscriptionRequest:
      properties:
        created_at:
          type: string
        custom_price:
          $ref: '#/components/schemas/dto.AmountModel'
        custom_recurrency:
          type: integer
        end_date:
          format: date-time
          type: string
        family_users:
          items:
            type: string
          type: array
          uniqueItems: false
        free_trial:
          $ref: '#/components/schemas/dto.SubscriptionFreeTrialModel'
        friendly_name:
          type: string
        id:
          type: string
        labels:
          items:
            type: string
          type: array
          uniqueItems: false
        owner:
          $ref: '#/components/schemas/dto.EditableOwnerModel'
        payer:
          $ref: '#/components/schemas/dto.EditableSubscriptionPayerModel'
        provider_id:
          type: string
        recurrency:
          type: string
        start_date:
          format: date-time
          type: string
      required:
      - owner
      - provider_id
      - recurrency
      - start_date
      type: object
    dto.CurrencyRateModel:
      properties:
        currency:
          type: string
        rate:
          type: number
      required:
      - currency
      - rate
      type: object
    dto.CurrencyRatesModel:
      properties:
        rates:
          items:
            $ref: '#/components/schemas/dto.CurrencyRateModel'
          type: array
          uniqueItems: false
        timestamp:
          format: date-time
          type: string
      required:
      - rates
      - timestamp
      type: object
    dto.EditableOwnerModel:
      properties:
        family_id:
          description: '@Description Family LabelID when an ownership type is family
            (required for family ownership)'
          type: string
        type:
          description: '@Description Type of ownership (personal, family or system)'
          enum:
          - personal
          - family
          - system
          example: personal
          type: string
      required:
      - type
      type: object
    dto.EditableSubscriptionPayerModel:
      description: Subscription payer object used for updating who pays for a subscription
      properties:
        family_id:
          description: '@Description LabelID of the family associated with this payer'
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        memberId:
          description: '@Description LabelID of the specific family member who pays
            (required when type is family_member)'
          example: 123e4567-e89b-12d3-a456-426614174001
          type: string
        type:
          description: '@Description Type of payer (family or family member)'
          enum:
          - family
          - family_member
          example: family_member
          type: string
      required:
      - family_id
      - type
      type: object
    dto.FamilyAcceptInvitationRequest:
      properties:
        family_member_id:
          description: LabelID of the family member accepting the invitation
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        invitation_code:
          description: Code received in the invitation
          example: "123456"
          type: string
      required:
      - family_member_id
      - invitation_code
      type: object
    dto.FamilyDeclineInvitationRequest:
      properties:
        family_member_id:
          description: LabelID of the family member accepting the invitation
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        invitation_code:
          description: Code received in the invitation
          example: "123456"
          type: string
      required:
      - family_member_id
      - invitation_code
      type: object
    dto.FamilyInviteRequest:
      properties:
        email:
          description: Email of the invited member
          type: string
        family_member_id:
          description: LabelID of the family member to be invited
          type: string
        name:
          description: Name of the invited member
          type: string
        type:
          description: Type of the member (adult or kid)
          enum:
          - adult
          - kid
          type: string
      required:
      - family_member_id
      type: object
    dto.FamilyInviteResponse:
      properties:
        code:
          example: "123456"
          type: string
        family_id:
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        family_member_id:
          example: 123e4567-e89b-12d3-a456-426614174001
          type: string
      required:
      - code
      - family_id
      - family_member_id
      type: object
    dto.FamilyMemberModel:
      description: Family member object containing member information
      properties:
        created_at:
          description: '@Description Timestamp when the member was created'
          format: date-time
          type: string
        etag:
          description: '@Description Entity tag for optimistic concurrency control'
          example: W/"123456789"
          type: string
        family_id:
          description: '@Description LabelID of the family this member belongs to'
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        has_account:
          description: '@Description Indicates whether this member has an account
            with the service provider'
          example: true
          type: boolean
        id:
          description: '@Description Unique identifier for the family member'
          example: 123e4567-e89b-12d3-a456-426614174001
          type: string
        is_you:
          description: '@Description Indicates whether this member is the current
            authenticated user'
          example: false
          type: boolean
        name:
          description: '@Description Name of the family member'
          example: John Smith
          type: string
        type:
          description: '@Description Whether this member is a child (affects permissions
            and features)'
          enum:
          - owner
          - adult
          - kid
          type: string
        updated_at:
          description: '@Description Timestamp when the member was last updated'
          format: date-time
          type: string
      required:
      - created_at
      - etag
      - family_id
      - has_account
      - id
      - is_you
      - name
      - type
      - updated_at
      type: object
    dto.FamilyModel:
      description: Family details
      properties:
        created_at:
          description: '@Description ISO 8601 timestamp indicating when the family
            was originally created'
          example: "2023-01-15T10:30:00Z"
          format: date-time
          type: string
        etag:
          description: '@Description Entity tag used for optimistic concurrency control
            to prevent conflicting updates'
          example: W/"123456789"
          type: string
        id:
          description: '@Description Unique identifier for the family (UUID format)'
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        is_owner:
          description: '@Description Indicates whether the current authenticated user
            is the owner of this family'
          example: true
          type: boolean
        members:
          description: '@Description Complete list of all members belonging to this
            family'
          items:
            $ref: '#/components/schemas/dto.FamilyMemberModel'
          type: array
          uniqueItems: false
        name:
          description: '@Description Display name of the family'
          example: Smith Family
          maxLength: 255
          minLength: 1
          type: string
        updated_at:
          description: '@Description ISO 8601 timestamp indicating when the family
            information was last modified'
          example: "2023-01-20T14:45:30Z"
          format: date-time
          type: string
      required:
      - created_at
      - etag
      - id
      - is_owner
      - members
      - name
      - updated_at
      type: object
    dto.FamilySeeInvitationResponse:
      properties:
        family:
          $ref: '#/components/schemas/dto.FamilyModel'
        invited_inasmuch_as:
          description: Role of the invited member
          example: OWNER
          type: string
      type: object
    dto.LabelModel:
      properties:
        color:
          description: '@Description Hexadecimal color code for visual representation
            of the label'
          example: '#FF5733'
          pattern: ^#[0-9A-Fa-f]{6}$
          type: string
        created_at:
          description: '@Description ISO 8601 timestamp indicating when the label
            was originally created'
          example: "2023-01-15T10:30:00Z"
          format: date-time
          type: string
        etag:
          description: '@Description Entity tag used for optimistic concurrency control
            to prevent conflicting updates'
          example: W/"123456789"
          type: string
        id:
          description: '@Description Unique identifier for the label (UUID format)'
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        key:
          type: string
        name:
          description: '@Description Display name of the label'
          example: Entertainment
          maxLength: 100
          minLength: 1
          type: string
        owner:
          $ref: '#/components/schemas/dto.OwnerModel'
        updated_at:
          description: '@Description ISO 8601 timestamp indicating when the label
            was last modified'
          example: "2023-01-20T14:45:30Z"
          format: date-time
          type: string
      required:
      - color
      - created_at
      - etag
      - id
      - name
      - owner
      - updated_at
      type: object
    dto.LabelRefModel:
      properties:
        label_id:
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        source:
          enum:
          - subscription
          - provider
          example: subscription
          type: string
      required:
      - label_id
      - source
      type: object
    dto.OwnerModel:
      description: '@Description Ownership information specifying whether this subscription
        belongs to a user or family'
      properties:
        etag:
          description: '@Description Entity tag for optimistic concurrency control'
          example: W/"123456789"
          type: string
        family_id:
          description: '@Description Family LabelID when an ownership type is family
            (required for family ownership)'
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        type:
          description: '@Description Type of ownership (personal, family or system)'
          enum:
          - personal
          - family
          - system
          example: personal
          type: string
        userId:
          description: '@Description UserProfile LabelID when an ownership type is
            personal (required for personal ownership)'
          example: 123e4567-e89b-12d3-a456-426614174001
          type: string
      required:
      - etag
      - type
      type: object
    dto.PaginatedResponseModel-ProviderModel:
      properties:
        data:
          description: Data contains the list of items for the current page
          items:
            $ref: '#/components/schemas/dto.ProviderModel'
          type: array
          uniqueItems: false
        length:
          description: Length represents the number of items in the current page
          type: integer
        total:
          description: Total represents the total number of items available
          type: integer
      required:
      - data
      - length
      - total
      type: object
    dto.PaginatedResponseModel-SubscriptionModel:
      properties:
        data:
          description: Data contains the list of items for the current page
          items:
            $ref: '#/components/schemas/dto.SubscriptionModel'
          type: array
          uniqueItems: false
        length:
          description: Length represents the number of items in the current page
          type: integer
        total:
          description: Total represents the total number of items available
          type: integer
      required:
      - data
      - length
      - total
      type: object
    dto.PaginatedResponseModel-dto_LabelModel:
      properties:
        data:
          description: Data contains the list of items for the current page
          items:
            $ref: '#/components/schemas/dto.LabelModel'
          type: array
          uniqueItems: false
        length:
          description: Length represents the number of items in the current page
          type: integer
        total:
          description: Total represents the total number of items available
          type: integer
      required:
      - data
      - length
      - total
      type: object
    dto.ProviderModel:
      description: Provider object containing information about a subscription service
        provider and their available plans
      properties:
        created_at:
          description: '@Description ISO 8601 timestamp when the provider was originally
            created'
          example: "2023-01-15T10:30:00Z"
          format: date-time
          type: string
        description:
          description: '@Description Optional detailed description of the provider
            and their services'
          example: Streaming service offering movies and TV shows
          type: string
        etag:
          description: '@Description Entity tag used for optimistic concurrency control
            to prevent conflicting updates'
          example: W/"123456789"
          type: string
        icon_url:
          description: '@Description Optional URL to the provider''s icon or logo
            image'
          example: https://example.com/netflix-icon.png
          type: string
        id:
          description: '@Description Unique identifier for the provider (UUID format)'
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        key:
          type: string
        labels:
          description: '@Description List of label IDs associated with this provider
            for categorization'
          example:
          - 123e4567-e89b-12d3-a456-426614174001
          - 123e4567-e89b-12d3-a456-426614174002
          items:
            type: string
          type: array
          uniqueItems: false
        name:
          description: '@Description Display name of the service provider'
          example: Netflix
          maxLength: 255
          minLength: 1
          type: string
        owner:
          $ref: '#/components/schemas/dto.OwnerModel'
        pricing_page_url:
          description: '@Description Optional URL to the provider''s pricing information
            page'
          example: https://netflix.com/pricing
          type: string
        updated_at:
          description: '@Description ISO 8601 timestamp when the provider was last
            modified'
          example: "2023-01-20T14:45:30Z"
          format: date-time
          type: string
        url:
          description: '@Description Optional URL to the provider''s main website'
          example: https://netflix.com
          type: string
      required:
      - created_at
      - etag
      - id
      - labels
      - name
      - owner
      - updated_at
      type: object
    dto.QuotaUsageModel:
      properties:
        enabled:
          example: true
          type: boolean
        feature:
          enum:
          - subscriptions
          - active_subscriptions_count
          - custom_labels
          - custom_labels_count
          - custom_providers
          - custom_providers_count
          - family
          - family_members_count
          type: string
        limit:
          type: integer
        remaining:
          type: integer
        type:
          enum:
          - boolean
          - quota
          - unknown
          type: string
        used:
          type: integer
      type: object
    dto.SubscriptionFreeTrialModel:
      description: '@Description Number of free trial days remaining (null if no trial
        or trial expired)'
      properties:
        end_date:
          format: date-time
          type: string
        start_date:
          format: date-time
          type: string
      required:
      - end_date
      - start_date
      type: object
    dto.SubscriptionModel:
      description: Subscription object containing all information about an active
        subscription including billing and usage details
      properties:
        created_at:
          description: '@Description ISO 8601 timestamp when the subscription was
            originally created'
          example: "2023-01-15T10:30:00Z"
          format: date-time
          type: string
        custom_price:
          $ref: '#/components/schemas/dto.AmountModel'
        custom_recurrency:
          description: '@Description CustomRecurrency recurrency interval in days
            (required when recurrency is custom)'
          example: 90
          maximum: 3650
          minimum: 1
          type: integer
        end_date:
          description: '@Description ISO 8601 timestamp when the subscription expires
            (null for ongoing subscriptions)'
          example: "2024-01-01T00:00:00Z"
          format: date-time
          type: string
        etag:
          description: '@Description Entity tag used for optimistic concurrency control
            to prevent conflicting updates'
          example: W/"123456789"
          type: string
        free_trial:
          $ref: '#/components/schemas/dto.SubscriptionFreeTrialModel'
        friendly_name:
          description: '@Description Optional custom name for easy identification
            of the subscription'
          example: Netflix Family Account
          maxLength: 255
          type: string
        id:
          description: '@Description Unique identifier for the subscription (UUID
            format)'
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        is_active:
          description: '@Description Indicates whether the subscription is currently
            active or not'
          example: true
          type: boolean
        label_refs:
          description: '@Description List of labels associated with this subscription'
          items:
            $ref: '#/components/schemas/dto.LabelRefModel'
          type: array
          uniqueItems: false
        owner:
          $ref: '#/components/schemas/dto.OwnerModel'
        payer:
          $ref: '#/components/schemas/dto.SubscriptionPayerModel'
        plan_id:
          description: '@Description LabelID of the specific plan being subscribed
            to'
          example: 123e4567-e89b-12d3-a456-426614174003
          type: string
        price:
          $ref: '#/components/schemas/dto.SubscriptionPriceModel'
        price_id:
          description: '@Description LabelID of the pricing tier for this subscription'
          example: 123e4567-e89b-12d3-a456-426614174004
          type: string
        provider_id:
          description: '@Description LabelID of the service provider offering this
            subscription'
          example: 123e4567-e89b-12d3-a456-426614174002
          type: string
        recurrency:
          description: '@Description Billing recurrency pattern (monthly, yearly,
            custom, etc.)'
          enum:
          - unknown
          - one_time
          - monthly
          - quarterly
          - half_yearly
          - yearly
          - custom
          example: monthly
          type: string
        service_users:
          description: '@Description List of family member IDs who use this service
            (for shared subscriptions)'
          example:
          - 123e4567-e89b-12d3-a456-426614174005
          - 123e4567-e89b-12d3-a456-426614174006
          items:
            type: string
          type: array
          uniqueItems: false
        start_date:
          description: '@Description ISO 8601 timestamp when the subscription becomes
            active'
          example: "2023-01-01T00:00:00Z"
          format: date-time
          type: string
        updated_at:
          description: '@Description ISO 8601 timestamp when the subscription was
            last modified'
          example: "2023-01-20T14:45:30Z"
          format: date-time
          type: string
      required:
      - created_at
      - etag
      - id
      - is_active
      - owner
      - provider_id
      - recurrency
      - start_date
      - updated_at
      type: object
    dto.SubscriptionPayerModel:
      description: '@Description Information about who pays for this subscription
        within the family'
      properties:
        etag:
          description: '@Description Entity tag used for optimistic concurrency control
            to prevent conflicting updates'
          example: W/"123456789"
          type: string
        family_id:
          description: '@Description LabelID of the family associated with this payer'
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        memberId:
          description: '@Description LabelID of the specific family member who pays
            (required when type is family_member)'
          example: 123e4567-e89b-12d3-a456-426614174001
          type: string
        type:
          description: '@Description Type of payer (family or family member)'
          enum:
          - family
          - family_member
          example: family_member
          type: string
      required:
      - etag
      - family_id
      - type
      type: object
    dto.SubscriptionPriceModel:
      description: '@Description Price details for this subscription'
      properties:
        monthly:
          $ref: '#/components/schemas/dto.AmountModel'
        yearly:
          $ref: '#/components/schemas/dto.AmountModel'
      required:
      - monthly
      - yearly
      type: object
    dto.SubscriptionSummaryResponse:
      properties:
        active:
          example: 10
          type: integer
        top_labels:
          items:
            $ref: '#/components/schemas/dto.SubscriptionSummaryTopLabelResponse'
          type: array
          uniqueItems: false
        top_providers:
          items:
            $ref: '#/components/schemas/dto.SubscriptionSummaryTopProviderResponse'
          type: array
          uniqueItems: false
        total_last_month:
          $ref: '#/components/schemas/dto.AmountModel'
        total_last_year:
          $ref: '#/components/schemas/dto.AmountModel'
        total_monthly:
          $ref: '#/components/schemas/dto.AmountModel'
        total_yearly:
          $ref: '#/components/schemas/dto.AmountModel'
        upcoming_renewals:
          items:
            $ref: '#/components/schemas/dto.SubscriptionSummaryUpcomingRenewalResponse'
          type: array
          uniqueItems: false
      type: object
    dto.SubscriptionSummaryTopLabelResponse:
      properties:
        label_id:
          type: string
        total:
          $ref: '#/components/schemas/dto.AmountModel'
      required:
      - label_id
      type: object
    dto.SubscriptionSummaryTopProviderResponse:
      properties:
        duration:
          type: string
        provider_id:
          type: string
        total:
          $ref: '#/components/schemas/dto.AmountModel'
      required:
      - provider_id
      type: object
    dto.SubscriptionSummaryUpcomingRenewalResponse:
      properties:
        at:
          format: date-time
          type: string
        provider_id:
          type: string
        source:
          $ref: '#/components/schemas/dto.AmountModel'
        total:
          $ref: '#/components/schemas/dto.AmountModel'
      required:
      - at
      - provider_id
      type: object
    dto.UpdateFamilyMemberRequest:
      properties:
        name:
          type: string
        type:
          enum:
          - owner
          - adult
          - kid
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      - type
      type: object
    dto.UpdateFamilyRequest:
      properties:
        name:
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
    dto.UpdateLabelRequest:
      properties:
        color:
          type: string
        name:
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - color
      - name
      type: object
    dto.UpdatePreferredCurrencyRequest:
      properties:
        currency:
          type: string
      required:
      - currency
      type: object
    dto.UpdateProviderRequest:
      properties:
        description:
          type: string
        icon_url:
          type: string
        labels:
          items:
            type: string
          type: array
          uniqueItems: false
        name:
          type: string
        pricing_page_url:
          type: string
        updated_at:
          format: date-time
          type: string
        url:
          type: string
      required:
      - labels
      - name
      type: object
    dto.UpdateSubscriptionRequest:
      properties:
        custom_price:
          $ref: '#/components/schemas/dto.AmountModel'
        custom_recurrency:
          type: integer
        end_date:
          format: date-time
          type: string
        free_trial:
          $ref: '#/components/schemas/dto.SubscriptionFreeTrialModel'
        friendly_name:
          type: string
        labels:
          items:
            type: string
          type: array
          uniqueItems: false
        owner:
          $ref: '#/components/schemas/dto.EditableOwnerModel'
        payer:
          $ref: '#/components/schemas/dto.EditableSubscriptionPayerModel'
        plan_id:
          type: string
        price_id:
          type: string
        provider_id:
          type: string
        recurrency:
          type: string
        service_users:
          items:
            type: string
          type: array
          uniqueItems: false
        start_date:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - owner
      - provider_id
      - recurrency
      - start_date
      type: object
    dto.UserPreferredCurrencyModel:
      properties:
        currency:
          type: string
      type: object
    ginx.HttpErrorResponse:
      properties:
        message:
          type: string
      required:
      - message
      type: object
externalDocs:
  description: ""
  url: ""
info:
  contact:
    email: support@mistribe.com
    name: API Support
    url: http://subtracker.mistribe.com/support
  description: This api provide HTTPRest endpoints for the application SubTracker.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://subtracker.mistribe.com/terms/
  title: SubTracker API
  version: "1.0"
openapi: 3.1.0
paths:
  /accounts:
    delete:
      description: Deletes the authenticated user's account
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Delete user
      tags:
      - accounts
  /accounts/preferred/currency:
    get:
      description: Returns the preferred currency for the authenticated account
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.UserPreferredCurrencyModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized
      summary: Get user preferred currency
      tags:
      - accounts
  /accounts/quota/usage:
    get:
      description: Retrieve the current quota usage and limits for the authenticated
        user
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/dto.QuotaUsageModel'
                type: array
          description: Successfully retrieved quota usage
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid user authentication
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Get quota usage
      tags:
      - accounts
  /currencies/rates:
    get:
      description: Get exchange rates for all currencies at a specific date
      parameters:
      - description: 'Conversion date in RFC3339 format (default: current time)'
        in: query
        name: date
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.CurrencyRatesModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Get Currency Rates
      tags:
      - currencies
  /currencies/supported:
    get:
      description: get details of all supported currencies
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: currencies
      summary: Get Supported Currencies
      tags:
      - currencies
  /family:
    get:
      description: Retrieve the user's family
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.FamilyModel'
          description: Successfully retrieved family
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid LabelID format
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid user authentication
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Family not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Get user's family
      tags:
      - family
    post:
      description: Create a new family with the authenticated user as the owner and
        initial member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.CreateFamilyRequest'
        description: Family creation data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.FamilyModel'
          description: Successfully created family
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid input data
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid user authentication
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Create a new family
      tags:
      - family
  /family/{familyId}:
    delete:
      description: Permanently delete a family and all its members
      parameters:
      - description: Family LabelID (UUID format)
        in: path
        name: familyId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Family successfully deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid family LabelID format
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Family not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Delete family by LabelID
      tags:
      - family
    put:
      description: Update family information such as name and other details
      parameters:
      - description: Family LabelID (UUID format)
        in: path
        name: familyId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.UpdateFamilyRequest'
        description: Updated family data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.FamilyModel'
          description: Successfully updated family
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid input data or family LabelID
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid user authentication
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Family not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Update a family
      tags:
      - family
  /family/{familyId}/accept:
    post:
      description: Accepts an invitation to join a family using the provided invitation
        code
      parameters:
      - description: Family LabelID (UUID format)
        in: path
        name: familyId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.FamilyAcceptInvitationRequest'
        description: Invitation acceptance details
        required: true
      responses:
        "204":
          content:
            application/json: {}
          description: Successfully accepted invitation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid input data
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid or missing authentication
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Family not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Accept a family invitation
      tags:
      - family
  /family/{familyId}/decline:
    post:
      description: Endpoint to decline an invitation to join a family
      parameters:
      - description: Family LabelID
        in: path
        name: familyId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.FamilyDeclineInvitationRequest'
        description: Decline invitation request
        required: true
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request
      summary: Decline family invitation
      tags:
      - family
  /family/{familyId}/invitation:
    get:
      description: Get information about a family invitation using invitation code
      parameters:
      - description: Family LabelID
        in: path
        name: familyId
        required: true
        schema:
          type: string
      - description: Invitation code
        in: query
        name: code
        required: true
        schema:
          type: string
      - description: Family member LabelID
        in: query
        name: family_member_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.FamilySeeInvitationResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request
      summary: View family invitation details
      tags:
      - family
  /family/{familyId}/invite:
    post:
      description: Creates an invitation for a new member to join the family
      parameters:
      - description: Family LabelID (UUID format)
        in: path
        name: familyId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.FamilyInviteRequest'
        description: Invitation details including email, name, member LabelID and
          type (adult/kid)
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.FamilyInviteResponse'
          description: Successfully created invitation with code and IDs
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid input data
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid or missing authentication
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Family not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Invite a new member to the family
      tags:
      - family
  /family/{familyId}/members:
    post:
      description: Add a new member to an existing family
      parameters:
      - description: Family LabelID (UUID format)
        in: path
        name: familyId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.CreateFamilyMemberRequest'
        description: Family member creation data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.FamilyModel'
          description: Successfully added family member
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid input data or family LabelID
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid user authentication
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Family not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Add a new family member
      tags:
      - family
  /family/{familyId}/members/{familyMemberId}:
    delete:
      description: Permanently delete a family member from a family
      parameters:
      - description: Family LabelID (UUID format)
        in: path
        name: familyId
        required: true
        schema:
          type: string
      - description: Family member LabelID (UUID format)
        in: path
        name: familyMemberId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Family member successfully deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid LabelID format
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Family or family member not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Delete family member by LabelID
      tags:
      - family
    put:
      description: Update an existing family member's information such as name and
        kid status
      parameters:
      - description: Family LabelID (UUID format)
        in: path
        name: familyId
        required: true
        schema:
          type: string
      - description: Family member LabelID (UUID format)
        in: path
        name: familyMemberId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.UpdateFamilyMemberRequest'
        description: Updated family member data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.FamilyModel'
          description: Successfully updated family member
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid input data or LabelID format
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid user authentication
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Family or family member not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Update family member by LabelID
      tags:
      - family
  /family/{familyId}/members/{familyMemberId}/revoke:
    post:
      description: Revokes a member from the family
      parameters:
      - description: Family LabelID (UUID format)
        in: path
        name: familyId
        required: true
        schema:
          type: string
      - description: Family Member LabelID (UUID format)
        in: path
        name: familyMemberId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "204":
          content:
            application/json: {}
          description: Successfully revoked member
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid input data
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid or missing authentication
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Family or member not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Revoke family member
      tags:
      - family
  /family/quota/usage:
    get:
      description: Retrieve the current quota usage and limits for the authenticated
        user
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/dto.QuotaUsageModel'
                type: array
          description: Successfully retrieved quota usage
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid user authentication
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Get quota usage
      tags:
      - family
  /healthz/live:
    get:
      description: Returns the health status of the application
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: Health status
      summary: Health check endpoint
      tags:
      - health
  /labels:
    get:
      description: Retrieve a paginated list of labels with optional filtering by
        owner type and search text
      parameters:
      - description: Search text to filter labels by name
        in: query
        name: search
        schema:
          type: string
      - description: 'Maximum number of items to return (default: 10)'
        in: query
        name: limit
        schema:
          type: integer
      - description: 'Number of items to skip for pagination (default: 0)'
        in: query
        name: offset
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.PaginatedResponseModel-dto_LabelModel'
          description: Paginated list of labels
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid query parameters
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Get all labels
      tags:
      - labels
    post:
      description: Create a new label with specified name, color, and owner information
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.CreateLabelRequest'
        description: Label creation data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.LabelModel'
          description: Successfully created label
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid input data
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid user authentication
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Create a new label
      tags:
      - labels
  /labels/{labelId}:
    delete:
      description: Permanently delete a label by its unique identifier
      parameters:
      - description: Label LabelID (UUID format)
        in: path
        name: labelId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Label successfully deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid LabelID format
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Label not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Delete label by LabelID
      tags:
      - labels
    get:
      description: Retrieve a single label by its unique identifier
      parameters:
      - description: Label LabelID (UUID format)
        in: path
        name: labelId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.LabelModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid LabelID format
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Label not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Get label by LabelID
      tags:
      - labels
    put:
      description: Update an existing label's name and color by its unique identifier
      parameters:
      - description: Label LabelID (UUID format)
        in: path
        name: labelId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.UpdateLabelRequest'
        description: Updated label data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.LabelModel'
          description: Successfully updated label
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid LabelID format or input data
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Label not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Update label by LabelID
      tags:
      - labels
  /labels/quota/usage:
    get:
      description: Retrieve the current quota usage and limits for the authenticated
        user
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/dto.QuotaUsageModel'
                type: array
          description: Successfully retrieved quota usage
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid user authentication
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Get quota usage
      tags:
      - labels
  /providers:
    get:
      description: Retrieve a paginated list of all providers with their plans and
        prices
      parameters:
      - description: Search term
        in: query
        name: search
        schema:
          type: string
      - description: 'Offset (default: 0)'
        in: query
        name: offset
        schema:
          type: integer
      - description: 'Limit per request (default: 10)'
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.PaginatedResponseModel-ProviderModel'
          description: Paginated list of providers
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid query parameters
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Get all providers
      tags:
      - providers
    post:
      description: Create a new service provider with labels and owner information
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.CreateProviderRequest'
        description: Provider creation data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.ProviderModel'
          description: Successfully created provider
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid input data
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid user authentication
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Create a new provider
      tags:
      - providers
  /providers/{providerId}:
    delete:
      description: Permanently delete a provider and all its associated plans and
        prices
      parameters:
      - description: Provider LabelID (UUID format)
        in: path
        name: providerId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Provider successfully deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid provider LabelID format
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Provider not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Delete provider by LabelID
      tags:
      - providers
    get:
      description: Retrieve a single provider with all its plans and prices by LabelID
      parameters:
      - description: Provider LabelID (UUID format)
        in: path
        name: providerId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.ProviderModel'
          description: Successfully retrieved provider
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid provider LabelID format
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Provider not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Get provider by LabelID
      tags:
      - providers
    put:
      description: Update an existing provider's basic information
      parameters:
      - description: Provider LabelID (UUID format)
        in: path
        name: providerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.UpdateProviderRequest'
        description: Updated provider data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.ProviderModel'
          description: Successfully updated provider
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid input data or provider LabelID
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Provider not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Update provider by LabelID
      tags:
      - providers
  /providers/quota/usage:
    get:
      description: Retrieve the current quota usage and limits for the authenticated
        user
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/dto.QuotaUsageModel'
                type: array
          description: Successfully retrieved quota usage
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid user authentication
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Get quota usage
      tags:
      - providers
  /subscriptions:
    get:
      description: Retrieve a paginated list of all subscriptions for the authenticated
        user
      parameters:
      - description: Search text
        in: query
        name: search
        schema:
          type: string
      - description: Filter by recurrency types
        in: query
        name: recurrencies
        schema:
          items:
            type: string
          type: array
      - description: Filter by start date (RFC3339)
        in: query
        name: from_date
        schema:
          type: string
      - description: Filter by end date (RFC3339)
        in: query
        name: to_date
        schema:
          type: string
      - description: Filter by user IDs
        in: query
        name: users
        schema:
          items:
            type: string
          type: array
      - description: Include inactive subscriptions
        in: query
        name: with_inactive
        schema:
          type: boolean
      - description: Filter by provider IDs
        in: query
        name: providers
        schema:
          items:
            type: string
          type: array
      - description: 'Number of items per page (default: 10)'
        in: query
        name: limit
        schema:
          type: integer
      - description: 'Page number (default: 0)'
        in: query
        name: offset
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.PaginatedResponseModel-SubscriptionModel'
          description: Paginated list of subscriptions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid query parameters
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Get all subscriptions
      tags:
      - subscriptions
    post:
      description: Create a new subscription with provider, plan, pricing, and payment
        information
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.CreateSubscriptionRequest'
        description: Subscription creation data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.SubscriptionModel'
          description: Successfully created subscription
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid input data
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid user authentication
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Create a new subscription
      tags:
      - subscriptions
  /subscriptions/{subscriptionId}:
    delete:
      description: Permanently delete an existing subscription
      parameters:
      - description: Subscription LabelID (UUID format)
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Subscription successfully deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid subscription LabelID format
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Subscription not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Delete subscription by LabelID
      tags:
      - subscriptions
    get:
      description: Retrieve a single subscription with all its details including provider,
        plan, and pricing information
      parameters:
      - description: Subscription LabelID (UUID format)
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.SubscriptionModel'
          description: Successfully retrieved subscription
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid subscription LabelID format
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Subscription not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Get subscription by LabelID
      tags:
      - subscriptions
    put:
      description: Update an existing subscription's details including provider, plan,
        pricing, and payment information
      parameters:
      - description: Subscription LabelID (UUID format)
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.UpdateSubscriptionRequest'
        description: Updated subscription data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.SubscriptionModel'
          description: Successfully updated subscription
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request - Invalid input data or subscription LabelID
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid user authentication
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Subscription not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Update subscription by LabelID
      tags:
      - subscriptions
  /subscriptions/quota/usage:
    get:
      description: Retrieve the current quota usage and limits for the authenticated
        user
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/dto.QuotaUsageModel'
                type: array
          description: Successfully retrieved quota usage
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized - Invalid user authentication
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Internal Server Error
      summary: Get quota usage
      tags:
      - subscriptions
  /subscriptions/summary:
    get:
      description: Returns summary information about subscriptions including total
        costs and upcoming renewals
      parameters:
      - description: Number of top providers to return
        in: query
        name: top_providers
        required: true
        schema:
          type: integer
      - description: Number of top labels to return
        in: query
        name: top_labels
        required: true
        schema:
          type: integer
      - description: Number of upcoming renewals to return
        in: query
        name: upcoming_renewals
        required: true
        schema:
          type: integer
      - description: Include monthly total costs
        in: query
        name: total_monthly
        required: true
        schema:
          type: boolean
      - description: Include yearly total costs
        in: query
        name: total_yearly
        required: true
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.SubscriptionSummaryResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request
      summary: Get subscription summary
      tags:
      - subscriptions
  /users/preferred/currency:
    put:
      description: Updates the preferred currency for the authenticated account
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.UpdatePreferredCurrencyRequest'
        description: Profile update parameters
        required: true
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ginx.HttpErrorResponse'
          description: Unauthorized
      summary: Update user preferred currency
      tags:
      - accounts
servers:
- description: Production server
  url: https://api.subtracker.mistribe.com
- description: Development server
  url: http://localhost:8080
