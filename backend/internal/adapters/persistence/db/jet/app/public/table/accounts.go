//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Accounts = newAccountsTable("public", "accounts", "")

type accountsTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnString
	Currency postgres.ColumnString
	Plan     postgres.ColumnString
	FamilyID postgres.ColumnString
	Role     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type AccountsTable struct {
	accountsTable

	EXCLUDED accountsTable
}

// AS creates new AccountsTable with assigned alias
func (a AccountsTable) AS(alias string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountsTable with assigned schema name
func (a AccountsTable) FromSchema(schemaName string) *AccountsTable {
	return newAccountsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountsTable with assigned table prefix
func (a AccountsTable) WithPrefix(prefix string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountsTable with assigned table suffix
func (a AccountsTable) WithSuffix(suffix string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountsTable(schemaName, tableName, alias string) *AccountsTable {
	return &AccountsTable{
		accountsTable: newAccountsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newAccountsTableImpl("", "excluded", ""),
	}
}

func newAccountsTableImpl(schemaName, tableName, alias string) accountsTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		CurrencyColumn = postgres.StringColumn("currency")
		PlanColumn     = postgres.StringColumn("plan")
		FamilyIDColumn = postgres.StringColumn("family_id")
		RoleColumn     = postgres.StringColumn("role")
		allColumns     = postgres.ColumnList{IDColumn, CurrencyColumn, PlanColumn, FamilyIDColumn, RoleColumn}
		mutableColumns = postgres.ColumnList{CurrencyColumn, PlanColumn, FamilyIDColumn, RoleColumn}
		defaultColumns = postgres.ColumnList{RoleColumn}
	)

	return accountsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		Currency: CurrencyColumn,
		Plan:     PlanColumn,
		FamilyID: FamilyIDColumn,
		Role:     RoleColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
