//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CurrencyRates = newCurrencyRatesTable("public", "currency_rates", "")

type currencyRatesTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	FromCurrency postgres.ColumnString
	ToCurrency   postgres.ColumnString
	RateDate     postgres.ColumnDate
	ExchangeRate postgres.ColumnFloat
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp
	Etag         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type CurrencyRatesTable struct {
	currencyRatesTable

	EXCLUDED currencyRatesTable
}

// AS creates new CurrencyRatesTable with assigned alias
func (a CurrencyRatesTable) AS(alias string) *CurrencyRatesTable {
	return newCurrencyRatesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CurrencyRatesTable with assigned schema name
func (a CurrencyRatesTable) FromSchema(schemaName string) *CurrencyRatesTable {
	return newCurrencyRatesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CurrencyRatesTable with assigned table prefix
func (a CurrencyRatesTable) WithPrefix(prefix string) *CurrencyRatesTable {
	return newCurrencyRatesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CurrencyRatesTable with assigned table suffix
func (a CurrencyRatesTable) WithSuffix(suffix string) *CurrencyRatesTable {
	return newCurrencyRatesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCurrencyRatesTable(schemaName, tableName, alias string) *CurrencyRatesTable {
	return &CurrencyRatesTable{
		currencyRatesTable: newCurrencyRatesTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newCurrencyRatesTableImpl("", "excluded", ""),
	}
}

func newCurrencyRatesTableImpl(schemaName, tableName, alias string) currencyRatesTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		FromCurrencyColumn = postgres.StringColumn("from_currency")
		ToCurrencyColumn   = postgres.StringColumn("to_currency")
		RateDateColumn     = postgres.DateColumn("rate_date")
		ExchangeRateColumn = postgres.FloatColumn("exchange_rate")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		EtagColumn         = postgres.StringColumn("etag")
		allColumns         = postgres.ColumnList{IDColumn, FromCurrencyColumn, ToCurrencyColumn, RateDateColumn, ExchangeRateColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		mutableColumns     = postgres.ColumnList{FromCurrencyColumn, ToCurrencyColumn, RateDateColumn, ExchangeRateColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		defaultColumns     = postgres.ColumnList{}
	)

	return currencyRatesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		FromCurrency: FromCurrencyColumn,
		ToCurrency:   ToCurrencyColumn,
		RateDate:     RateDateColumn,
		ExchangeRate: ExchangeRateColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		Etag:         EtagColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
