//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Families = newFamiliesTable("public", "families", "")

type familiesTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	Name      postgres.ColumnString
	OwnerID   postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	Etag      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type FamiliesTable struct {
	familiesTable

	EXCLUDED familiesTable
}

// AS creates new FamiliesTable with assigned alias
func (a FamiliesTable) AS(alias string) *FamiliesTable {
	return newFamiliesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FamiliesTable with assigned schema name
func (a FamiliesTable) FromSchema(schemaName string) *FamiliesTable {
	return newFamiliesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FamiliesTable with assigned table prefix
func (a FamiliesTable) WithPrefix(prefix string) *FamiliesTable {
	return newFamiliesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FamiliesTable with assigned table suffix
func (a FamiliesTable) WithSuffix(suffix string) *FamiliesTable {
	return newFamiliesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFamiliesTable(schemaName, tableName, alias string) *FamiliesTable {
	return &FamiliesTable{
		familiesTable: newFamiliesTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newFamiliesTableImpl("", "excluded", ""),
	}
}

func newFamiliesTableImpl(schemaName, tableName, alias string) familiesTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		NameColumn      = postgres.StringColumn("name")
		OwnerIDColumn   = postgres.StringColumn("owner_id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		EtagColumn      = postgres.StringColumn("etag")
		allColumns      = postgres.ColumnList{IDColumn, NameColumn, OwnerIDColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		mutableColumns  = postgres.ColumnList{NameColumn, OwnerIDColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		defaultColumns  = postgres.ColumnList{}
	)

	return familiesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		OwnerID:   OwnerIDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		Etag:      EtagColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
