//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Subscriptions = newSubscriptionsTable("public", "subscriptions", "")

type subscriptionsTable struct {
	postgres.Table

	// Columns
	ID                  postgres.ColumnString
	OwnerType           postgres.ColumnString
	OwnerFamilyID       postgres.ColumnString
	OwnerUserID         postgres.ColumnString
	FriendlyName        postgres.ColumnString
	FreeTrialStartDate  postgres.ColumnTimestampz
	FreeTrialEndDate    postgres.ColumnTimestampz
	ProviderID          postgres.ColumnString
	PayerType           postgres.ColumnString
	PayerMemberID       postgres.ColumnString
	StartDate           postgres.ColumnTimestampz
	EndDate             postgres.ColumnTimestampz
	Recurrency          postgres.ColumnString
	CustomRecurrency    postgres.ColumnInteger
	CustomPriceCurrency postgres.ColumnString
	CustomPriceAmount   postgres.ColumnFloat
	CreatedAt           postgres.ColumnTimestampz
	UpdatedAt           postgres.ColumnTimestampz
	Etag                postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type SubscriptionsTable struct {
	subscriptionsTable

	EXCLUDED subscriptionsTable
}

// AS creates new SubscriptionsTable with assigned alias
func (a SubscriptionsTable) AS(alias string) *SubscriptionsTable {
	return newSubscriptionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SubscriptionsTable with assigned schema name
func (a SubscriptionsTable) FromSchema(schemaName string) *SubscriptionsTable {
	return newSubscriptionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SubscriptionsTable with assigned table prefix
func (a SubscriptionsTable) WithPrefix(prefix string) *SubscriptionsTable {
	return newSubscriptionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SubscriptionsTable with assigned table suffix
func (a SubscriptionsTable) WithSuffix(suffix string) *SubscriptionsTable {
	return newSubscriptionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSubscriptionsTable(schemaName, tableName, alias string) *SubscriptionsTable {
	return &SubscriptionsTable{
		subscriptionsTable: newSubscriptionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newSubscriptionsTableImpl("", "excluded", ""),
	}
}

func newSubscriptionsTableImpl(schemaName, tableName, alias string) subscriptionsTable {
	var (
		IDColumn                  = postgres.StringColumn("id")
		OwnerTypeColumn           = postgres.StringColumn("owner_type")
		OwnerFamilyIDColumn       = postgres.StringColumn("owner_family_id")
		OwnerUserIDColumn         = postgres.StringColumn("owner_user_id")
		FriendlyNameColumn        = postgres.StringColumn("friendly_name")
		FreeTrialStartDateColumn  = postgres.TimestampzColumn("free_trial_start_date")
		FreeTrialEndDateColumn    = postgres.TimestampzColumn("free_trial_end_date")
		ProviderIDColumn          = postgres.StringColumn("provider_id")
		PayerTypeColumn           = postgres.StringColumn("payer_type")
		PayerMemberIDColumn       = postgres.StringColumn("payer_member_id")
		StartDateColumn           = postgres.TimestampzColumn("start_date")
		EndDateColumn             = postgres.TimestampzColumn("end_date")
		RecurrencyColumn          = postgres.StringColumn("recurrency")
		CustomRecurrencyColumn    = postgres.IntegerColumn("custom_recurrency")
		CustomPriceCurrencyColumn = postgres.StringColumn("custom_price_currency")
		CustomPriceAmountColumn   = postgres.FloatColumn("custom_price_amount")
		CreatedAtColumn           = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn           = postgres.TimestampzColumn("updated_at")
		EtagColumn                = postgres.StringColumn("etag")
		allColumns                = postgres.ColumnList{IDColumn, OwnerTypeColumn, OwnerFamilyIDColumn, OwnerUserIDColumn, FriendlyNameColumn, FreeTrialStartDateColumn, FreeTrialEndDateColumn, ProviderIDColumn, PayerTypeColumn, PayerMemberIDColumn, StartDateColumn, EndDateColumn, RecurrencyColumn, CustomRecurrencyColumn, CustomPriceCurrencyColumn, CustomPriceAmountColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		mutableColumns            = postgres.ColumnList{OwnerTypeColumn, OwnerFamilyIDColumn, OwnerUserIDColumn, FriendlyNameColumn, FreeTrialStartDateColumn, FreeTrialEndDateColumn, ProviderIDColumn, PayerTypeColumn, PayerMemberIDColumn, StartDateColumn, EndDateColumn, RecurrencyColumn, CustomRecurrencyColumn, CustomPriceCurrencyColumn, CustomPriceAmountColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		defaultColumns            = postgres.ColumnList{}
	)

	return subscriptionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		OwnerType:           OwnerTypeColumn,
		OwnerFamilyID:       OwnerFamilyIDColumn,
		OwnerUserID:         OwnerUserIDColumn,
		FriendlyName:        FriendlyNameColumn,
		FreeTrialStartDate:  FreeTrialStartDateColumn,
		FreeTrialEndDate:    FreeTrialEndDateColumn,
		ProviderID:          ProviderIDColumn,
		PayerType:           PayerTypeColumn,
		PayerMemberID:       PayerMemberIDColumn,
		StartDate:           StartDateColumn,
		EndDate:             EndDateColumn,
		Recurrency:          RecurrencyColumn,
		CustomRecurrency:    CustomRecurrencyColumn,
		CustomPriceCurrency: CustomPriceCurrencyColumn,
		CustomPriceAmount:   CustomPriceAmountColumn,
		CreatedAt:           CreatedAtColumn,
		UpdatedAt:           UpdatedAtColumn,
		Etag:                EtagColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
