//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SubscriptionLabels = newSubscriptionLabelsTable("public", "subscription_labels", "")

type subscriptionLabelsTable struct {
	postgres.Table

	// Columns
	SubscriptionID postgres.ColumnString
	LabelID        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type SubscriptionLabelsTable struct {
	subscriptionLabelsTable

	EXCLUDED subscriptionLabelsTable
}

// AS creates new SubscriptionLabelsTable with assigned alias
func (a SubscriptionLabelsTable) AS(alias string) *SubscriptionLabelsTable {
	return newSubscriptionLabelsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SubscriptionLabelsTable with assigned schema name
func (a SubscriptionLabelsTable) FromSchema(schemaName string) *SubscriptionLabelsTable {
	return newSubscriptionLabelsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SubscriptionLabelsTable with assigned table prefix
func (a SubscriptionLabelsTable) WithPrefix(prefix string) *SubscriptionLabelsTable {
	return newSubscriptionLabelsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SubscriptionLabelsTable with assigned table suffix
func (a SubscriptionLabelsTable) WithSuffix(suffix string) *SubscriptionLabelsTable {
	return newSubscriptionLabelsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSubscriptionLabelsTable(schemaName, tableName, alias string) *SubscriptionLabelsTable {
	return &SubscriptionLabelsTable{
		subscriptionLabelsTable: newSubscriptionLabelsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newSubscriptionLabelsTableImpl("", "excluded", ""),
	}
}

func newSubscriptionLabelsTableImpl(schemaName, tableName, alias string) subscriptionLabelsTable {
	var (
		SubscriptionIDColumn = postgres.StringColumn("subscription_id")
		LabelIDColumn        = postgres.StringColumn("label_id")
		allColumns           = postgres.ColumnList{SubscriptionIDColumn, LabelIDColumn}
		mutableColumns       = postgres.ColumnList{}
		defaultColumns       = postgres.ColumnList{}
	)

	return subscriptionLabelsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		SubscriptionID: SubscriptionIDColumn,
		LabelID:        LabelIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
