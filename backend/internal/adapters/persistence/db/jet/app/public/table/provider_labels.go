//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ProviderLabels = newProviderLabelsTable("public", "provider_labels", "")

type providerLabelsTable struct {
	postgres.Table

	// Columns
	LabelID    postgres.ColumnString
	ProviderID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ProviderLabelsTable struct {
	providerLabelsTable

	EXCLUDED providerLabelsTable
}

// AS creates new ProviderLabelsTable with assigned alias
func (a ProviderLabelsTable) AS(alias string) *ProviderLabelsTable {
	return newProviderLabelsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProviderLabelsTable with assigned schema name
func (a ProviderLabelsTable) FromSchema(schemaName string) *ProviderLabelsTable {
	return newProviderLabelsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProviderLabelsTable with assigned table prefix
func (a ProviderLabelsTable) WithPrefix(prefix string) *ProviderLabelsTable {
	return newProviderLabelsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProviderLabelsTable with assigned table suffix
func (a ProviderLabelsTable) WithSuffix(suffix string) *ProviderLabelsTable {
	return newProviderLabelsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProviderLabelsTable(schemaName, tableName, alias string) *ProviderLabelsTable {
	return &ProviderLabelsTable{
		providerLabelsTable: newProviderLabelsTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newProviderLabelsTableImpl("", "excluded", ""),
	}
}

func newProviderLabelsTableImpl(schemaName, tableName, alias string) providerLabelsTable {
	var (
		LabelIDColumn    = postgres.StringColumn("label_id")
		ProviderIDColumn = postgres.StringColumn("provider_id")
		allColumns       = postgres.ColumnList{LabelIDColumn, ProviderIDColumn}
		mutableColumns   = postgres.ColumnList{}
		defaultColumns   = postgres.ColumnList{}
	)

	return providerLabelsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		LabelID:    LabelIDColumn,
		ProviderID: ProviderIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
