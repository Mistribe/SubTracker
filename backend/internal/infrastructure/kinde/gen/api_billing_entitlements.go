/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// BillingEntitlementsAPIService BillingEntitlementsAPI service
type BillingEntitlementsAPIService service

type ApiGetBillingEntitlementsRequest struct {
	ctx           context.Context
	ApiService    *BillingEntitlementsAPIService
	customerId    *string
	pageSize      *int32
	startingAfter *string
	endingBefore  *string
	maxValue      *string
	expand        *string
}

// The ID of the billing customer to retrieve entitlements for
func (r ApiGetBillingEntitlementsRequest) CustomerId(customerId string) ApiGetBillingEntitlementsRequest {
	r.customerId = &customerId
	return r
}

// Number of results per page. Defaults to 10 if parameter not sent.
func (r ApiGetBillingEntitlementsRequest) PageSize(pageSize int32) ApiGetBillingEntitlementsRequest {
	r.pageSize = &pageSize
	return r
}

// The ID of the billing entitlement to start after.
func (r ApiGetBillingEntitlementsRequest) StartingAfter(startingAfter string) ApiGetBillingEntitlementsRequest {
	r.startingAfter = &startingAfter
	return r
}

// The ID of the billing entitlement to end before.
func (r ApiGetBillingEntitlementsRequest) EndingBefore(endingBefore string) ApiGetBillingEntitlementsRequest {
	r.endingBefore = &endingBefore
	return r
}

// When the maximum limit of an entitlement is null, this value is returned as the maximum limit
func (r ApiGetBillingEntitlementsRequest) MaxValue(maxValue string) ApiGetBillingEntitlementsRequest {
	r.maxValue = &maxValue
	return r
}

// Specify additional plan data to retrieve. Use \&quot;plans\&quot;.
func (r ApiGetBillingEntitlementsRequest) Expand(expand string) ApiGetBillingEntitlementsRequest {
	r.expand = &expand
	return r
}

func (r ApiGetBillingEntitlementsRequest) Execute() (*GetBillingEntitlementsResponse, *http.Response, error) {
	return r.ApiService.GetBillingEntitlementsExecute(r)
}

/*
GetBillingEntitlements Get billing entitlements

# Returns all the entitlements a billing customer currently has access to

<div>

	<code>read:billing_entitlements</code>

</div>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetBillingEntitlementsRequest
*/
func (a *BillingEntitlementsAPIService) GetBillingEntitlements(ctx context.Context) ApiGetBillingEntitlementsRequest {
	return ApiGetBillingEntitlementsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GetBillingEntitlementsResponse
func (a *BillingEntitlementsAPIService) GetBillingEntitlementsExecute(r ApiGetBillingEntitlementsRequest) (*GetBillingEntitlementsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetBillingEntitlementsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingEntitlementsAPIService.GetBillingEntitlements")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/billing/entitlements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customerId == nil {
		return localVarReturnValue, nil, reportError("customerId is required and must be specified")
	}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	if r.startingAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "starting_after", r.startingAfter, "form", "")
	}
	if r.endingBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ending_before", r.endingBefore, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "customer_id", r.customerId, "form", "")
	if r.maxValue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_value", r.maxValue, "form", "")
	}
	if r.expand != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
