/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateWebHookRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWebHookRequest{}

// UpdateWebHookRequest struct for UpdateWebHookRequest
type UpdateWebHookRequest struct {
	// Array of event type keys
	EventTypes []string `json:"event_types,omitempty"`
	// The webhook name
	Name *string `json:"name,omitempty"`
	// The webhook description
	Description NullableString `json:"description,omitempty"`
}

// NewUpdateWebHookRequest instantiates a new UpdateWebHookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWebHookRequest() *UpdateWebHookRequest {
	this := UpdateWebHookRequest{}
	return &this
}

// NewUpdateWebHookRequestWithDefaults instantiates a new UpdateWebHookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWebHookRequestWithDefaults() *UpdateWebHookRequest {
	this := UpdateWebHookRequest{}
	return &this
}

// GetEventTypes returns the EventTypes field value if set, zero value otherwise.
func (o *UpdateWebHookRequest) GetEventTypes() []string {
	if o == nil || IsNil(o.EventTypes) {
		var ret []string
		return ret
	}
	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebHookRequest) GetEventTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.EventTypes) {
		return nil, false
	}
	return o.EventTypes, true
}

// HasEventTypes returns a boolean if a field has been set.
func (o *UpdateWebHookRequest) HasEventTypes() bool {
	if o != nil && !IsNil(o.EventTypes) {
		return true
	}

	return false
}

// SetEventTypes gets a reference to the given []string and assigns it to the EventTypes field.
func (o *UpdateWebHookRequest) SetEventTypes(v []string) {
	o.EventTypes = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateWebHookRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebHookRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateWebHookRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateWebHookRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateWebHookRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateWebHookRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateWebHookRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *UpdateWebHookRequest) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *UpdateWebHookRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *UpdateWebHookRequest) UnsetDescription() {
	o.Description.Unset()
}

func (o UpdateWebHookRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWebHookRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventTypes) {
		toSerialize["event_types"] = o.EventTypes
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	return toSerialize, nil
}

type NullableUpdateWebHookRequest struct {
	value *UpdateWebHookRequest
	isSet bool
}

func (v NullableUpdateWebHookRequest) Get() *UpdateWebHookRequest {
	return v.value
}

func (v *NullableUpdateWebHookRequest) Set(val *UpdateWebHookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWebHookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWebHookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWebHookRequest(val *UpdateWebHookRequest) *NullableUpdateWebHookRequest {
	return &NullableUpdateWebHookRequest{value: val, isSet: true}
}

func (v NullableUpdateWebHookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWebHookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
