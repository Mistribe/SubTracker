/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateUserIdentityRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserIdentityRequest{}

// CreateUserIdentityRequest struct for CreateUserIdentityRequest
type CreateUserIdentityRequest struct {
	// The email address, social identity, or username of the user.
	Value *string `json:"value,omitempty"`
	// The identity type
	Type *string `json:"type,omitempty"`
	// The country code for the phone number, only required when identity type is 'phone'.
	PhoneCountryId *string `json:"phone_country_id,omitempty"`
	// The social or enterprise connection ID, only required when identity type is 'social' or 'enterprise'.
	ConnectionId *string `json:"connection_id,omitempty"`
}

// NewCreateUserIdentityRequest instantiates a new CreateUserIdentityRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserIdentityRequest() *CreateUserIdentityRequest {
	this := CreateUserIdentityRequest{}
	return &this
}

// NewCreateUserIdentityRequestWithDefaults instantiates a new CreateUserIdentityRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserIdentityRequestWithDefaults() *CreateUserIdentityRequest {
	this := CreateUserIdentityRequest{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CreateUserIdentityRequest) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserIdentityRequest) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CreateUserIdentityRequest) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *CreateUserIdentityRequest) SetValue(v string) {
	o.Value = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreateUserIdentityRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserIdentityRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreateUserIdentityRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CreateUserIdentityRequest) SetType(v string) {
	o.Type = &v
}

// GetPhoneCountryId returns the PhoneCountryId field value if set, zero value otherwise.
func (o *CreateUserIdentityRequest) GetPhoneCountryId() string {
	if o == nil || IsNil(o.PhoneCountryId) {
		var ret string
		return ret
	}
	return *o.PhoneCountryId
}

// GetPhoneCountryIdOk returns a tuple with the PhoneCountryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserIdentityRequest) GetPhoneCountryIdOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneCountryId) {
		return nil, false
	}
	return o.PhoneCountryId, true
}

// HasPhoneCountryId returns a boolean if a field has been set.
func (o *CreateUserIdentityRequest) HasPhoneCountryId() bool {
	if o != nil && !IsNil(o.PhoneCountryId) {
		return true
	}

	return false
}

// SetPhoneCountryId gets a reference to the given string and assigns it to the PhoneCountryId field.
func (o *CreateUserIdentityRequest) SetPhoneCountryId(v string) {
	o.PhoneCountryId = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *CreateUserIdentityRequest) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserIdentityRequest) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *CreateUserIdentityRequest) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *CreateUserIdentityRequest) SetConnectionId(v string) {
	o.ConnectionId = &v
}

func (o CreateUserIdentityRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUserIdentityRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.PhoneCountryId) {
		toSerialize["phone_country_id"] = o.PhoneCountryId
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	return toSerialize, nil
}

type NullableCreateUserIdentityRequest struct {
	value *CreateUserIdentityRequest
	isSet bool
}

func (v NullableCreateUserIdentityRequest) Get() *CreateUserIdentityRequest {
	return v.value
}

func (v *NullableCreateUserIdentityRequest) Set(val *CreateUserIdentityRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserIdentityRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserIdentityRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserIdentityRequest(val *CreateUserIdentityRequest) *NullableCreateUserIdentityRequest {
	return &NullableCreateUserIdentityRequest{value: val, isSet: true}
}

func (v NullableCreateUserIdentityRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserIdentityRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
