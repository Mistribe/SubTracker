/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CreateConnectionRequestOptions - struct for CreateConnectionRequestOptions
type CreateConnectionRequestOptions struct {
	CreateConnectionRequestOptionsOneOf  *CreateConnectionRequestOptionsOneOf
	CreateConnectionRequestOptionsOneOf1 *CreateConnectionRequestOptionsOneOf1
	CreateConnectionRequestOptionsOneOf2 *CreateConnectionRequestOptionsOneOf2
}

// CreateConnectionRequestOptionsOneOfAsCreateConnectionRequestOptions is a convenience function that returns CreateConnectionRequestOptionsOneOf wrapped in CreateConnectionRequestOptions
func CreateConnectionRequestOptionsOneOfAsCreateConnectionRequestOptions(v *CreateConnectionRequestOptionsOneOf) CreateConnectionRequestOptions {
	return CreateConnectionRequestOptions{
		CreateConnectionRequestOptionsOneOf: v,
	}
}

// CreateConnectionRequestOptionsOneOf1AsCreateConnectionRequestOptions is a convenience function that returns CreateConnectionRequestOptionsOneOf1 wrapped in CreateConnectionRequestOptions
func CreateConnectionRequestOptionsOneOf1AsCreateConnectionRequestOptions(v *CreateConnectionRequestOptionsOneOf1) CreateConnectionRequestOptions {
	return CreateConnectionRequestOptions{
		CreateConnectionRequestOptionsOneOf1: v,
	}
}

// CreateConnectionRequestOptionsOneOf2AsCreateConnectionRequestOptions is a convenience function that returns CreateConnectionRequestOptionsOneOf2 wrapped in CreateConnectionRequestOptions
func CreateConnectionRequestOptionsOneOf2AsCreateConnectionRequestOptions(v *CreateConnectionRequestOptionsOneOf2) CreateConnectionRequestOptions {
	return CreateConnectionRequestOptions{
		CreateConnectionRequestOptionsOneOf2: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateConnectionRequestOptions) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateConnectionRequestOptionsOneOf
	err = newStrictDecoder(data).Decode(&dst.CreateConnectionRequestOptionsOneOf)
	if err == nil {
		jsonCreateConnectionRequestOptionsOneOf, _ := json.Marshal(dst.CreateConnectionRequestOptionsOneOf)
		if string(jsonCreateConnectionRequestOptionsOneOf) == "{}" { // empty struct
			dst.CreateConnectionRequestOptionsOneOf = nil
		} else {
			if err = validator.Validate(dst.CreateConnectionRequestOptionsOneOf); err != nil {
				dst.CreateConnectionRequestOptionsOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateConnectionRequestOptionsOneOf = nil
	}

	// try to unmarshal data into CreateConnectionRequestOptionsOneOf1
	err = newStrictDecoder(data).Decode(&dst.CreateConnectionRequestOptionsOneOf1)
	if err == nil {
		jsonCreateConnectionRequestOptionsOneOf1, _ := json.Marshal(dst.CreateConnectionRequestOptionsOneOf1)
		if string(jsonCreateConnectionRequestOptionsOneOf1) == "{}" { // empty struct
			dst.CreateConnectionRequestOptionsOneOf1 = nil
		} else {
			if err = validator.Validate(dst.CreateConnectionRequestOptionsOneOf1); err != nil {
				dst.CreateConnectionRequestOptionsOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateConnectionRequestOptionsOneOf1 = nil
	}

	// try to unmarshal data into CreateConnectionRequestOptionsOneOf2
	err = newStrictDecoder(data).Decode(&dst.CreateConnectionRequestOptionsOneOf2)
	if err == nil {
		jsonCreateConnectionRequestOptionsOneOf2, _ := json.Marshal(dst.CreateConnectionRequestOptionsOneOf2)
		if string(jsonCreateConnectionRequestOptionsOneOf2) == "{}" { // empty struct
			dst.CreateConnectionRequestOptionsOneOf2 = nil
		} else {
			if err = validator.Validate(dst.CreateConnectionRequestOptionsOneOf2); err != nil {
				dst.CreateConnectionRequestOptionsOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateConnectionRequestOptionsOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateConnectionRequestOptionsOneOf = nil
		dst.CreateConnectionRequestOptionsOneOf1 = nil
		dst.CreateConnectionRequestOptionsOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateConnectionRequestOptions)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateConnectionRequestOptions)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateConnectionRequestOptions) MarshalJSON() ([]byte, error) {
	if src.CreateConnectionRequestOptionsOneOf != nil {
		return json.Marshal(&src.CreateConnectionRequestOptionsOneOf)
	}

	if src.CreateConnectionRequestOptionsOneOf1 != nil {
		return json.Marshal(&src.CreateConnectionRequestOptionsOneOf1)
	}

	if src.CreateConnectionRequestOptionsOneOf2 != nil {
		return json.Marshal(&src.CreateConnectionRequestOptionsOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateConnectionRequestOptions) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateConnectionRequestOptionsOneOf != nil {
		return obj.CreateConnectionRequestOptionsOneOf
	}

	if obj.CreateConnectionRequestOptionsOneOf1 != nil {
		return obj.CreateConnectionRequestOptionsOneOf1
	}

	if obj.CreateConnectionRequestOptionsOneOf2 != nil {
		return obj.CreateConnectionRequestOptionsOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CreateConnectionRequestOptions) GetActualInstanceValue() interface{} {
	if obj.CreateConnectionRequestOptionsOneOf != nil {
		return *obj.CreateConnectionRequestOptionsOneOf
	}

	if obj.CreateConnectionRequestOptionsOneOf1 != nil {
		return *obj.CreateConnectionRequestOptionsOneOf1
	}

	if obj.CreateConnectionRequestOptionsOneOf2 != nil {
		return *obj.CreateConnectionRequestOptionsOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableCreateConnectionRequestOptions struct {
	value *CreateConnectionRequestOptions
	isSet bool
}

func (v NullableCreateConnectionRequestOptions) Get() *CreateConnectionRequestOptions {
	return v.value
}

func (v *NullableCreateConnectionRequestOptions) Set(val *CreateConnectionRequestOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateConnectionRequestOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateConnectionRequestOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateConnectionRequestOptions(val *CreateConnectionRequestOptions) *NullableCreateConnectionRequestOptions {
	return &NullableCreateConnectionRequestOptions{value: val, isSet: true}
}

func (v NullableCreateConnectionRequestOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateConnectionRequestOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
