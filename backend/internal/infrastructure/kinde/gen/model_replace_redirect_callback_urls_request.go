/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReplaceRedirectCallbackURLsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplaceRedirectCallbackURLsRequest{}

// ReplaceRedirectCallbackURLsRequest struct for ReplaceRedirectCallbackURLsRequest
type ReplaceRedirectCallbackURLsRequest struct {
	// Array of callback urls.
	Urls []string `json:"urls,omitempty"`
}

// NewReplaceRedirectCallbackURLsRequest instantiates a new ReplaceRedirectCallbackURLsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceRedirectCallbackURLsRequest() *ReplaceRedirectCallbackURLsRequest {
	this := ReplaceRedirectCallbackURLsRequest{}
	return &this
}

// NewReplaceRedirectCallbackURLsRequestWithDefaults instantiates a new ReplaceRedirectCallbackURLsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceRedirectCallbackURLsRequestWithDefaults() *ReplaceRedirectCallbackURLsRequest {
	this := ReplaceRedirectCallbackURLsRequest{}
	return &this
}

// GetUrls returns the Urls field value if set, zero value otherwise.
func (o *ReplaceRedirectCallbackURLsRequest) GetUrls() []string {
	if o == nil || IsNil(o.Urls) {
		var ret []string
		return ret
	}
	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceRedirectCallbackURLsRequest) GetUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.Urls) {
		return nil, false
	}
	return o.Urls, true
}

// HasUrls returns a boolean if a field has been set.
func (o *ReplaceRedirectCallbackURLsRequest) HasUrls() bool {
	if o != nil && !IsNil(o.Urls) {
		return true
	}

	return false
}

// SetUrls gets a reference to the given []string and assigns it to the Urls field.
func (o *ReplaceRedirectCallbackURLsRequest) SetUrls(v []string) {
	o.Urls = v
}

func (o ReplaceRedirectCallbackURLsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplaceRedirectCallbackURLsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Urls) {
		toSerialize["urls"] = o.Urls
	}
	return toSerialize, nil
}

type NullableReplaceRedirectCallbackURLsRequest struct {
	value *ReplaceRedirectCallbackURLsRequest
	isSet bool
}

func (v NullableReplaceRedirectCallbackURLsRequest) Get() *ReplaceRedirectCallbackURLsRequest {
	return v.value
}

func (v *NullableReplaceRedirectCallbackURLsRequest) Set(val *ReplaceRedirectCallbackURLsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceRedirectCallbackURLsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceRedirectCallbackURLsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceRedirectCallbackURLsRequest(val *ReplaceRedirectCallbackURLsRequest) *NullableReplaceRedirectCallbackURLsRequest {
	return &NullableReplaceRedirectCallbackURLsRequest{value: val, isSet: true}
}

func (v NullableReplaceRedirectCallbackURLsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceRedirectCallbackURLsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
