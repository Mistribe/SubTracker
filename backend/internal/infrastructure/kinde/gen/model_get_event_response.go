/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetEventResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEventResponse{}

// GetEventResponse struct for GetEventResponse
type GetEventResponse struct {
	// Response code.
	Code *string `json:"code,omitempty"`
	// Response message.
	Message *string                `json:"message,omitempty"`
	Event   *GetEventResponseEvent `json:"event,omitempty"`
}

// NewGetEventResponse instantiates a new GetEventResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEventResponse() *GetEventResponse {
	this := GetEventResponse{}
	return &this
}

// NewGetEventResponseWithDefaults instantiates a new GetEventResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEventResponseWithDefaults() *GetEventResponse {
	this := GetEventResponse{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *GetEventResponse) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventResponse) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *GetEventResponse) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *GetEventResponse) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *GetEventResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *GetEventResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *GetEventResponse) SetMessage(v string) {
	o.Message = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *GetEventResponse) GetEvent() GetEventResponseEvent {
	if o == nil || IsNil(o.Event) {
		var ret GetEventResponseEvent
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventResponse) GetEventOk() (*GetEventResponseEvent, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *GetEventResponse) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given GetEventResponseEvent and assigns it to the Event field.
func (o *GetEventResponse) SetEvent(v GetEventResponseEvent) {
	o.Event = &v
}

func (o GetEventResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEventResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	return toSerialize, nil
}

type NullableGetEventResponse struct {
	value *GetEventResponse
	isSet bool
}

func (v NullableGetEventResponse) Get() *GetEventResponse {
	return v.value
}

func (v *NullableGetEventResponse) Set(val *GetEventResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEventResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEventResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEventResponse(val *GetEventResponse) *NullableGetEventResponse {
	return &NullableGetEventResponse{value: val, isSet: true}
}

func (v NullableGetEventResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEventResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
