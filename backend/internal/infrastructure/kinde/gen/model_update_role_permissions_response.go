/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateRolePermissionsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRolePermissionsResponse{}

// UpdateRolePermissionsResponse struct for UpdateRolePermissionsResponse
type UpdateRolePermissionsResponse struct {
	Code               *string  `json:"code,omitempty"`
	Message            *string  `json:"message,omitempty"`
	PermissionsAdded   []string `json:"permissions_added,omitempty"`
	PermissionsRemoved []string `json:"permissions_removed,omitempty"`
}

// NewUpdateRolePermissionsResponse instantiates a new UpdateRolePermissionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRolePermissionsResponse() *UpdateRolePermissionsResponse {
	this := UpdateRolePermissionsResponse{}
	return &this
}

// NewUpdateRolePermissionsResponseWithDefaults instantiates a new UpdateRolePermissionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRolePermissionsResponseWithDefaults() *UpdateRolePermissionsResponse {
	this := UpdateRolePermissionsResponse{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *UpdateRolePermissionsResponse) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRolePermissionsResponse) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *UpdateRolePermissionsResponse) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *UpdateRolePermissionsResponse) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *UpdateRolePermissionsResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRolePermissionsResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *UpdateRolePermissionsResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *UpdateRolePermissionsResponse) SetMessage(v string) {
	o.Message = &v
}

// GetPermissionsAdded returns the PermissionsAdded field value if set, zero value otherwise.
func (o *UpdateRolePermissionsResponse) GetPermissionsAdded() []string {
	if o == nil || IsNil(o.PermissionsAdded) {
		var ret []string
		return ret
	}
	return o.PermissionsAdded
}

// GetPermissionsAddedOk returns a tuple with the PermissionsAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRolePermissionsResponse) GetPermissionsAddedOk() ([]string, bool) {
	if o == nil || IsNil(o.PermissionsAdded) {
		return nil, false
	}
	return o.PermissionsAdded, true
}

// HasPermissionsAdded returns a boolean if a field has been set.
func (o *UpdateRolePermissionsResponse) HasPermissionsAdded() bool {
	if o != nil && !IsNil(o.PermissionsAdded) {
		return true
	}

	return false
}

// SetPermissionsAdded gets a reference to the given []string and assigns it to the PermissionsAdded field.
func (o *UpdateRolePermissionsResponse) SetPermissionsAdded(v []string) {
	o.PermissionsAdded = v
}

// GetPermissionsRemoved returns the PermissionsRemoved field value if set, zero value otherwise.
func (o *UpdateRolePermissionsResponse) GetPermissionsRemoved() []string {
	if o == nil || IsNil(o.PermissionsRemoved) {
		var ret []string
		return ret
	}
	return o.PermissionsRemoved
}

// GetPermissionsRemovedOk returns a tuple with the PermissionsRemoved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRolePermissionsResponse) GetPermissionsRemovedOk() ([]string, bool) {
	if o == nil || IsNil(o.PermissionsRemoved) {
		return nil, false
	}
	return o.PermissionsRemoved, true
}

// HasPermissionsRemoved returns a boolean if a field has been set.
func (o *UpdateRolePermissionsResponse) HasPermissionsRemoved() bool {
	if o != nil && !IsNil(o.PermissionsRemoved) {
		return true
	}

	return false
}

// SetPermissionsRemoved gets a reference to the given []string and assigns it to the PermissionsRemoved field.
func (o *UpdateRolePermissionsResponse) SetPermissionsRemoved(v []string) {
	o.PermissionsRemoved = v
}

func (o UpdateRolePermissionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRolePermissionsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.PermissionsAdded) {
		toSerialize["permissions_added"] = o.PermissionsAdded
	}
	if !IsNil(o.PermissionsRemoved) {
		toSerialize["permissions_removed"] = o.PermissionsRemoved
	}
	return toSerialize, nil
}

type NullableUpdateRolePermissionsResponse struct {
	value *UpdateRolePermissionsResponse
	isSet bool
}

func (v NullableUpdateRolePermissionsResponse) Get() *UpdateRolePermissionsResponse {
	return v.value
}

func (v *NullableUpdateRolePermissionsResponse) Set(val *UpdateRolePermissionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRolePermissionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRolePermissionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRolePermissionsResponse(val *UpdateRolePermissionsResponse) *NullableUpdateRolePermissionsResponse {
	return &NullableUpdateRolePermissionsResponse{value: val, isSet: true}
}

func (v NullableUpdateRolePermissionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRolePermissionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
