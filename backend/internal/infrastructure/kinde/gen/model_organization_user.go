/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrganizationUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationUser{}

// OrganizationUser struct for OrganizationUser
type OrganizationUser struct {
	// The unique ID for the user.
	Id NullableString `json:"id,omitempty"`
	// The user's email address.
	Email NullableString `json:"email,omitempty"`
	// The user's full name.
	FullName *string `json:"full_name,omitempty"`
	// The user's last name.
	LastName NullableString `json:"last_name,omitempty"`
	// The user's first name.
	FirstName NullableString `json:"first_name,omitempty"`
	// The user's profile picture URL.
	Picture NullableString `json:"picture,omitempty"`
	// The date the user joined the organization.
	JoinedOn *string `json:"joined_on,omitempty"`
	// The date the user last accessed the organization.
	LastAccessedOn NullableString `json:"last_accessed_on,omitempty"`
	// The roles the user has in the organization.
	Roles []string `json:"roles,omitempty"`
}

// NewOrganizationUser instantiates a new OrganizationUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationUser() *OrganizationUser {
	this := OrganizationUser{}
	return &this
}

// NewOrganizationUserWithDefaults instantiates a new OrganizationUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationUserWithDefaults() *OrganizationUser {
	this := OrganizationUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationUser) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationUser) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *OrganizationUser) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *OrganizationUser) SetId(v string) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *OrganizationUser) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *OrganizationUser) UnsetId() {
	o.Id.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationUser) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *OrganizationUser) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *OrganizationUser) SetEmail(v string) {
	o.Email.Set(&v)
}

// SetEmailNil sets the value for Email to be an explicit nil
func (o *OrganizationUser) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *OrganizationUser) UnsetEmail() {
	o.Email.Unset()
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *OrganizationUser) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUser) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *OrganizationUser) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *OrganizationUser) SetFullName(v string) {
	o.FullName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationUser) GetLastName() string {
	if o == nil || IsNil(o.LastName.Get()) {
		var ret string
		return ret
	}
	return *o.LastName.Get()
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationUser) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastName.Get(), o.LastName.IsSet()
}

// HasLastName returns a boolean if a field has been set.
func (o *OrganizationUser) HasLastName() bool {
	if o != nil && o.LastName.IsSet() {
		return true
	}

	return false
}

// SetLastName gets a reference to the given NullableString and assigns it to the LastName field.
func (o *OrganizationUser) SetLastName(v string) {
	o.LastName.Set(&v)
}

// SetLastNameNil sets the value for LastName to be an explicit nil
func (o *OrganizationUser) SetLastNameNil() {
	o.LastName.Set(nil)
}

// UnsetLastName ensures that no value is present for LastName, not even an explicit nil
func (o *OrganizationUser) UnsetLastName() {
	o.LastName.Unset()
}

// GetFirstName returns the FirstName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationUser) GetFirstName() string {
	if o == nil || IsNil(o.FirstName.Get()) {
		var ret string
		return ret
	}
	return *o.FirstName.Get()
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationUser) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstName.Get(), o.FirstName.IsSet()
}

// HasFirstName returns a boolean if a field has been set.
func (o *OrganizationUser) HasFirstName() bool {
	if o != nil && o.FirstName.IsSet() {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given NullableString and assigns it to the FirstName field.
func (o *OrganizationUser) SetFirstName(v string) {
	o.FirstName.Set(&v)
}

// SetFirstNameNil sets the value for FirstName to be an explicit nil
func (o *OrganizationUser) SetFirstNameNil() {
	o.FirstName.Set(nil)
}

// UnsetFirstName ensures that no value is present for FirstName, not even an explicit nil
func (o *OrganizationUser) UnsetFirstName() {
	o.FirstName.Unset()
}

// GetPicture returns the Picture field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationUser) GetPicture() string {
	if o == nil || IsNil(o.Picture.Get()) {
		var ret string
		return ret
	}
	return *o.Picture.Get()
}

// GetPictureOk returns a tuple with the Picture field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationUser) GetPictureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Picture.Get(), o.Picture.IsSet()
}

// HasPicture returns a boolean if a field has been set.
func (o *OrganizationUser) HasPicture() bool {
	if o != nil && o.Picture.IsSet() {
		return true
	}

	return false
}

// SetPicture gets a reference to the given NullableString and assigns it to the Picture field.
func (o *OrganizationUser) SetPicture(v string) {
	o.Picture.Set(&v)
}

// SetPictureNil sets the value for Picture to be an explicit nil
func (o *OrganizationUser) SetPictureNil() {
	o.Picture.Set(nil)
}

// UnsetPicture ensures that no value is present for Picture, not even an explicit nil
func (o *OrganizationUser) UnsetPicture() {
	o.Picture.Unset()
}

// GetJoinedOn returns the JoinedOn field value if set, zero value otherwise.
func (o *OrganizationUser) GetJoinedOn() string {
	if o == nil || IsNil(o.JoinedOn) {
		var ret string
		return ret
	}
	return *o.JoinedOn
}

// GetJoinedOnOk returns a tuple with the JoinedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUser) GetJoinedOnOk() (*string, bool) {
	if o == nil || IsNil(o.JoinedOn) {
		return nil, false
	}
	return o.JoinedOn, true
}

// HasJoinedOn returns a boolean if a field has been set.
func (o *OrganizationUser) HasJoinedOn() bool {
	if o != nil && !IsNil(o.JoinedOn) {
		return true
	}

	return false
}

// SetJoinedOn gets a reference to the given string and assigns it to the JoinedOn field.
func (o *OrganizationUser) SetJoinedOn(v string) {
	o.JoinedOn = &v
}

// GetLastAccessedOn returns the LastAccessedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationUser) GetLastAccessedOn() string {
	if o == nil || IsNil(o.LastAccessedOn.Get()) {
		var ret string
		return ret
	}
	return *o.LastAccessedOn.Get()
}

// GetLastAccessedOnOk returns a tuple with the LastAccessedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationUser) GetLastAccessedOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastAccessedOn.Get(), o.LastAccessedOn.IsSet()
}

// HasLastAccessedOn returns a boolean if a field has been set.
func (o *OrganizationUser) HasLastAccessedOn() bool {
	if o != nil && o.LastAccessedOn.IsSet() {
		return true
	}

	return false
}

// SetLastAccessedOn gets a reference to the given NullableString and assigns it to the LastAccessedOn field.
func (o *OrganizationUser) SetLastAccessedOn(v string) {
	o.LastAccessedOn.Set(&v)
}

// SetLastAccessedOnNil sets the value for LastAccessedOn to be an explicit nil
func (o *OrganizationUser) SetLastAccessedOnNil() {
	o.LastAccessedOn.Set(nil)
}

// UnsetLastAccessedOn ensures that no value is present for LastAccessedOn, not even an explicit nil
func (o *OrganizationUser) UnsetLastAccessedOn() {
	o.LastAccessedOn.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *OrganizationUser) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUser) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *OrganizationUser) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *OrganizationUser) SetRoles(v []string) {
	o.Roles = v
}

func (o OrganizationUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if !IsNil(o.FullName) {
		toSerialize["full_name"] = o.FullName
	}
	if o.LastName.IsSet() {
		toSerialize["last_name"] = o.LastName.Get()
	}
	if o.FirstName.IsSet() {
		toSerialize["first_name"] = o.FirstName.Get()
	}
	if o.Picture.IsSet() {
		toSerialize["picture"] = o.Picture.Get()
	}
	if !IsNil(o.JoinedOn) {
		toSerialize["joined_on"] = o.JoinedOn
	}
	if o.LastAccessedOn.IsSet() {
		toSerialize["last_accessed_on"] = o.LastAccessedOn.Get()
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableOrganizationUser struct {
	value *OrganizationUser
	isSet bool
}

func (v NullableOrganizationUser) Get() *OrganizationUser {
	return v.value
}

func (v *NullableOrganizationUser) Set(val *OrganizationUser) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationUser) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationUser(val *OrganizationUser) *NullableOrganizationUser {
	return &NullableOrganizationUser{value: val, isSet: true}
}

func (v NullableOrganizationUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
