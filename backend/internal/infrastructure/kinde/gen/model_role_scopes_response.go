/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoleScopesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleScopesResponse{}

// RoleScopesResponse struct for RoleScopesResponse
type RoleScopesResponse struct {
	// Response code.
	Code *string `json:"code,omitempty"`
	// Response message.
	Message *string  `json:"message,omitempty"`
	Scopes  []Scopes `json:"scopes,omitempty"`
}

// NewRoleScopesResponse instantiates a new RoleScopesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleScopesResponse() *RoleScopesResponse {
	this := RoleScopesResponse{}
	return &this
}

// NewRoleScopesResponseWithDefaults instantiates a new RoleScopesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleScopesResponseWithDefaults() *RoleScopesResponse {
	this := RoleScopesResponse{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RoleScopesResponse) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleScopesResponse) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RoleScopesResponse) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RoleScopesResponse) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *RoleScopesResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleScopesResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *RoleScopesResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *RoleScopesResponse) SetMessage(v string) {
	o.Message = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *RoleScopesResponse) GetScopes() []Scopes {
	if o == nil || IsNil(o.Scopes) {
		var ret []Scopes
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleScopesResponse) GetScopesOk() ([]Scopes, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *RoleScopesResponse) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []Scopes and assigns it to the Scopes field.
func (o *RoleScopesResponse) SetScopes(v []Scopes) {
	o.Scopes = v
}

func (o RoleScopesResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleScopesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

type NullableRoleScopesResponse struct {
	value *RoleScopesResponse
	isSet bool
}

func (v NullableRoleScopesResponse) Get() *RoleScopesResponse {
	return v.value
}

func (v *NullableRoleScopesResponse) Set(val *RoleScopesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleScopesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleScopesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleScopesResponse(val *RoleScopesResponse) *NullableRoleScopesResponse {
	return &NullableRoleScopesResponse{value: val, isSet: true}
}

func (v NullableRoleScopesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleScopesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
