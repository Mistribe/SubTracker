/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CreateMeterUsageRecordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateMeterUsageRecordRequest{}

// CreateMeterUsageRecordRequest struct for CreateMeterUsageRecordRequest
type CreateMeterUsageRecordRequest struct {
	// The billing agreement against which to record usage
	CustomerAgreementId string `json:"customer_agreement_id"`
	// The code of the feature within the agreement against which to record usage
	BillingFeatureCode string `json:"billing_feature_code"`
	// The value of usage to record
	MeterValue string `json:"meter_value"`
	// The date and time the usage needs to be recorded for (defaults to current date/time)
	MeterUsageTimestamp *time.Time `json:"meter_usage_timestamp,omitempty"`
	// Absolutes overrides the current usage
	MeterTypeCode *string `json:"meter_type_code,omitempty"`
}

type _CreateMeterUsageRecordRequest CreateMeterUsageRecordRequest

// NewCreateMeterUsageRecordRequest instantiates a new CreateMeterUsageRecordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMeterUsageRecordRequest(customerAgreementId string, billingFeatureCode string, meterValue string) *CreateMeterUsageRecordRequest {
	this := CreateMeterUsageRecordRequest{}
	this.CustomerAgreementId = customerAgreementId
	this.BillingFeatureCode = billingFeatureCode
	this.MeterValue = meterValue
	return &this
}

// NewCreateMeterUsageRecordRequestWithDefaults instantiates a new CreateMeterUsageRecordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMeterUsageRecordRequestWithDefaults() *CreateMeterUsageRecordRequest {
	this := CreateMeterUsageRecordRequest{}
	return &this
}

// GetCustomerAgreementId returns the CustomerAgreementId field value
func (o *CreateMeterUsageRecordRequest) GetCustomerAgreementId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerAgreementId
}

// GetCustomerAgreementIdOk returns a tuple with the CustomerAgreementId field value
// and a boolean to check if the value has been set.
func (o *CreateMeterUsageRecordRequest) GetCustomerAgreementIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerAgreementId, true
}

// SetCustomerAgreementId sets field value
func (o *CreateMeterUsageRecordRequest) SetCustomerAgreementId(v string) {
	o.CustomerAgreementId = v
}

// GetBillingFeatureCode returns the BillingFeatureCode field value
func (o *CreateMeterUsageRecordRequest) GetBillingFeatureCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BillingFeatureCode
}

// GetBillingFeatureCodeOk returns a tuple with the BillingFeatureCode field value
// and a boolean to check if the value has been set.
func (o *CreateMeterUsageRecordRequest) GetBillingFeatureCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingFeatureCode, true
}

// SetBillingFeatureCode sets field value
func (o *CreateMeterUsageRecordRequest) SetBillingFeatureCode(v string) {
	o.BillingFeatureCode = v
}

// GetMeterValue returns the MeterValue field value
func (o *CreateMeterUsageRecordRequest) GetMeterValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeterValue
}

// GetMeterValueOk returns a tuple with the MeterValue field value
// and a boolean to check if the value has been set.
func (o *CreateMeterUsageRecordRequest) GetMeterValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeterValue, true
}

// SetMeterValue sets field value
func (o *CreateMeterUsageRecordRequest) SetMeterValue(v string) {
	o.MeterValue = v
}

// GetMeterUsageTimestamp returns the MeterUsageTimestamp field value if set, zero value otherwise.
func (o *CreateMeterUsageRecordRequest) GetMeterUsageTimestamp() time.Time {
	if o == nil || IsNil(o.MeterUsageTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.MeterUsageTimestamp
}

// GetMeterUsageTimestampOk returns a tuple with the MeterUsageTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMeterUsageRecordRequest) GetMeterUsageTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.MeterUsageTimestamp) {
		return nil, false
	}
	return o.MeterUsageTimestamp, true
}

// HasMeterUsageTimestamp returns a boolean if a field has been set.
func (o *CreateMeterUsageRecordRequest) HasMeterUsageTimestamp() bool {
	if o != nil && !IsNil(o.MeterUsageTimestamp) {
		return true
	}

	return false
}

// SetMeterUsageTimestamp gets a reference to the given time.Time and assigns it to the MeterUsageTimestamp field.
func (o *CreateMeterUsageRecordRequest) SetMeterUsageTimestamp(v time.Time) {
	o.MeterUsageTimestamp = &v
}

// GetMeterTypeCode returns the MeterTypeCode field value if set, zero value otherwise.
func (o *CreateMeterUsageRecordRequest) GetMeterTypeCode() string {
	if o == nil || IsNil(o.MeterTypeCode) {
		var ret string
		return ret
	}
	return *o.MeterTypeCode
}

// GetMeterTypeCodeOk returns a tuple with the MeterTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMeterUsageRecordRequest) GetMeterTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MeterTypeCode) {
		return nil, false
	}
	return o.MeterTypeCode, true
}

// HasMeterTypeCode returns a boolean if a field has been set.
func (o *CreateMeterUsageRecordRequest) HasMeterTypeCode() bool {
	if o != nil && !IsNil(o.MeterTypeCode) {
		return true
	}

	return false
}

// SetMeterTypeCode gets a reference to the given string and assigns it to the MeterTypeCode field.
func (o *CreateMeterUsageRecordRequest) SetMeterTypeCode(v string) {
	o.MeterTypeCode = &v
}

func (o CreateMeterUsageRecordRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateMeterUsageRecordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customer_agreement_id"] = o.CustomerAgreementId
	toSerialize["billing_feature_code"] = o.BillingFeatureCode
	toSerialize["meter_value"] = o.MeterValue
	if !IsNil(o.MeterUsageTimestamp) {
		toSerialize["meter_usage_timestamp"] = o.MeterUsageTimestamp
	}
	if !IsNil(o.MeterTypeCode) {
		toSerialize["meter_type_code"] = o.MeterTypeCode
	}
	return toSerialize, nil
}

func (o *CreateMeterUsageRecordRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customer_agreement_id",
		"billing_feature_code",
		"meter_value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateMeterUsageRecordRequest := _CreateMeterUsageRecordRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateMeterUsageRecordRequest)

	if err != nil {
		return err
	}

	*o = CreateMeterUsageRecordRequest(varCreateMeterUsageRecordRequest)

	return err
}

type NullableCreateMeterUsageRecordRequest struct {
	value *CreateMeterUsageRecordRequest
	isSet bool
}

func (v NullableCreateMeterUsageRecordRequest) Get() *CreateMeterUsageRecordRequest {
	return v.value
}

func (v *NullableCreateMeterUsageRecordRequest) Set(val *CreateMeterUsageRecordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMeterUsageRecordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMeterUsageRecordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMeterUsageRecordRequest(val *CreateMeterUsageRecordRequest) *NullableCreateMeterUsageRecordRequest {
	return &NullableCreateMeterUsageRecordRequest{value: val, isSet: true}
}

func (v NullableCreateMeterUsageRecordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMeterUsageRecordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
