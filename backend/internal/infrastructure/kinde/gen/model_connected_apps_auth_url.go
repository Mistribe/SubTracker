/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConnectedAppsAuthUrl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectedAppsAuthUrl{}

// ConnectedAppsAuthUrl struct for ConnectedAppsAuthUrl
type ConnectedAppsAuthUrl struct {
	// A URL that is used to authenticate an end-user against a connected app.
	Url *string `json:"url,omitempty"`
	// A unique identifier for the login session.
	SessionId *string `json:"session_id,omitempty"`
}

// NewConnectedAppsAuthUrl instantiates a new ConnectedAppsAuthUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectedAppsAuthUrl() *ConnectedAppsAuthUrl {
	this := ConnectedAppsAuthUrl{}
	return &this
}

// NewConnectedAppsAuthUrlWithDefaults instantiates a new ConnectedAppsAuthUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectedAppsAuthUrlWithDefaults() *ConnectedAppsAuthUrl {
	this := ConnectedAppsAuthUrl{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ConnectedAppsAuthUrl) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedAppsAuthUrl) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ConnectedAppsAuthUrl) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ConnectedAppsAuthUrl) SetUrl(v string) {
	o.Url = &v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *ConnectedAppsAuthUrl) GetSessionId() string {
	if o == nil || IsNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedAppsAuthUrl) GetSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SessionId) {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *ConnectedAppsAuthUrl) HasSessionId() bool {
	if o != nil && !IsNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *ConnectedAppsAuthUrl) SetSessionId(v string) {
	o.SessionId = &v
}

func (o ConnectedAppsAuthUrl) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectedAppsAuthUrl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.SessionId) {
		toSerialize["session_id"] = o.SessionId
	}
	return toSerialize, nil
}

type NullableConnectedAppsAuthUrl struct {
	value *ConnectedAppsAuthUrl
	isSet bool
}

func (v NullableConnectedAppsAuthUrl) Get() *ConnectedAppsAuthUrl {
	return v.value
}

func (v *NullableConnectedAppsAuthUrl) Set(val *ConnectedAppsAuthUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectedAppsAuthUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectedAppsAuthUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectedAppsAuthUrl(val *ConnectedAppsAuthUrl) *NullableConnectedAppsAuthUrl {
	return &NullableConnectedAppsAuthUrl{value: val, isSet: true}
}

func (v NullableConnectedAppsAuthUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectedAppsAuthUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
