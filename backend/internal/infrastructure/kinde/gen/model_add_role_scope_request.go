/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AddRoleScopeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddRoleScopeRequest{}

// AddRoleScopeRequest struct for AddRoleScopeRequest
type AddRoleScopeRequest struct {
	// The scope identifier.
	ScopeId string `json:"scope_id"`
}

type _AddRoleScopeRequest AddRoleScopeRequest

// NewAddRoleScopeRequest instantiates a new AddRoleScopeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddRoleScopeRequest(scopeId string) *AddRoleScopeRequest {
	this := AddRoleScopeRequest{}
	this.ScopeId = scopeId
	return &this
}

// NewAddRoleScopeRequestWithDefaults instantiates a new AddRoleScopeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddRoleScopeRequestWithDefaults() *AddRoleScopeRequest {
	this := AddRoleScopeRequest{}
	return &this
}

// GetScopeId returns the ScopeId field value
func (o *AddRoleScopeRequest) GetScopeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScopeId
}

// GetScopeIdOk returns a tuple with the ScopeId field value
// and a boolean to check if the value has been set.
func (o *AddRoleScopeRequest) GetScopeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeId, true
}

// SetScopeId sets field value
func (o *AddRoleScopeRequest) SetScopeId(v string) {
	o.ScopeId = v
}

func (o AddRoleScopeRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddRoleScopeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scope_id"] = o.ScopeId
	return toSerialize, nil
}

func (o *AddRoleScopeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scope_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddRoleScopeRequest := _AddRoleScopeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddRoleScopeRequest)

	if err != nil {
		return err
	}

	*o = AddRoleScopeRequest(varAddRoleScopeRequest)

	return err
}

type NullableAddRoleScopeRequest struct {
	value *AddRoleScopeRequest
	isSet bool
}

func (v NullableAddRoleScopeRequest) Get() *AddRoleScopeRequest {
	return v.value
}

func (v *NullableAddRoleScopeRequest) Set(val *AddRoleScopeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddRoleScopeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddRoleScopeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddRoleScopeRequest(val *AddRoleScopeRequest) *NullableAddRoleScopeRequest {
	return &NullableAddRoleScopeRequest{value: val, isSet: true}
}

func (v NullableAddRoleScopeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddRoleScopeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
