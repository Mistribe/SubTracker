/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// ConnectedAppsAPIService ConnectedAppsAPI service
type ConnectedAppsAPIService service

type ApiGetConnectedAppAuthUrlRequest struct {
	ctx                 context.Context
	ApiService          *ConnectedAppsAPIService
	keyCodeRef          *string
	userId              *string
	orgCode             *string
	overrideCallbackUrl *string
}

// The unique key code reference of the connected app to authenticate against.
func (r ApiGetConnectedAppAuthUrlRequest) KeyCodeRef(keyCodeRef string) ApiGetConnectedAppAuthUrlRequest {
	r.keyCodeRef = &keyCodeRef
	return r
}

// The id of the user that needs to authenticate to the third-party connected app.
func (r ApiGetConnectedAppAuthUrlRequest) UserId(userId string) ApiGetConnectedAppAuthUrlRequest {
	r.userId = &userId
	return r
}

// The code of the Kinde organization that needs to authenticate to the third-party connected app.
func (r ApiGetConnectedAppAuthUrlRequest) OrgCode(orgCode string) ApiGetConnectedAppAuthUrlRequest {
	r.orgCode = &orgCode
	return r
}

// A URL that overrides the default callback URL setup in your connected app configuration
func (r ApiGetConnectedAppAuthUrlRequest) OverrideCallbackUrl(overrideCallbackUrl string) ApiGetConnectedAppAuthUrlRequest {
	r.overrideCallbackUrl = &overrideCallbackUrl
	return r
}

func (r ApiGetConnectedAppAuthUrlRequest) Execute() (*ConnectedAppsAuthUrl, *http.Response, error) {
	return r.ApiService.GetConnectedAppAuthUrlExecute(r)
}

/*
GetConnectedAppAuthUrl Get Connected App URL

Get a URL that authenticates and authorizes a user to a third-party connected app.

<div>

	<code>read:connected_apps</code>

</div>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetConnectedAppAuthUrlRequest
*/
func (a *ConnectedAppsAPIService) GetConnectedAppAuthUrl(ctx context.Context) ApiGetConnectedAppAuthUrlRequest {
	return ApiGetConnectedAppAuthUrlRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConnectedAppsAuthUrl
func (a *ConnectedAppsAPIService) GetConnectedAppAuthUrlExecute(r ApiGetConnectedAppAuthUrlRequest) (*ConnectedAppsAuthUrl, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConnectedAppsAuthUrl
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectedAppsAPIService.GetConnectedAppAuthUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/connected_apps/auth_url"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.keyCodeRef == nil {
		return localVarReturnValue, nil, reportError("keyCodeRef is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "key_code_ref", r.keyCodeRef, "form", "")
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", r.userId, "form", "")
	}
	if r.orgCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "org_code", r.orgCode, "form", "")
	}
	if r.overrideCallbackUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "override_callback_url", r.overrideCallbackUrl, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConnectedAppTokenRequest struct {
	ctx        context.Context
	ApiService *ConnectedAppsAPIService
	sessionId  *string
}

// The unique sesssion id representing the login session of a user.
func (r ApiGetConnectedAppTokenRequest) SessionId(sessionId string) ApiGetConnectedAppTokenRequest {
	r.sessionId = &sessionId
	return r
}

func (r ApiGetConnectedAppTokenRequest) Execute() (*ConnectedAppsAccessToken, *http.Response, error) {
	return r.ApiService.GetConnectedAppTokenExecute(r)
}

/*
GetConnectedAppToken Get Connected App Token

Get an access token that can be used to call the third-party provider linked to the connected app.

<div>

	<code>read:connected_apps</code>

</div>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetConnectedAppTokenRequest
*/
func (a *ConnectedAppsAPIService) GetConnectedAppToken(ctx context.Context) ApiGetConnectedAppTokenRequest {
	return ApiGetConnectedAppTokenRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConnectedAppsAccessToken
func (a *ConnectedAppsAPIService) GetConnectedAppTokenExecute(r ApiGetConnectedAppTokenRequest) (*ConnectedAppsAccessToken, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConnectedAppsAccessToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectedAppsAPIService.GetConnectedAppToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/connected_apps/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionId == nil {
		return localVarReturnValue, nil, reportError("sessionId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "session_id", r.sessionId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRevokeConnectedAppTokenRequest struct {
	ctx        context.Context
	ApiService *ConnectedAppsAPIService
	sessionId  *string
}

// The unique sesssion id representing the login session of a user.
func (r ApiRevokeConnectedAppTokenRequest) SessionId(sessionId string) ApiRevokeConnectedAppTokenRequest {
	r.sessionId = &sessionId
	return r
}

func (r ApiRevokeConnectedAppTokenRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.RevokeConnectedAppTokenExecute(r)
}

/*
RevokeConnectedAppToken Revoke Connected App Token

Revoke the tokens linked to the connected app session.

<div>

	<code>create:connected_apps</code>

</div>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRevokeConnectedAppTokenRequest
*/
func (a *ConnectedAppsAPIService) RevokeConnectedAppToken(ctx context.Context) ApiRevokeConnectedAppTokenRequest {
	return ApiRevokeConnectedAppTokenRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SuccessResponse
func (a *ConnectedAppsAPIService) RevokeConnectedAppTokenExecute(r ApiRevokeConnectedAppTokenRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectedAppsAPIService.RevokeConnectedAppToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/connected_apps/revoke"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionId == nil {
		return localVarReturnValue, nil, reportError("sessionId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "session_id", r.sessionId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
