/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReadEnvLogoResponseLogosInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReadEnvLogoResponseLogosInner{}

// ReadEnvLogoResponseLogosInner struct for ReadEnvLogoResponseLogosInner
type ReadEnvLogoResponseLogosInner struct {
	// The type of logo (light or dark).
	Type *string `json:"type,omitempty"`
	// The name of the logo file.
	FileName *string `json:"file_name,omitempty"`
}

// NewReadEnvLogoResponseLogosInner instantiates a new ReadEnvLogoResponseLogosInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReadEnvLogoResponseLogosInner() *ReadEnvLogoResponseLogosInner {
	this := ReadEnvLogoResponseLogosInner{}
	return &this
}

// NewReadEnvLogoResponseLogosInnerWithDefaults instantiates a new ReadEnvLogoResponseLogosInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReadEnvLogoResponseLogosInnerWithDefaults() *ReadEnvLogoResponseLogosInner {
	this := ReadEnvLogoResponseLogosInner{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ReadEnvLogoResponseLogosInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadEnvLogoResponseLogosInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ReadEnvLogoResponseLogosInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ReadEnvLogoResponseLogosInner) SetType(v string) {
	o.Type = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *ReadEnvLogoResponseLogosInner) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadEnvLogoResponseLogosInner) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *ReadEnvLogoResponseLogosInner) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *ReadEnvLogoResponseLogosInner) SetFileName(v string) {
	o.FileName = &v
}

func (o ReadEnvLogoResponseLogosInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReadEnvLogoResponseLogosInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.FileName) {
		toSerialize["file_name"] = o.FileName
	}
	return toSerialize, nil
}

type NullableReadEnvLogoResponseLogosInner struct {
	value *ReadEnvLogoResponseLogosInner
	isSet bool
}

func (v NullableReadEnvLogoResponseLogosInner) Get() *ReadEnvLogoResponseLogosInner {
	return v.value
}

func (v *NullableReadEnvLogoResponseLogosInner) Set(val *ReadEnvLogoResponseLogosInner) {
	v.value = val
	v.isSet = true
}

func (v NullableReadEnvLogoResponseLogosInner) IsSet() bool {
	return v.isSet
}

func (v *NullableReadEnvLogoResponseLogosInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadEnvLogoResponseLogosInner(val *ReadEnvLogoResponseLogosInner) *NullableReadEnvLogoResponseLogosInner {
	return &NullableReadEnvLogoResponseLogosInner{value: val, isSet: true}
}

func (v NullableReadEnvLogoResponseLogosInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadEnvLogoResponseLogosInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
