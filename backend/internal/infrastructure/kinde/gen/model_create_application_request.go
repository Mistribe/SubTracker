/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateApplicationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateApplicationRequest{}

// CreateApplicationRequest struct for CreateApplicationRequest
type CreateApplicationRequest struct {
	// The application's name.
	Name string `json:"name"`
	// The application's type. Use `reg` for regular server rendered applications, `spa` for single-page applications, `m2m` for machine-to-machine applications, and `device` for devices and IoT.
	Type string `json:"type"`
	// Scope an M2M application to an org (Plus plan required).
	OrgCode NullableString `json:"org_code,omitempty"`
}

type _CreateApplicationRequest CreateApplicationRequest

// NewCreateApplicationRequest instantiates a new CreateApplicationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateApplicationRequest(name string, type_ string) *CreateApplicationRequest {
	this := CreateApplicationRequest{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewCreateApplicationRequestWithDefaults instantiates a new CreateApplicationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateApplicationRequestWithDefaults() *CreateApplicationRequest {
	this := CreateApplicationRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateApplicationRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateApplicationRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateApplicationRequest) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *CreateApplicationRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateApplicationRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateApplicationRequest) SetType(v string) {
	o.Type = v
}

// GetOrgCode returns the OrgCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateApplicationRequest) GetOrgCode() string {
	if o == nil || IsNil(o.OrgCode.Get()) {
		var ret string
		return ret
	}
	return *o.OrgCode.Get()
}

// GetOrgCodeOk returns a tuple with the OrgCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateApplicationRequest) GetOrgCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrgCode.Get(), o.OrgCode.IsSet()
}

// HasOrgCode returns a boolean if a field has been set.
func (o *CreateApplicationRequest) HasOrgCode() bool {
	if o != nil && o.OrgCode.IsSet() {
		return true
	}

	return false
}

// SetOrgCode gets a reference to the given NullableString and assigns it to the OrgCode field.
func (o *CreateApplicationRequest) SetOrgCode(v string) {
	o.OrgCode.Set(&v)
}

// SetOrgCodeNil sets the value for OrgCode to be an explicit nil
func (o *CreateApplicationRequest) SetOrgCodeNil() {
	o.OrgCode.Set(nil)
}

// UnsetOrgCode ensures that no value is present for OrgCode, not even an explicit nil
func (o *CreateApplicationRequest) UnsetOrgCode() {
	o.OrgCode.Unset()
}

func (o CreateApplicationRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateApplicationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if o.OrgCode.IsSet() {
		toSerialize["org_code"] = o.OrgCode.Get()
	}
	return toSerialize, nil
}

func (o *CreateApplicationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateApplicationRequest := _CreateApplicationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateApplicationRequest)

	if err != nil {
		return err
	}

	*o = CreateApplicationRequest(varCreateApplicationRequest)

	return err
}

type NullableCreateApplicationRequest struct {
	value *CreateApplicationRequest
	isSet bool
}

func (v NullableCreateApplicationRequest) Get() *CreateApplicationRequest {
	return v.value
}

func (v *NullableCreateApplicationRequest) Set(val *CreateApplicationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateApplicationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateApplicationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateApplicationRequest(val *CreateApplicationRequest) *NullableCreateApplicationRequest {
	return &NullableCreateApplicationRequest{value: val, isSet: true}
}

func (v NullableCreateApplicationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateApplicationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
