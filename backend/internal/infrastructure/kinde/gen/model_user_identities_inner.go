/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserIdentitiesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserIdentitiesInner{}

// UserIdentitiesInner struct for UserIdentitiesInner
type UserIdentitiesInner struct {
	Type     *string `json:"type,omitempty"`
	Identity *string `json:"identity,omitempty"`
}

// NewUserIdentitiesInner instantiates a new UserIdentitiesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserIdentitiesInner() *UserIdentitiesInner {
	this := UserIdentitiesInner{}
	return &this
}

// NewUserIdentitiesInnerWithDefaults instantiates a new UserIdentitiesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserIdentitiesInnerWithDefaults() *UserIdentitiesInner {
	this := UserIdentitiesInner{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserIdentitiesInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdentitiesInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserIdentitiesInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserIdentitiesInner) SetType(v string) {
	o.Type = &v
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *UserIdentitiesInner) GetIdentity() string {
	if o == nil || IsNil(o.Identity) {
		var ret string
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdentitiesInner) GetIdentityOk() (*string, bool) {
	if o == nil || IsNil(o.Identity) {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *UserIdentitiesInner) HasIdentity() bool {
	if o != nil && !IsNil(o.Identity) {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given string and assigns it to the Identity field.
func (o *UserIdentitiesInner) SetIdentity(v string) {
	o.Identity = &v
}

func (o UserIdentitiesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserIdentitiesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Identity) {
		toSerialize["identity"] = o.Identity
	}
	return toSerialize, nil
}

type NullableUserIdentitiesInner struct {
	value *UserIdentitiesInner
	isSet bool
}

func (v NullableUserIdentitiesInner) Get() *UserIdentitiesInner {
	return v.value
}

func (v *NullableUserIdentitiesInner) Set(val *UserIdentitiesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUserIdentitiesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUserIdentitiesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserIdentitiesInner(val *UserIdentitiesInner) *NullableUserIdentitiesInner {
	return &NullableUserIdentitiesInner{value: val, isSet: true}
}

func (v NullableUserIdentitiesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserIdentitiesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
