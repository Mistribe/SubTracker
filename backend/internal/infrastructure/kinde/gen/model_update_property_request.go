/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdatePropertyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePropertyRequest{}

// UpdatePropertyRequest struct for UpdatePropertyRequest
type UpdatePropertyRequest struct {
	// The name of the property.
	Name string `json:"name"`
	// Description of the property purpose.
	Description *string `json:"description,omitempty"`
	// Whether the property can be included in id and access tokens.
	IsPrivate bool `json:"is_private"`
	// Which category the property belongs to.
	CategoryId string `json:"category_id"`
}

type _UpdatePropertyRequest UpdatePropertyRequest

// NewUpdatePropertyRequest instantiates a new UpdatePropertyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePropertyRequest(name string, isPrivate bool, categoryId string) *UpdatePropertyRequest {
	this := UpdatePropertyRequest{}
	this.Name = name
	this.IsPrivate = isPrivate
	this.CategoryId = categoryId
	return &this
}

// NewUpdatePropertyRequestWithDefaults instantiates a new UpdatePropertyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePropertyRequestWithDefaults() *UpdatePropertyRequest {
	this := UpdatePropertyRequest{}
	return &this
}

// GetName returns the Name field value
func (o *UpdatePropertyRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdatePropertyRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdatePropertyRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdatePropertyRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePropertyRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdatePropertyRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdatePropertyRequest) SetDescription(v string) {
	o.Description = &v
}

// GetIsPrivate returns the IsPrivate field value
func (o *UpdatePropertyRequest) GetIsPrivate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value
// and a boolean to check if the value has been set.
func (o *UpdatePropertyRequest) GetIsPrivateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPrivate, true
}

// SetIsPrivate sets field value
func (o *UpdatePropertyRequest) SetIsPrivate(v bool) {
	o.IsPrivate = v
}

// GetCategoryId returns the CategoryId field value
func (o *UpdatePropertyRequest) GetCategoryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value
// and a boolean to check if the value has been set.
func (o *UpdatePropertyRequest) GetCategoryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryId, true
}

// SetCategoryId sets field value
func (o *UpdatePropertyRequest) SetCategoryId(v string) {
	o.CategoryId = v
}

func (o UpdatePropertyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePropertyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["is_private"] = o.IsPrivate
	toSerialize["category_id"] = o.CategoryId
	return toSerialize, nil
}

func (o *UpdatePropertyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"is_private",
		"category_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdatePropertyRequest := _UpdatePropertyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdatePropertyRequest)

	if err != nil {
		return err
	}

	*o = UpdatePropertyRequest(varUpdatePropertyRequest)

	return err
}

type NullableUpdatePropertyRequest struct {
	value *UpdatePropertyRequest
	isSet bool
}

func (v NullableUpdatePropertyRequest) Get() *UpdatePropertyRequest {
	return v.value
}

func (v *NullableUpdatePropertyRequest) Set(val *UpdatePropertyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePropertyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePropertyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePropertyRequest(val *UpdatePropertyRequest) *NullableUpdatePropertyRequest {
	return &NullableUpdatePropertyRequest{value: val, isSet: true}
}

func (v NullableUpdatePropertyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePropertyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
