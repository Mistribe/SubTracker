/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateCategoryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCategoryRequest{}

// CreateCategoryRequest struct for CreateCategoryRequest
type CreateCategoryRequest struct {
	// The name of the category.
	Name string `json:"name"`
	// The context that the category applies to.
	Context string `json:"context"`
}

type _CreateCategoryRequest CreateCategoryRequest

// NewCreateCategoryRequest instantiates a new CreateCategoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCategoryRequest(name string, context string) *CreateCategoryRequest {
	this := CreateCategoryRequest{}
	this.Name = name
	this.Context = context
	return &this
}

// NewCreateCategoryRequestWithDefaults instantiates a new CreateCategoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCategoryRequestWithDefaults() *CreateCategoryRequest {
	this := CreateCategoryRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateCategoryRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateCategoryRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateCategoryRequest) SetName(v string) {
	o.Name = v
}

// GetContext returns the Context field value
func (o *CreateCategoryRequest) GetContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *CreateCategoryRequest) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *CreateCategoryRequest) SetContext(v string) {
	o.Context = v
}

func (o CreateCategoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCategoryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["context"] = o.Context
	return toSerialize, nil
}

func (o *CreateCategoryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCategoryRequest := _CreateCategoryRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCategoryRequest)

	if err != nil {
		return err
	}

	*o = CreateCategoryRequest(varCreateCategoryRequest)

	return err
}

type NullableCreateCategoryRequest struct {
	value *CreateCategoryRequest
	isSet bool
}

func (v NullableCreateCategoryRequest) Get() *CreateCategoryRequest {
	return v.value
}

func (v *NullableCreateCategoryRequest) Set(val *CreateCategoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCategoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCategoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCategoryRequest(val *CreateCategoryRequest) *NullableCreateCategoryRequest {
	return &NullableCreateCategoryRequest{value: val, isSet: true}
}

func (v NullableCreateCategoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCategoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
