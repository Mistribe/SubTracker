/*
Kinde Management API

 Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token

API version: 1
Contact: support@kinde.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetEventResponseEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEventResponseEvent{}

// GetEventResponseEvent struct for GetEventResponseEvent
type GetEventResponseEvent struct {
	Type    *string `json:"type,omitempty"`
	Source  *string `json:"source,omitempty"`
	EventId *string `json:"event_id,omitempty"`
	// Timestamp in ISO 8601 format.
	Timestamp *int32 `json:"timestamp,omitempty"`
	// Event specific data object.
	Data map[string]interface{} `json:"data,omitempty"`
}

// NewGetEventResponseEvent instantiates a new GetEventResponseEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEventResponseEvent() *GetEventResponseEvent {
	this := GetEventResponseEvent{}
	return &this
}

// NewGetEventResponseEventWithDefaults instantiates a new GetEventResponseEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEventResponseEventWithDefaults() *GetEventResponseEvent {
	this := GetEventResponseEvent{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetEventResponseEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventResponseEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetEventResponseEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetEventResponseEvent) SetType(v string) {
	o.Type = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *GetEventResponseEvent) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventResponseEvent) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *GetEventResponseEvent) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *GetEventResponseEvent) SetSource(v string) {
	o.Source = &v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *GetEventResponseEvent) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventResponseEvent) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *GetEventResponseEvent) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *GetEventResponseEvent) SetEventId(v string) {
	o.EventId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *GetEventResponseEvent) GetTimestamp() int32 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventResponseEvent) GetTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *GetEventResponseEvent) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *GetEventResponseEvent) SetTimestamp(v int32) {
	o.Timestamp = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetEventResponseEvent) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventResponseEvent) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetEventResponseEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *GetEventResponseEvent) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o GetEventResponseEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEventResponseEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.EventId) {
		toSerialize["event_id"] = o.EventId
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableGetEventResponseEvent struct {
	value *GetEventResponseEvent
	isSet bool
}

func (v NullableGetEventResponseEvent) Get() *GetEventResponseEvent {
	return v.value
}

func (v *NullableGetEventResponseEvent) Set(val *GetEventResponseEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEventResponseEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEventResponseEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEventResponseEvent(val *GetEventResponseEvent) *NullableGetEventResponseEvent {
	return &NullableGetEventResponseEvent{value: val, isSet: true}
}

func (v NullableGetEventResponseEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEventResponseEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
