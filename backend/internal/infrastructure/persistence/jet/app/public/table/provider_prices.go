//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ProviderPrices = newProviderPricesTable("public", "provider_prices", "")

type providerPricesTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	StartDate postgres.ColumnTimestampz
	EndDate   postgres.ColumnTimestampz
	Currency  postgres.ColumnString
	Amount    postgres.ColumnFloat
	PlanID    postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	Etag      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ProviderPricesTable struct {
	providerPricesTable

	EXCLUDED providerPricesTable
}

// AS creates new ProviderPricesTable with assigned alias
func (a ProviderPricesTable) AS(alias string) *ProviderPricesTable {
	return newProviderPricesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProviderPricesTable with assigned schema name
func (a ProviderPricesTable) FromSchema(schemaName string) *ProviderPricesTable {
	return newProviderPricesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProviderPricesTable with assigned table prefix
func (a ProviderPricesTable) WithPrefix(prefix string) *ProviderPricesTable {
	return newProviderPricesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProviderPricesTable with assigned table suffix
func (a ProviderPricesTable) WithSuffix(suffix string) *ProviderPricesTable {
	return newProviderPricesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProviderPricesTable(schemaName, tableName, alias string) *ProviderPricesTable {
	return &ProviderPricesTable{
		providerPricesTable: newProviderPricesTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newProviderPricesTableImpl("", "excluded", ""),
	}
}

func newProviderPricesTableImpl(schemaName, tableName, alias string) providerPricesTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		StartDateColumn = postgres.TimestampzColumn("start_date")
		EndDateColumn   = postgres.TimestampzColumn("end_date")
		CurrencyColumn  = postgres.StringColumn("currency")
		AmountColumn    = postgres.FloatColumn("amount")
		PlanIDColumn    = postgres.StringColumn("plan_id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		EtagColumn      = postgres.StringColumn("etag")
		allColumns      = postgres.ColumnList{IDColumn, StartDateColumn, EndDateColumn, CurrencyColumn, AmountColumn, PlanIDColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		mutableColumns  = postgres.ColumnList{StartDateColumn, EndDateColumn, CurrencyColumn, AmountColumn, PlanIDColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		defaultColumns  = postgres.ColumnList{}
	)

	return providerPricesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		StartDate: StartDateColumn,
		EndDate:   EndDateColumn,
		Currency:  CurrencyColumn,
		Amount:    AmountColumn,
		PlanID:    PlanIDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		Etag:      EtagColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
