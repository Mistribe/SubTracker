//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Providers = newProvidersTable("public", "providers", "")

type providersTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	OwnerType      postgres.ColumnString
	OwnerFamilyID  postgres.ColumnString
	OwnerUserID    postgres.ColumnString
	Name           postgres.ColumnString
	Key            postgres.ColumnString
	Description    postgres.ColumnString
	IconURL        postgres.ColumnString
	URL            postgres.ColumnString
	PricingPageURL postgres.ColumnString
	CreatedAt      postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp
	Etag           postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ProvidersTable struct {
	providersTable

	EXCLUDED providersTable
}

// AS creates new ProvidersTable with assigned alias
func (a ProvidersTable) AS(alias string) *ProvidersTable {
	return newProvidersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProvidersTable with assigned schema name
func (a ProvidersTable) FromSchema(schemaName string) *ProvidersTable {
	return newProvidersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProvidersTable with assigned table prefix
func (a ProvidersTable) WithPrefix(prefix string) *ProvidersTable {
	return newProvidersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProvidersTable with assigned table suffix
func (a ProvidersTable) WithSuffix(suffix string) *ProvidersTable {
	return newProvidersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProvidersTable(schemaName, tableName, alias string) *ProvidersTable {
	return &ProvidersTable{
		providersTable: newProvidersTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newProvidersTableImpl("", "excluded", ""),
	}
}

func newProvidersTableImpl(schemaName, tableName, alias string) providersTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		OwnerTypeColumn      = postgres.StringColumn("owner_type")
		OwnerFamilyIDColumn  = postgres.StringColumn("owner_family_id")
		OwnerUserIDColumn    = postgres.StringColumn("owner_user_id")
		NameColumn           = postgres.StringColumn("name")
		KeyColumn            = postgres.StringColumn("key")
		DescriptionColumn    = postgres.StringColumn("description")
		IconURLColumn        = postgres.StringColumn("icon_url")
		URLColumn            = postgres.StringColumn("url")
		PricingPageURLColumn = postgres.StringColumn("pricing_page_url")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		EtagColumn           = postgres.StringColumn("etag")
		allColumns           = postgres.ColumnList{IDColumn, OwnerTypeColumn, OwnerFamilyIDColumn, OwnerUserIDColumn, NameColumn, KeyColumn, DescriptionColumn, IconURLColumn, URLColumn, PricingPageURLColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		mutableColumns       = postgres.ColumnList{OwnerTypeColumn, OwnerFamilyIDColumn, OwnerUserIDColumn, NameColumn, KeyColumn, DescriptionColumn, IconURLColumn, URLColumn, PricingPageURLColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		defaultColumns       = postgres.ColumnList{}
	)

	return providersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		OwnerType:      OwnerTypeColumn,
		OwnerFamilyID:  OwnerFamilyIDColumn,
		OwnerUserID:    OwnerUserIDColumn,
		Name:           NameColumn,
		Key:            KeyColumn,
		Description:    DescriptionColumn,
		IconURL:        IconURLColumn,
		URL:            URLColumn,
		PricingPageURL: PricingPageURLColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		Etag:           EtagColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
