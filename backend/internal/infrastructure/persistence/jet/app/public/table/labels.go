//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Labels = newLabelsTable("public", "labels", "")

type labelsTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnString
	OwnerType     postgres.ColumnString
	OwnerFamilyID postgres.ColumnString
	OwnerUserID   postgres.ColumnString
	Name          postgres.ColumnString
	Key           postgres.ColumnString
	Color         postgres.ColumnString
	CreatedAt     postgres.ColumnTimestampz
	UpdatedAt     postgres.ColumnTimestampz
	Etag          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type LabelsTable struct {
	labelsTable

	EXCLUDED labelsTable
}

// AS creates new LabelsTable with assigned alias
func (a LabelsTable) AS(alias string) *LabelsTable {
	return newLabelsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LabelsTable with assigned schema name
func (a LabelsTable) FromSchema(schemaName string) *LabelsTable {
	return newLabelsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LabelsTable with assigned table prefix
func (a LabelsTable) WithPrefix(prefix string) *LabelsTable {
	return newLabelsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LabelsTable with assigned table suffix
func (a LabelsTable) WithSuffix(suffix string) *LabelsTable {
	return newLabelsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLabelsTable(schemaName, tableName, alias string) *LabelsTable {
	return &LabelsTable{
		labelsTable: newLabelsTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newLabelsTableImpl("", "excluded", ""),
	}
}

func newLabelsTableImpl(schemaName, tableName, alias string) labelsTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		OwnerTypeColumn     = postgres.StringColumn("owner_type")
		OwnerFamilyIDColumn = postgres.StringColumn("owner_family_id")
		OwnerUserIDColumn   = postgres.StringColumn("owner_user_id")
		NameColumn          = postgres.StringColumn("name")
		KeyColumn           = postgres.StringColumn("key")
		ColorColumn         = postgres.StringColumn("color")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn     = postgres.TimestampzColumn("updated_at")
		EtagColumn          = postgres.StringColumn("etag")
		allColumns          = postgres.ColumnList{IDColumn, OwnerTypeColumn, OwnerFamilyIDColumn, OwnerUserIDColumn, NameColumn, KeyColumn, ColorColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		mutableColumns      = postgres.ColumnList{OwnerTypeColumn, OwnerFamilyIDColumn, OwnerUserIDColumn, NameColumn, KeyColumn, ColorColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		defaultColumns      = postgres.ColumnList{}
	)

	return labelsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		OwnerType:     OwnerTypeColumn,
		OwnerFamilyID: OwnerFamilyIDColumn,
		OwnerUserID:   OwnerUserIDColumn,
		Name:          NameColumn,
		Key:           KeyColumn,
		Color:         ColorColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,
		Etag:          EtagColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
