//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ProviderPlans = newProviderPlansTable("public", "provider_plans", "")

type providerPlansTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	Name        postgres.ColumnString
	Description postgres.ColumnString
	ProviderID  postgres.ColumnString
	CreatedAt   postgres.ColumnTimestamp
	UpdatedAt   postgres.ColumnTimestamp
	Etag        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ProviderPlansTable struct {
	providerPlansTable

	EXCLUDED providerPlansTable
}

// AS creates new ProviderPlansTable with assigned alias
func (a ProviderPlansTable) AS(alias string) *ProviderPlansTable {
	return newProviderPlansTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProviderPlansTable with assigned schema name
func (a ProviderPlansTable) FromSchema(schemaName string) *ProviderPlansTable {
	return newProviderPlansTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProviderPlansTable with assigned table prefix
func (a ProviderPlansTable) WithPrefix(prefix string) *ProviderPlansTable {
	return newProviderPlansTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProviderPlansTable with assigned table suffix
func (a ProviderPlansTable) WithSuffix(suffix string) *ProviderPlansTable {
	return newProviderPlansTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProviderPlansTable(schemaName, tableName, alias string) *ProviderPlansTable {
	return &ProviderPlansTable{
		providerPlansTable: newProviderPlansTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newProviderPlansTableImpl("", "excluded", ""),
	}
}

func newProviderPlansTableImpl(schemaName, tableName, alias string) providerPlansTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		NameColumn        = postgres.StringColumn("name")
		DescriptionColumn = postgres.StringColumn("description")
		ProviderIDColumn  = postgres.StringColumn("provider_id")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		EtagColumn        = postgres.StringColumn("etag")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, ProviderIDColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, DescriptionColumn, ProviderIDColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		defaultColumns    = postgres.ColumnList{}
	)

	return providerPlansTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		ProviderID:  ProviderIDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		Etag:        EtagColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
