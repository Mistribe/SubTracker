//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FamilyMembers = newFamilyMembersTable("public", "family_members", "")

type familyMembersTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	Name           postgres.ColumnString
	FamilyID       postgres.ColumnString
	UserID         postgres.ColumnString
	Type           postgres.ColumnString
	InvitationCode postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	Etag           postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type FamilyMembersTable struct {
	familyMembersTable

	EXCLUDED familyMembersTable
}

// AS creates new FamilyMembersTable with assigned alias
func (a FamilyMembersTable) AS(alias string) *FamilyMembersTable {
	return newFamilyMembersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FamilyMembersTable with assigned schema name
func (a FamilyMembersTable) FromSchema(schemaName string) *FamilyMembersTable {
	return newFamilyMembersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FamilyMembersTable with assigned table prefix
func (a FamilyMembersTable) WithPrefix(prefix string) *FamilyMembersTable {
	return newFamilyMembersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FamilyMembersTable with assigned table suffix
func (a FamilyMembersTable) WithSuffix(suffix string) *FamilyMembersTable {
	return newFamilyMembersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFamilyMembersTable(schemaName, tableName, alias string) *FamilyMembersTable {
	return &FamilyMembersTable{
		familyMembersTable: newFamilyMembersTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newFamilyMembersTableImpl("", "excluded", ""),
	}
}

func newFamilyMembersTableImpl(schemaName, tableName, alias string) familyMembersTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		NameColumn           = postgres.StringColumn("name")
		FamilyIDColumn       = postgres.StringColumn("family_id")
		UserIDColumn         = postgres.StringColumn("user_id")
		TypeColumn           = postgres.StringColumn("type")
		InvitationCodeColumn = postgres.StringColumn("invitation_code")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		EtagColumn           = postgres.StringColumn("etag")
		allColumns           = postgres.ColumnList{IDColumn, NameColumn, FamilyIDColumn, UserIDColumn, TypeColumn, InvitationCodeColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		mutableColumns       = postgres.ColumnList{NameColumn, FamilyIDColumn, UserIDColumn, TypeColumn, InvitationCodeColumn, CreatedAtColumn, UpdatedAtColumn, EtagColumn}
		defaultColumns       = postgres.ColumnList{}
	)

	return familyMembersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		Name:           NameColumn,
		FamilyID:       FamilyIDColumn,
		UserID:         UserIDColumn,
		Type:           TypeColumn,
		InvitationCode: InvitationCodeColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		Etag:           EtagColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
