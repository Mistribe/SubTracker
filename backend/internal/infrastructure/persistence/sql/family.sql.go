// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: family.sql

package sql

import (
	"context"
	"time"

	"github.com/google/uuid"
)

type CreateFamiliesParams struct {
	ID        uuid.UUID
	Name      string
	OwnerID   string
	CreatedAt time.Time
	UpdatedAt time.Time
	Etag      string
}

const createFamily = `-- name: CreateFamily :exec
INSERT INTO public.families (id, name, owner_id, created_at, updated_at, etag)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateFamilyParams struct {
	ID        uuid.UUID
	Name      string
	OwnerID   string
	CreatedAt time.Time
	UpdatedAt time.Time
	Etag      string
}

func (q *Queries) CreateFamily(ctx context.Context, arg CreateFamilyParams) error {
	_, err := q.db.Exec(ctx, createFamily,
		arg.ID,
		arg.Name,
		arg.OwnerID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Etag,
	)
	return err
}

const createFamilyMember = `-- name: CreateFamilyMember :exec
INSERT INTO public.family_members (id, family_id, user_id, name, type, created_at, updated_at, etag)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateFamilyMemberParams struct {
	ID        uuid.UUID
	FamilyID  uuid.UUID
	UserID    *string
	Name      string
	Type      string
	CreatedAt time.Time
	UpdatedAt time.Time
	Etag      string
}

func (q *Queries) CreateFamilyMember(ctx context.Context, arg CreateFamilyMemberParams) error {
	_, err := q.db.Exec(ctx, createFamilyMember,
		arg.ID,
		arg.FamilyID,
		arg.UserID,
		arg.Name,
		arg.Type,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Etag,
	)
	return err
}

type CreateFamilyMembersParams struct {
	ID        uuid.UUID
	FamilyID  uuid.UUID
	UserID    *string
	Name      string
	Type      string
	CreatedAt time.Time
	UpdatedAt time.Time
	Etag      string
}

const deleteFamily = `-- name: DeleteFamily :exec
DELETE
FROM public.families f
WHERE f.id = $1
`

func (q *Queries) DeleteFamily(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFamily, id)
	return err
}

const deleteFamilyMember = `-- name: DeleteFamilyMember :exec
DELETE
FROM public.family_members fm
WHERE fm.id = $1
`

func (q *Queries) DeleteFamilyMember(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFamilyMember, id)
	return err
}

const isFamilyExists = `-- name: IsFamilyExists :one
SELECT COUNT(*)
FROM public.families f
WHERE f.id = ANY ($1::uuid[])
`

func (q *Queries) IsFamilyExists(ctx context.Context, dollar_1 []uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, isFamilyExists, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const isMemberExists = `-- name: IsMemberExists :one
SELECT COUNT(*)
FROM public.family_members fm
WHERE fm.family_id = $1
  AND fm.id = ANY ($2::uuid[])
`

type IsMemberExistsParams struct {
	FamilyID uuid.UUID
	Column2  []uuid.UUID
}

func (q *Queries) IsMemberExists(ctx context.Context, arg IsMemberExistsParams) (int64, error) {
	row := q.db.QueryRow(ctx, isMemberExists, arg.FamilyID, arg.Column2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const isMemberOfFamily = `-- name: IsMemberOfFamily :one
SELECT COUNT(*)
FROM public.family_members fm
WHERE fm.family_id = $1
  AND fm.user_id = $2
`

type IsMemberOfFamilyParams struct {
	FamilyID uuid.UUID
	UserID   *string
}

func (q *Queries) IsMemberOfFamily(ctx context.Context, arg IsMemberOfFamilyParams) (int64, error) {
	row := q.db.QueryRow(ctx, isMemberOfFamily, arg.FamilyID, arg.UserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateFamily = `-- name: UpdateFamily :exec
UPDATE public.families
SET name       = $2,
    owner_id   = $3,
    updated_at = $4,
    etag       = $5
WHERE id = $1
`

type UpdateFamilyParams struct {
	ID        uuid.UUID
	Name      string
	OwnerID   string
	UpdatedAt time.Time
	Etag      string
}

func (q *Queries) UpdateFamily(ctx context.Context, arg UpdateFamilyParams) error {
	_, err := q.db.Exec(ctx, updateFamily,
		arg.ID,
		arg.Name,
		arg.OwnerID,
		arg.UpdatedAt,
		arg.Etag,
	)
	return err
}

const updateFamilyMember = `-- name: UpdateFamilyMember :exec
UPDATE public.family_members
SET family_id  = $2,
    user_id    = $3,
    name       = $4,
    type       = $5,
    updated_at = $6,
    etag       = $7
WHERE id = $1
`

type UpdateFamilyMemberParams struct {
	ID        uuid.UUID
	FamilyID  uuid.UUID
	UserID    *string
	Name      string
	Type      string
	UpdatedAt time.Time
	Etag      string
}

func (q *Queries) UpdateFamilyMember(ctx context.Context, arg UpdateFamilyMemberParams) error {
	_, err := q.db.Exec(ctx, updateFamilyMember,
		arg.ID,
		arg.FamilyID,
		arg.UserID,
		arg.Name,
		arg.Type,
		arg.UpdatedAt,
		arg.Etag,
	)
	return err
}

const getFamiliesForUser = `-- name: getFamiliesForUser :many
SELECT f.id          AS "families.id",
       f.name        AS "families.name",
       f.owner_id    AS "families.owner_id",
       f.created_at  AS "families.created_at",
       f.updated_at  AS "families.updated_at",
       f.etag        AS "families.etag",
       fm.id         AS "family_members.id",
       fm.name       AS "family_members.name",
       fm.family_id  AS "family_members.family_id",
       fm.user_id    AS "family_members.user_id",
       fm.type       AS "family_members.type",
       fm.created_at AS "family_members.created_at",
       fm.updated_at AS "family_members.updated_at",
       fm.etag       AS "family_members.etag",
       f.total_count AS "total_count"
FROM (SELECT f.id, f.name, f.owner_id, f.created_at, f.updated_at, f.etag,
             COUNT(*) OVER () AS total_count
      FROM public.families f
               LEFT JOIN public.family_members fm ON f.id = fm.family_id
      WHERE fm.user_id = $1
      ORDER BY f.Id
      LIMIT $2 OFFSET $3) f
         LEFT JOIN public.family_members fm ON f.id = fm.family_id
`

type getFamiliesForUserParams struct {
	UserID *string
	Limit  int32
	Offset int32
}

type getFamiliesForUserRow struct {
	FamiliesID             uuid.UUID
	FamiliesName           string
	FamiliesOwnerID        string
	FamiliesCreatedAt      time.Time
	FamiliesUpdatedAt      time.Time
	FamiliesEtag           string
	FamilyMembersID        *uuid.UUID
	FamilyMembersName      *string
	FamilyMembersFamilyID  *uuid.UUID
	FamilyMembersUserID    *string
	FamilyMembersType      *string
	FamilyMembersCreatedAt *time.Time
	FamilyMembersUpdatedAt *time.Time
	FamilyMembersEtag      *string
	TotalCount             int64
}

func (q *Queries) getFamiliesForUser(ctx context.Context, arg getFamiliesForUserParams) ([]getFamiliesForUserRow, error) {
	rows, err := q.db.Query(ctx, getFamiliesForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getFamiliesForUserRow
	for rows.Next() {
		var i getFamiliesForUserRow
		if err := rows.Scan(
			&i.FamiliesID,
			&i.FamiliesName,
			&i.FamiliesOwnerID,
			&i.FamiliesCreatedAt,
			&i.FamiliesUpdatedAt,
			&i.FamiliesEtag,
			&i.FamilyMembersID,
			&i.FamilyMembersName,
			&i.FamilyMembersFamilyID,
			&i.FamilyMembersUserID,
			&i.FamilyMembersType,
			&i.FamilyMembersCreatedAt,
			&i.FamilyMembersUpdatedAt,
			&i.FamilyMembersEtag,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFamilyById = `-- name: getFamilyById :many
SELECT f.id          AS "families.id",
       f.name        AS "families.name",
       f.owner_id    AS "families.owner_id",
       f.created_at  AS "families.created_at",
       f.updated_at  AS "families.updated_at",
       f.etag        AS "families.etag",
       fm.id         AS "family_members.id",
       fm.name       AS "family_members.name",
       fm.family_id  AS "family_members.family_id",
       fm.user_id    AS "family_members.user_id",
       fm.type       AS "family_members.type",
       fm.created_at AS "family_members.created_at",
       fm.updated_at AS "family_members.updated_at",
       fm.etag       AS "family_members.etag"
FROM public.families f
         LEFT JOIN public.family_members fm ON f.id = fm.family_id
WHERE f.id = $1
`

type getFamilyByIdRow struct {
	FamiliesID             uuid.UUID
	FamiliesName           string
	FamiliesOwnerID        string
	FamiliesCreatedAt      time.Time
	FamiliesUpdatedAt      time.Time
	FamiliesEtag           string
	FamilyMembersID        *uuid.UUID
	FamilyMembersName      *string
	FamilyMembersFamilyID  *uuid.UUID
	FamilyMembersUserID    *string
	FamilyMembersType      *string
	FamilyMembersCreatedAt *time.Time
	FamilyMembersUpdatedAt *time.Time
	FamilyMembersEtag      *string
}

func (q *Queries) getFamilyById(ctx context.Context, id uuid.UUID) ([]getFamilyByIdRow, error) {
	rows, err := q.db.Query(ctx, getFamilyById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getFamilyByIdRow
	for rows.Next() {
		var i getFamilyByIdRow
		if err := rows.Scan(
			&i.FamiliesID,
			&i.FamiliesName,
			&i.FamiliesOwnerID,
			&i.FamiliesCreatedAt,
			&i.FamiliesUpdatedAt,
			&i.FamiliesEtag,
			&i.FamilyMembersID,
			&i.FamilyMembersName,
			&i.FamilyMembersFamilyID,
			&i.FamilyMembersUserID,
			&i.FamilyMembersType,
			&i.FamilyMembersCreatedAt,
			&i.FamilyMembersUpdatedAt,
			&i.FamilyMembersEtag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
