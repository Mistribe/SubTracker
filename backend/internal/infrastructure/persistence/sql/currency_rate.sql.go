// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: currency_rate.sql

package sql

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCurrencyRate = `-- name: CreateCurrencyRate :exec
INSERT INTO public.currency_rates (id, from_currency, to_currency, rate_date, exchange_rate,
                                   created_at, updated_at, etag)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateCurrencyRateParams struct {
	ID           uuid.UUID
	FromCurrency string
	ToCurrency   string
	RateDate     pgtype.Date
	ExchangeRate float64
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Etag         string
}

func (q *Queries) CreateCurrencyRate(ctx context.Context, arg CreateCurrencyRateParams) error {
	_, err := q.db.Exec(ctx, createCurrencyRate,
		arg.ID,
		arg.FromCurrency,
		arg.ToCurrency,
		arg.RateDate,
		arg.ExchangeRate,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Etag,
	)
	return err
}

type CreateCurrencyRatesParams struct {
	ID           uuid.UUID
	FromCurrency string
	ToCurrency   string
	RateDate     pgtype.Date
	ExchangeRate float64
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Etag         string
}

const deleteCurrencyRate = `-- name: DeleteCurrencyRate :exec
DELETE
FROM public.currency_rates
WHERE id = $1
`

func (q *Queries) DeleteCurrencyRate(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCurrencyRate, id)
	return err
}

const updateCurrencyRate = `-- name: UpdateCurrencyRate :exec
UPDATE public.currency_rates
SET from_currency = $2,
    to_currency   = $3,
    rate_date     = $4,
    exchange_rate = $5,
    updated_at    = $6,
    etag          = $7
WHERE id = $1
`

type UpdateCurrencyRateParams struct {
	ID           uuid.UUID
	FromCurrency string
	ToCurrency   string
	RateDate     pgtype.Date
	ExchangeRate float64
	UpdatedAt    time.Time
	Etag         string
}

func (q *Queries) UpdateCurrencyRate(ctx context.Context, arg UpdateCurrencyRateParams) error {
	_, err := q.db.Exec(ctx, updateCurrencyRate,
		arg.ID,
		arg.FromCurrency,
		arg.ToCurrency,
		arg.RateDate,
		arg.ExchangeRate,
		arg.UpdatedAt,
		arg.Etag,
	)
	return err
}
