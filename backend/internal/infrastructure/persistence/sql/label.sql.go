// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: label.sql

package sql

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createLabel = `-- name: CreateLabel :exec
INSERT INTO public.labels (id, owner_type, owner_family_id, owner_user_id, name, key, color, created_at, updated_at,
                           etag)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type CreateLabelParams struct {
	ID            uuid.UUID
	OwnerType     string
	OwnerFamilyID *uuid.UUID
	OwnerUserID   *string
	Name          string
	Key           *string
	Color         string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Etag          string
}

func (q *Queries) CreateLabel(ctx context.Context, arg CreateLabelParams) error {
	_, err := q.db.Exec(ctx, createLabel,
		arg.ID,
		arg.OwnerType,
		arg.OwnerFamilyID,
		arg.OwnerUserID,
		arg.Name,
		arg.Key,
		arg.Color,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Etag,
	)
	return err
}

type CreateLabelsParams struct {
	ID            uuid.UUID
	OwnerType     string
	OwnerFamilyID *uuid.UUID
	OwnerUserID   *string
	Name          string
	Key           *string
	Color         string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Etag          string
}

const deleteLabel = `-- name: DeleteLabel :exec
DELETE
FROM public.labels l
WHERE l.id = $1
`

func (q *Queries) DeleteLabel(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLabel, id)
	return err
}

const deleteLabelsForFamily = `-- name: DeleteLabelsForFamily :exec
DELETE
FROM public.labels l
WHERE l.owner_type = 'family'
  AND l.owner_family_id = $1
`

func (q *Queries) DeleteLabelsForFamily(ctx context.Context, ownerFamilyID *uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLabelsForFamily, ownerFamilyID)
	return err
}

const deleteLabelsForUser = `-- name: DeleteLabelsForUser :exec
DELETE
FROM public.labels l
WHERE l.owner_type = 'user'
  AND l.owner_user_id = $1
`

func (q *Queries) DeleteLabelsForUser(ctx context.Context, ownerUserID *string) error {
	_, err := q.db.Exec(ctx, deleteLabelsForUser, ownerUserID)
	return err
}

const getLabelById = `-- name: GetLabelById :one
SELECT id, owner_type, owner_family_id, owner_user_id, name, key, color, created_at, updated_at, etag
FROM public.labels l
WHERE l.id = $1
`

func (q *Queries) GetLabelById(ctx context.Context, id uuid.UUID) (Label, error) {
	row := q.db.QueryRow(ctx, getLabelById, id)
	var i Label
	err := row.Scan(
		&i.ID,
		&i.OwnerType,
		&i.OwnerFamilyID,
		&i.OwnerUserID,
		&i.Name,
		&i.Key,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Etag,
	)
	return i, err
}

const getLabels = `-- name: GetLabels :many
SELECT l.id, l.owner_type, l.owner_family_id, l.owner_user_id, l.name, l.key, l.color, l.created_at, l.updated_at, l.etag,
       COUNT(*) OVER () AS total_count
FROM labels l
WHERE (
          -- Personal owner condition
          ('personal' = ANY($1::varchar[]) AND l.owner_user_id = $2)
              OR
              -- System owner condition
          ('system'= ANY($1::varchar[]))
              OR
              -- Family owner condition
          ('family' = ANY($1::varchar[]) AND l.owner_family_id = ANY ($3::uuid[]))
          )
LIMIT $4 OFFSET $5
`

type GetLabelsParams struct {
	Column1     []string
	OwnerUserID *string
	Column3     []uuid.UUID
	Limit       int32
	Offset      int32
}

type GetLabelsRow struct {
	Label      Label
	TotalCount int64
}

func (q *Queries) GetLabels(ctx context.Context, arg GetLabelsParams) ([]GetLabelsRow, error) {
	rows, err := q.db.Query(ctx, getLabels,
		arg.Column1,
		arg.OwnerUserID,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLabelsRow
	for rows.Next() {
		var i GetLabelsRow
		if err := rows.Scan(
			&i.Label.ID,
			&i.Label.OwnerType,
			&i.Label.OwnerFamilyID,
			&i.Label.OwnerUserID,
			&i.Label.Name,
			&i.Label.Key,
			&i.Label.Color,
			&i.Label.CreatedAt,
			&i.Label.UpdatedAt,
			&i.Label.Etag,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemLabels = `-- name: GetSystemLabels :many
SELECT id, owner_type, owner_family_id, owner_user_id, name, key, color, created_at, updated_at, etag
FROM public.labels l
WHERE l.owner_family_id IS NULL
  AND l.owner_user_id IS NULL
  AND l.owner_type = 'system'
`

func (q *Queries) GetSystemLabels(ctx context.Context) ([]Label, error) {
	rows, err := q.db.Query(ctx, getSystemLabels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Label
	for rows.Next() {
		var i Label
		if err := rows.Scan(
			&i.ID,
			&i.OwnerType,
			&i.OwnerFamilyID,
			&i.OwnerUserID,
			&i.Name,
			&i.Key,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Etag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isLabelExists = `-- name: IsLabelExists :one
SELECT COUNT(*)
FROM public.labels l
WHERE l.id = ANY ($1::uuid[])
`

func (q *Queries) IsLabelExists(ctx context.Context, dollar_1 []uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, isLabelExists, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateLabel = `-- name: UpdateLabel :exec
UPDATE public.labels
SET owner_type      = $2,
    owner_family_id = $3,
    owner_user_id   = $4,
    name            = $5,
    key             = $6,
    color           = $7,
    updated_at      = $8,
    etag            = $9
WHERE id = $1
`

type UpdateLabelParams struct {
	ID            uuid.UUID
	OwnerType     string
	OwnerFamilyID *uuid.UUID
	OwnerUserID   *string
	Name          string
	Key           *string
	Color         string
	UpdatedAt     time.Time
	Etag          string
}

func (q *Queries) UpdateLabel(ctx context.Context, arg UpdateLabelParams) error {
	_, err := q.db.Exec(ctx, updateLabel,
		arg.ID,
		arg.OwnerType,
		arg.OwnerFamilyID,
		arg.OwnerUserID,
		arg.Name,
		arg.Key,
		arg.Color,
		arg.UpdatedAt,
		arg.Etag,
	)
	return err
}
