// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package exchange

import (
	mock "github.com/stretchr/testify/mock"
	"golang.org/x/text/currency"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// GetLiveExchangeRates provides a mock function for the type MockClient
func (_mock *MockClient) GetLiveExchangeRates(currencies []currency.Unit) (LiveExchangeRates, error) {
	ret := _mock.Called(currencies)

	if len(ret) == 0 {
		panic("no return value specified for GetLiveExchangeRates")
	}

	var r0 LiveExchangeRates
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]currency.Unit) (LiveExchangeRates, error)); ok {
		return returnFunc(currencies)
	}
	if returnFunc, ok := ret.Get(0).(func([]currency.Unit) LiveExchangeRates); ok {
		r0 = returnFunc(currencies)
	} else {
		r0 = ret.Get(0).(LiveExchangeRates)
	}
	if returnFunc, ok := ret.Get(1).(func([]currency.Unit) error); ok {
		r1 = returnFunc(currencies)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetLiveExchangeRates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLiveExchangeRates'
type MockClient_GetLiveExchangeRates_Call struct {
	*mock.Call
}

// GetLiveExchangeRates is a helper method to define mock.On call
//   - currencies []currency.Unit
func (_e *MockClient_Expecter) GetLiveExchangeRates(currencies interface{}) *MockClient_GetLiveExchangeRates_Call {
	return &MockClient_GetLiveExchangeRates_Call{Call: _e.mock.On("GetLiveExchangeRates", currencies)}
}

func (_c *MockClient_GetLiveExchangeRates_Call) Run(run func(currencies []currency.Unit)) *MockClient_GetLiveExchangeRates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []currency.Unit
		if args[0] != nil {
			arg0 = args[0].([]currency.Unit)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetLiveExchangeRates_Call) Return(liveExchangeRates LiveExchangeRates, err error) *MockClient_GetLiveExchangeRates_Call {
	_c.Call.Return(liveExchangeRates, err)
	return _c
}

func (_c *MockClient_GetLiveExchangeRates_Call) RunAndReturn(run func(currencies []currency.Unit) (LiveExchangeRates, error)) *MockClient_GetLiveExchangeRates_Call {
	_c.Call.Return(run)
	return _c
}
