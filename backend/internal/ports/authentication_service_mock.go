// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"

	"github.com/google/uuid"
	"github.com/mistribe/subtracker/internal/domain/auth"
	"github.com/mistribe/subtracker/internal/domain/user"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthenticationService creates a new instance of MockAuthenticationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticationService {
	mock := &MockAuthenticationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthenticationService is an autogenerated mock type for the AuthenticationService type
type MockAuthenticationService struct {
	mock.Mock
}

type MockAuthenticationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenticationService) EXPECT() *MockAuthenticationService_Expecter {
	return &MockAuthenticationService_Expecter{mock: &_m.Mock}
}

// IsInFamily provides a mock function for the type MockAuthenticationService
func (_mock *MockAuthenticationService) IsInFamily(ctx context.Context, familyId uuid.UUID) bool {
	ret := _mock.Called(ctx, familyId)

	if len(ret) == 0 {
		panic("no return value specified for IsInFamily")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, familyId)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockAuthenticationService_IsInFamily_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInFamily'
type MockAuthenticationService_IsInFamily_Call struct {
	*mock.Call
}

// IsInFamily is a helper method to define mock.On call
//   - ctx context.Context
//   - familyId uuid.UUID
func (_e *MockAuthenticationService_Expecter) IsInFamily(ctx interface{}, familyId interface{}) *MockAuthenticationService_IsInFamily_Call {
	return &MockAuthenticationService_IsInFamily_Call{Call: _e.mock.On("IsInFamily", ctx, familyId)}
}

func (_c *MockAuthenticationService_IsInFamily_Call) Run(run func(ctx context.Context, familyId uuid.UUID)) *MockAuthenticationService_IsInFamily_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthenticationService_IsInFamily_Call) Return(b bool) *MockAuthenticationService_IsInFamily_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockAuthenticationService_IsInFamily_Call) RunAndReturn(run func(ctx context.Context, familyId uuid.UUID) bool) *MockAuthenticationService_IsInFamily_Call {
	_c.Call.Return(run)
	return _c
}

// IsOwner provides a mock function for the type MockAuthenticationService
func (_mock *MockAuthenticationService) IsOwner(ctx context.Context, owner auth.Owner) (bool, error) {
	ret := _mock.Called(ctx, owner)

	if len(ret) == 0 {
		panic("no return value specified for IsOwner")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, auth.Owner) (bool, error)); ok {
		return returnFunc(ctx, owner)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, auth.Owner) bool); ok {
		r0 = returnFunc(ctx, owner)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, auth.Owner) error); ok {
		r1 = returnFunc(ctx, owner)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthenticationService_IsOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOwner'
type MockAuthenticationService_IsOwner_Call struct {
	*mock.Call
}

// IsOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - owner auth.Owner
func (_e *MockAuthenticationService_Expecter) IsOwner(ctx interface{}, owner interface{}) *MockAuthenticationService_IsOwner_Call {
	return &MockAuthenticationService_IsOwner_Call{Call: _e.mock.On("IsOwner", ctx, owner)}
}

func (_c *MockAuthenticationService_IsOwner_Call) Run(run func(ctx context.Context, owner auth.Owner)) *MockAuthenticationService_IsOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 auth.Owner
		if args[1] != nil {
			arg1 = args[1].(auth.Owner)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthenticationService_IsOwner_Call) Return(b bool, err error) *MockAuthenticationService_IsOwner_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockAuthenticationService_IsOwner_Call) RunAndReturn(run func(ctx context.Context, owner auth.Owner) (bool, error)) *MockAuthenticationService_IsOwner_Call {
	_c.Call.Return(run)
	return _c
}

// MustGetFamilies provides a mock function for the type MockAuthenticationService
func (_mock *MockAuthenticationService) MustGetFamilies(ctx context.Context) []uuid.UUID {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MustGetFamilies")
	}

	var r0 []uuid.UUID
	if returnFunc, ok := ret.Get(0).(func(context.Context) []uuid.UUID); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}
	return r0
}

// MockAuthenticationService_MustGetFamilies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustGetFamilies'
type MockAuthenticationService_MustGetFamilies_Call struct {
	*mock.Call
}

// MustGetFamilies is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthenticationService_Expecter) MustGetFamilies(ctx interface{}) *MockAuthenticationService_MustGetFamilies_Call {
	return &MockAuthenticationService_MustGetFamilies_Call{Call: _e.mock.On("MustGetFamilies", ctx)}
}

func (_c *MockAuthenticationService_MustGetFamilies_Call) Run(run func(ctx context.Context)) *MockAuthenticationService_MustGetFamilies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthenticationService_MustGetFamilies_Call) Return(uUIDs []uuid.UUID) *MockAuthenticationService_MustGetFamilies_Call {
	_c.Call.Return(uUIDs)
	return _c
}

func (_c *MockAuthenticationService_MustGetFamilies_Call) RunAndReturn(run func(ctx context.Context) []uuid.UUID) *MockAuthenticationService_MustGetFamilies_Call {
	_c.Call.Return(run)
	return _c
}

// MustGetUserId provides a mock function for the type MockAuthenticationService
func (_mock *MockAuthenticationService) MustGetUserId(ctx context.Context) string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MustGetUserId")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAuthenticationService_MustGetUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustGetUserId'
type MockAuthenticationService_MustGetUserId_Call struct {
	*mock.Call
}

// MustGetUserId is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthenticationService_Expecter) MustGetUserId(ctx interface{}) *MockAuthenticationService_MustGetUserId_Call {
	return &MockAuthenticationService_MustGetUserId_Call{Call: _e.mock.On("MustGetUserId", ctx)}
}

func (_c *MockAuthenticationService_MustGetUserId_Call) Run(run func(ctx context.Context)) *MockAuthenticationService_MustGetUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthenticationService_MustGetUserId_Call) Return(s string) *MockAuthenticationService_MustGetUserId_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAuthenticationService_MustGetUserId_Call) RunAndReturn(run func(ctx context.Context) string) *MockAuthenticationService_MustGetUserId_Call {
	_c.Call.Return(run)
	return _c
}

// MustGetUserRole provides a mock function for the type MockAuthenticationService
func (_mock *MockAuthenticationService) MustGetUserRole(ctx context.Context) user.Role {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MustGetUserRole")
	}

	var r0 user.Role
	if returnFunc, ok := ret.Get(0).(func(context.Context) user.Role); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(user.Role)
	}
	return r0
}

// MockAuthenticationService_MustGetUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustGetUserRole'
type MockAuthenticationService_MustGetUserRole_Call struct {
	*mock.Call
}

// MustGetUserRole is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthenticationService_Expecter) MustGetUserRole(ctx interface{}) *MockAuthenticationService_MustGetUserRole_Call {
	return &MockAuthenticationService_MustGetUserRole_Call{Call: _e.mock.On("MustGetUserRole", ctx)}
}

func (_c *MockAuthenticationService_MustGetUserRole_Call) Run(run func(ctx context.Context)) *MockAuthenticationService_MustGetUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthenticationService_MustGetUserRole_Call) Return(role user.Role) *MockAuthenticationService_MustGetUserRole_Call {
	_c.Call.Return(role)
	return _c
}

func (_c *MockAuthenticationService_MustGetUserRole_Call) RunAndReturn(run func(ctx context.Context) user.Role) *MockAuthenticationService_MustGetUserRole_Call {
	_c.Call.Return(run)
	return _c
}
