// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// From provides a mock function for the type MockCache
func (_mock *MockCache) From(ctx context.Context, level CacheLevel) CacheLeveled {
	ret := _mock.Called(ctx, level)

	if len(ret) == 0 {
		panic("no return value specified for From")
	}

	var r0 CacheLeveled
	if returnFunc, ok := ret.Get(0).(func(context.Context, CacheLevel) CacheLeveled); ok {
		r0 = returnFunc(ctx, level)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CacheLeveled)
		}
	}
	return r0
}

// MockCache_From_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'From'
type MockCache_From_Call struct {
	*mock.Call
}

// From is a helper method to define mock.On call
//   - ctx context.Context
//   - level CacheLevel
func (_e *MockCache_Expecter) From(ctx interface{}, level interface{}) *MockCache_From_Call {
	return &MockCache_From_Call{Call: _e.mock.On("From", ctx, level)}
}

func (_c *MockCache_From_Call) Run(run func(ctx context.Context, level CacheLevel)) *MockCache_From_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 CacheLevel
		if args[1] != nil {
			arg1 = args[1].(CacheLevel)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_From_Call) Return(cacheLeveled CacheLeveled) *MockCache_From_Call {
	_c.Call.Return(cacheLeveled)
	return _c
}

func (_c *MockCache_From_Call) RunAndReturn(run func(ctx context.Context, level CacheLevel) CacheLeveled) *MockCache_From_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockCache
func (_mock *MockCache) Get(ctx context.Context, key string) interface{} {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) interface{}); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	return r0
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockCache_Expecter) Get(ctx interface{}, key interface{}) *MockCache_Get_Call {
	return &MockCache_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockCache_Get_Call) Run(run func(ctx context.Context, key string)) *MockCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_Get_Call) Return(ifaceVal interface{}) *MockCache_Get_Call {
	_c.Call.Return(ifaceVal)
	return _c
}

func (_c *MockCache_Get_Call) RunAndReturn(run func(ctx context.Context, key string) interface{}) *MockCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockCache
func (_mock *MockCache) Set(ctx context.Context, key string, value interface{}, options ...func(*CacheOptions)) {
	if len(options) > 0 {
		_mock.Called(ctx, key, value, options)
	} else {
		_mock.Called(ctx, key, value)
	}

	return
}

// MockCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - options ...func(*CacheOptions)
func (_e *MockCache_Expecter) Set(ctx interface{}, key interface{}, value interface{}, options ...interface{}) *MockCache_Set_Call {
	return &MockCache_Set_Call{Call: _e.mock.On("Set",
		append([]interface{}{ctx, key, value}, options...)...)}
}

func (_c *MockCache_Set_Call) Run(run func(ctx context.Context, key string, value interface{}, options ...func(*CacheOptions))) *MockCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interface{}
		if args[2] != nil {
			arg2 = args[2].(interface{})
		}
		var arg3 []func(*CacheOptions)
		var variadicArgs []func(*CacheOptions)
		if len(args) > 3 {
			variadicArgs = args[3].([]func(*CacheOptions))
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockCache_Set_Call) Return() *MockCache_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Set_Call) RunAndReturn(run func(ctx context.Context, key string, value interface{}, options ...func(*CacheOptions))) *MockCache_Set_Call {
	_c.Run(run)
	return _c
}
