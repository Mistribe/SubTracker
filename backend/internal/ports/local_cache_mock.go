// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockLocalCache creates a new instance of MockLocalCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocalCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocalCache {
	mock := &MockLocalCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLocalCache is an autogenerated mock type for the LocalCache type
type MockLocalCache struct {
	mock.Mock
}

type MockLocalCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocalCache) EXPECT() *MockLocalCache_Expecter {
	return &MockLocalCache_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockLocalCache
func (_mock *MockLocalCache) Get(key string) interface{} {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	if returnFunc, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	return r0
}

// MockLocalCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockLocalCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockLocalCache_Expecter) Get(key interface{}) *MockLocalCache_Get_Call {
	return &MockLocalCache_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockLocalCache_Get_Call) Run(run func(key string)) *MockLocalCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLocalCache_Get_Call) Return(ifaceVal interface{}) *MockLocalCache_Get_Call {
	_c.Call.Return(ifaceVal)
	return _c
}

func (_c *MockLocalCache_Get_Call) RunAndReturn(run func(key string) interface{}) *MockLocalCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// PurgeExpired provides a mock function for the type MockLocalCache
func (_mock *MockLocalCache) PurgeExpired() {
	_mock.Called()
	return
}

// MockLocalCache_PurgeExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgeExpired'
type MockLocalCache_PurgeExpired_Call struct {
	*mock.Call
}

// PurgeExpired is a helper method to define mock.On call
func (_e *MockLocalCache_Expecter) PurgeExpired() *MockLocalCache_PurgeExpired_Call {
	return &MockLocalCache_PurgeExpired_Call{Call: _e.mock.On("PurgeExpired")}
}

func (_c *MockLocalCache_PurgeExpired_Call) Run(run func()) *MockLocalCache_PurgeExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLocalCache_PurgeExpired_Call) Return() *MockLocalCache_PurgeExpired_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLocalCache_PurgeExpired_Call) RunAndReturn(run func()) *MockLocalCache_PurgeExpired_Call {
	_c.Run(run)
	return _c
}

// Set provides a mock function for the type MockLocalCache
func (_mock *MockLocalCache) Set(key string, value interface{}, options ...func(*CacheOptions)) {
	if len(options) > 0 {
		_mock.Called(key, value, options)
	} else {
		_mock.Called(key, value)
	}

	return
}

// MockLocalCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockLocalCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value interface{}
//   - options ...func(*CacheOptions)
func (_e *MockLocalCache_Expecter) Set(key interface{}, value interface{}, options ...interface{}) *MockLocalCache_Set_Call {
	return &MockLocalCache_Set_Call{Call: _e.mock.On("Set",
		append([]interface{}{key, value}, options...)...)}
}

func (_c *MockLocalCache_Set_Call) Run(run func(key string, value interface{}, options ...func(*CacheOptions))) *MockLocalCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 []func(*CacheOptions)
		var variadicArgs []func(*CacheOptions)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*CacheOptions))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLocalCache_Set_Call) Return() *MockLocalCache_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLocalCache_Set_Call) RunAndReturn(run func(key string, value interface{}, options ...func(*CacheOptions))) *MockLocalCache_Set_Call {
	_c.Run(run)
	return _c
}
