// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"

	"github.com/google/uuid"
	"github.com/mistribe/subtracker/internal/domain/label"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLabelRepository creates a new instance of MockLabelRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLabelRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLabelRepository {
	mock := &MockLabelRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLabelRepository is an autogenerated mock type for the LabelRepository type
type MockLabelRepository struct {
	mock.Mock
}

type MockLabelRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLabelRepository) EXPECT() *MockLabelRepository_Expecter {
	return &MockLabelRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockLabelRepository
func (_mock *MockLabelRepository) Delete(ctx context.Context, entityId uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, entityId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, entityId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, entityId)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, entityId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLabelRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockLabelRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - entityId uuid.UUID
func (_e *MockLabelRepository_Expecter) Delete(ctx interface{}, entityId interface{}) *MockLabelRepository_Delete_Call {
	return &MockLabelRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, entityId)}
}

func (_c *MockLabelRepository_Delete_Call) Run(run func(ctx context.Context, entityId uuid.UUID)) *MockLabelRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLabelRepository_Delete_Call) Return(b bool, err error) *MockLabelRepository_Delete_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockLabelRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, entityId uuid.UUID) (bool, error)) *MockLabelRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockLabelRepository
func (_mock *MockLabelRepository) Exists(ctx context.Context, ids ...uuid.UUID) (bool, error) {
	var tmpRet mock.Arguments
	if len(ids) > 0 {
		tmpRet = _mock.Called(ctx, ids)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, ids...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, ids...)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...uuid.UUID) error); ok {
		r1 = returnFunc(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLabelRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockLabelRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...uuid.UUID
func (_e *MockLabelRepository_Expecter) Exists(ctx interface{}, ids ...interface{}) *MockLabelRepository_Exists_Call {
	return &MockLabelRepository_Exists_Call{Call: _e.mock.On("Exists",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *MockLabelRepository_Exists_Call) Run(run func(ctx context.Context, ids ...uuid.UUID)) *MockLabelRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []uuid.UUID
		var variadicArgs []uuid.UUID
		if len(args) > 1 {
			variadicArgs = args[1].([]uuid.UUID)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLabelRepository_Exists_Call) Return(b bool, err error) *MockLabelRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockLabelRepository_Exists_Call) RunAndReturn(run func(ctx context.Context, ids ...uuid.UUID) (bool, error)) *MockLabelRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockLabelRepository
func (_mock *MockLabelRepository) GetAll(ctx context.Context, userId string, parameters LabelQueryParameters) ([]label.Label, int64, error) {
	ret := _mock.Called(ctx, userId, parameters)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []label.Label
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, LabelQueryParameters) ([]label.Label, int64, error)); ok {
		return returnFunc(ctx, userId, parameters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, LabelQueryParameters) []label.Label); ok {
		r0 = returnFunc(ctx, userId, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]label.Label)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, LabelQueryParameters) int64); ok {
		r1 = returnFunc(ctx, userId, parameters)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, LabelQueryParameters) error); ok {
		r2 = returnFunc(ctx, userId, parameters)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLabelRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockLabelRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - parameters LabelQueryParameters
func (_e *MockLabelRepository_Expecter) GetAll(ctx interface{}, userId interface{}, parameters interface{}) *MockLabelRepository_GetAll_Call {
	return &MockLabelRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, userId, parameters)}
}

func (_c *MockLabelRepository_GetAll_Call) Run(run func(ctx context.Context, userId string, parameters LabelQueryParameters)) *MockLabelRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 LabelQueryParameters
		if args[2] != nil {
			arg2 = args[2].(LabelQueryParameters)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockLabelRepository_GetAll_Call) Return(labels []label.Label, n int64, err error) *MockLabelRepository_GetAll_Call {
	_c.Call.Return(labels, n, err)
	return _c
}

func (_c *MockLabelRepository_GetAll_Call) RunAndReturn(run func(ctx context.Context, userId string, parameters LabelQueryParameters) ([]label.Label, int64, error)) *MockLabelRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function for the type MockLabelRepository
func (_mock *MockLabelRepository) GetById(ctx context.Context, entityId uuid.UUID) (label.Label, error) {
	ret := _mock.Called(ctx, entityId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 label.Label
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (label.Label, error)); ok {
		return returnFunc(ctx, entityId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) label.Label); ok {
		r0 = returnFunc(ctx, entityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(label.Label)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, entityId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLabelRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockLabelRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - entityId uuid.UUID
func (_e *MockLabelRepository_Expecter) GetById(ctx interface{}, entityId interface{}) *MockLabelRepository_GetById_Call {
	return &MockLabelRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, entityId)}
}

func (_c *MockLabelRepository_GetById_Call) Run(run func(ctx context.Context, entityId uuid.UUID)) *MockLabelRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLabelRepository_GetById_Call) Return(label1 label.Label, err error) *MockLabelRepository_GetById_Call {
	_c.Call.Return(label1, err)
	return _c
}

func (_c *MockLabelRepository_GetById_Call) RunAndReturn(run func(ctx context.Context, entityId uuid.UUID) (label.Label, error)) *MockLabelRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIdForUser provides a mock function for the type MockLabelRepository
func (_mock *MockLabelRepository) GetByIdForUser(ctx context.Context, userId string, id uuid.UUID) (label.Label, error) {
	ret := _mock.Called(ctx, userId, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByIdForUser")
	}

	var r0 label.Label
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) (label.Label, error)); ok {
		return returnFunc(ctx, userId, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) label.Label); ok {
		r0 = returnFunc(ctx, userId, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(label.Label)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userId, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLabelRepository_GetByIdForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIdForUser'
type MockLabelRepository_GetByIdForUser_Call struct {
	*mock.Call
}

// GetByIdForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - id uuid.UUID
func (_e *MockLabelRepository_Expecter) GetByIdForUser(ctx interface{}, userId interface{}, id interface{}) *MockLabelRepository_GetByIdForUser_Call {
	return &MockLabelRepository_GetByIdForUser_Call{Call: _e.mock.On("GetByIdForUser", ctx, userId, id)}
}

func (_c *MockLabelRepository_GetByIdForUser_Call) Run(run func(ctx context.Context, userId string, id uuid.UUID)) *MockLabelRepository_GetByIdForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockLabelRepository_GetByIdForUser_Call) Return(label1 label.Label, err error) *MockLabelRepository_GetByIdForUser_Call {
	_c.Call.Return(label1, err)
	return _c
}

func (_c *MockLabelRepository_GetByIdForUser_Call) RunAndReturn(run func(ctx context.Context, userId string, id uuid.UUID) (label.Label, error)) *MockLabelRepository_GetByIdForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemLabels provides a mock function for the type MockLabelRepository
func (_mock *MockLabelRepository) GetSystemLabels(ctx context.Context) ([]label.Label, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemLabels")
	}

	var r0 []label.Label
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]label.Label, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []label.Label); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]label.Label)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLabelRepository_GetSystemLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemLabels'
type MockLabelRepository_GetSystemLabels_Call struct {
	*mock.Call
}

// GetSystemLabels is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLabelRepository_Expecter) GetSystemLabels(ctx interface{}) *MockLabelRepository_GetSystemLabels_Call {
	return &MockLabelRepository_GetSystemLabels_Call{Call: _e.mock.On("GetSystemLabels", ctx)}
}

func (_c *MockLabelRepository_GetSystemLabels_Call) Run(run func(ctx context.Context)) *MockLabelRepository_GetSystemLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLabelRepository_GetSystemLabels_Call) Return(labels []label.Label, err error) *MockLabelRepository_GetSystemLabels_Call {
	_c.Call.Return(labels, err)
	return _c
}

func (_c *MockLabelRepository_GetSystemLabels_Call) RunAndReturn(run func(ctx context.Context) ([]label.Label, error)) *MockLabelRepository_GetSystemLabels_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockLabelRepository
func (_mock *MockLabelRepository) Save(ctx context.Context, entities ...label.Label) error {
	var tmpRet mock.Arguments
	if len(entities) > 0 {
		tmpRet = _mock.Called(ctx, entities)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...label.Label) error); ok {
		r0 = returnFunc(ctx, entities...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLabelRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockLabelRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - entities ...label.Label
func (_e *MockLabelRepository_Expecter) Save(ctx interface{}, entities ...interface{}) *MockLabelRepository_Save_Call {
	return &MockLabelRepository_Save_Call{Call: _e.mock.On("Save",
		append([]interface{}{ctx}, entities...)...)}
}

func (_c *MockLabelRepository_Save_Call) Run(run func(ctx context.Context, entities ...label.Label)) *MockLabelRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []label.Label
		var variadicArgs []label.Label
		if len(args) > 1 {
			variadicArgs = args[1].([]label.Label)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLabelRepository_Save_Call) Return(err error) *MockLabelRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLabelRepository_Save_Call) RunAndReturn(run func(ctx context.Context, entities ...label.Label) error) *MockLabelRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
