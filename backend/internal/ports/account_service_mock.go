// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"

	"github.com/mistribe/subtracker/internal/domain/currency"
	"github.com/mistribe/subtracker/internal/domain/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAccountService creates a new instance of MockAccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountService {
	mock := &MockAccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccountService is an autogenerated mock type for the AccountService type
type MockAccountService struct {
	mock.Mock
}

type MockAccountService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountService) EXPECT() *MockAccountService_Expecter {
	return &MockAccountService_Expecter{mock: &_m.Mock}
}

// GetPreferredCurrency provides a mock function for the type MockAccountService
func (_mock *MockAccountService) GetPreferredCurrency(ctx context.Context, userId types.UserID) currency.Unit {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetPreferredCurrency")
	}

	var r0 currency.Unit
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID) currency.Unit); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		r0 = ret.Get(0).(currency.Unit)
	}
	return r0
}

// MockAccountService_GetPreferredCurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreferredCurrency'
type MockAccountService_GetPreferredCurrency_Call struct {
	*mock.Call
}

// GetPreferredCurrency is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.UserID
func (_e *MockAccountService_Expecter) GetPreferredCurrency(ctx interface{}, userId interface{}) *MockAccountService_GetPreferredCurrency_Call {
	return &MockAccountService_GetPreferredCurrency_Call{Call: _e.mock.On("GetPreferredCurrency", ctx, userId)}
}

func (_c *MockAccountService_GetPreferredCurrency_Call) Run(run func(ctx context.Context, userId types.UserID)) *MockAccountService_GetPreferredCurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.UserID
		if args[1] != nil {
			arg1 = args[1].(types.UserID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountService_GetPreferredCurrency_Call) Return(v currency.Unit) *MockAccountService_GetPreferredCurrency_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockAccountService_GetPreferredCurrency_Call) RunAndReturn(run func(ctx context.Context, userId types.UserID) currency.Unit) *MockAccountService_GetPreferredCurrency_Call {
	_c.Call.Return(run)
	return _c
}
