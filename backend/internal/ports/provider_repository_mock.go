// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"

	"github.com/mistribe/subtracker/internal/domain/provider"
	"github.com/mistribe/subtracker/internal/domain/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProviderRepository creates a new instance of MockProviderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderRepository {
	mock := &MockProviderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProviderRepository is an autogenerated mock type for the ProviderRepository type
type MockProviderRepository struct {
	mock.Mock
}

type MockProviderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderRepository) EXPECT() *MockProviderRepository_Expecter {
	return &MockProviderRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockProviderRepository
func (_mock *MockProviderRepository) Delete(ctx context.Context, entityId types.ProviderID) (bool, error) {
	ret := _mock.Called(ctx, entityId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.ProviderID) (bool, error)); ok {
		return returnFunc(ctx, entityId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.ProviderID) bool); ok {
		r0 = returnFunc(ctx, entityId)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.ProviderID) error); ok {
		r1 = returnFunc(ctx, entityId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProviderRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProviderRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - entityId types.ProviderID
func (_e *MockProviderRepository_Expecter) Delete(ctx interface{}, entityId interface{}) *MockProviderRepository_Delete_Call {
	return &MockProviderRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, entityId)}
}

func (_c *MockProviderRepository_Delete_Call) Run(run func(ctx context.Context, entityId types.ProviderID)) *MockProviderRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.ProviderID
		if args[1] != nil {
			arg1 = args[1].(types.ProviderID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProviderRepository_Delete_Call) Return(b bool, err error) *MockProviderRepository_Delete_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockProviderRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, entityId types.ProviderID) (bool, error)) *MockProviderRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockProviderRepository
func (_mock *MockProviderRepository) Exists(ctx context.Context, ids ...types.ProviderID) (bool, error) {
	var tmpRet mock.Arguments
	if len(ids) > 0 {
		tmpRet = _mock.Called(ctx, ids)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...types.ProviderID) (bool, error)); ok {
		return returnFunc(ctx, ids...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...types.ProviderID) bool); ok {
		r0 = returnFunc(ctx, ids...)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...types.ProviderID) error); ok {
		r1 = returnFunc(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProviderRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockProviderRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...types.ProviderID
func (_e *MockProviderRepository_Expecter) Exists(ctx interface{}, ids ...interface{}) *MockProviderRepository_Exists_Call {
	return &MockProviderRepository_Exists_Call{Call: _e.mock.On("Exists",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *MockProviderRepository_Exists_Call) Run(run func(ctx context.Context, ids ...types.ProviderID)) *MockProviderRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []types.ProviderID
		var variadicArgs []types.ProviderID
		if len(args) > 1 {
			variadicArgs = args[1].([]types.ProviderID)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockProviderRepository_Exists_Call) Return(b bool, err error) *MockProviderRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockProviderRepository_Exists_Call) RunAndReturn(run func(ctx context.Context, ids ...types.ProviderID) (bool, error)) *MockProviderRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockProviderRepository
func (_mock *MockProviderRepository) GetAll(ctx context.Context, parameters ProviderQueryParameters) ([]provider.Provider, int64, error) {
	ret := _mock.Called(ctx, parameters)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []provider.Provider
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ProviderQueryParameters) ([]provider.Provider, int64, error)); ok {
		return returnFunc(ctx, parameters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ProviderQueryParameters) []provider.Provider); ok {
		r0 = returnFunc(ctx, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]provider.Provider)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ProviderQueryParameters) int64); ok {
		r1 = returnFunc(ctx, parameters)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, ProviderQueryParameters) error); ok {
		r2 = returnFunc(ctx, parameters)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProviderRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockProviderRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - parameters ProviderQueryParameters
func (_e *MockProviderRepository_Expecter) GetAll(ctx interface{}, parameters interface{}) *MockProviderRepository_GetAll_Call {
	return &MockProviderRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, parameters)}
}

func (_c *MockProviderRepository_GetAll_Call) Run(run func(ctx context.Context, parameters ProviderQueryParameters)) *MockProviderRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ProviderQueryParameters
		if args[1] != nil {
			arg1 = args[1].(ProviderQueryParameters)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProviderRepository_GetAll_Call) Return(providers []provider.Provider, n int64, err error) *MockProviderRepository_GetAll_Call {
	_c.Call.Return(providers, n, err)
	return _c
}

func (_c *MockProviderRepository_GetAll_Call) RunAndReturn(run func(ctx context.Context, parameters ProviderQueryParameters) ([]provider.Provider, int64, error)) *MockProviderRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllForUser provides a mock function for the type MockProviderRepository
func (_mock *MockProviderRepository) GetAllForUser(ctx context.Context, userId types.UserID, parameters ProviderQueryParameters) ([]provider.Provider, int64, error) {
	ret := _mock.Called(ctx, userId, parameters)

	if len(ret) == 0 {
		panic("no return value specified for GetAllForUser")
	}

	var r0 []provider.Provider
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID, ProviderQueryParameters) ([]provider.Provider, int64, error)); ok {
		return returnFunc(ctx, userId, parameters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID, ProviderQueryParameters) []provider.Provider); ok {
		r0 = returnFunc(ctx, userId, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]provider.Provider)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.UserID, ProviderQueryParameters) int64); ok {
		r1 = returnFunc(ctx, userId, parameters)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, types.UserID, ProviderQueryParameters) error); ok {
		r2 = returnFunc(ctx, userId, parameters)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProviderRepository_GetAllForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllForUser'
type MockProviderRepository_GetAllForUser_Call struct {
	*mock.Call
}

// GetAllForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.UserID
//   - parameters ProviderQueryParameters
func (_e *MockProviderRepository_Expecter) GetAllForUser(ctx interface{}, userId interface{}, parameters interface{}) *MockProviderRepository_GetAllForUser_Call {
	return &MockProviderRepository_GetAllForUser_Call{Call: _e.mock.On("GetAllForUser", ctx, userId, parameters)}
}

func (_c *MockProviderRepository_GetAllForUser_Call) Run(run func(ctx context.Context, userId types.UserID, parameters ProviderQueryParameters)) *MockProviderRepository_GetAllForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.UserID
		if args[1] != nil {
			arg1 = args[1].(types.UserID)
		}
		var arg2 ProviderQueryParameters
		if args[2] != nil {
			arg2 = args[2].(ProviderQueryParameters)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProviderRepository_GetAllForUser_Call) Return(providers []provider.Provider, n int64, err error) *MockProviderRepository_GetAllForUser_Call {
	_c.Call.Return(providers, n, err)
	return _c
}

func (_c *MockProviderRepository_GetAllForUser_Call) RunAndReturn(run func(ctx context.Context, userId types.UserID, parameters ProviderQueryParameters) ([]provider.Provider, int64, error)) *MockProviderRepository_GetAllForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function for the type MockProviderRepository
func (_mock *MockProviderRepository) GetById(ctx context.Context, entityId types.ProviderID) (provider.Provider, error) {
	ret := _mock.Called(ctx, entityId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 provider.Provider
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.ProviderID) (provider.Provider, error)); ok {
		return returnFunc(ctx, entityId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.ProviderID) provider.Provider); ok {
		r0 = returnFunc(ctx, entityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provider.Provider)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.ProviderID) error); ok {
		r1 = returnFunc(ctx, entityId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProviderRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockProviderRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - entityId types.ProviderID
func (_e *MockProviderRepository_Expecter) GetById(ctx interface{}, entityId interface{}) *MockProviderRepository_GetById_Call {
	return &MockProviderRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, entityId)}
}

func (_c *MockProviderRepository_GetById_Call) Run(run func(ctx context.Context, entityId types.ProviderID)) *MockProviderRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.ProviderID
		if args[1] != nil {
			arg1 = args[1].(types.ProviderID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProviderRepository_GetById_Call) Return(provider1 provider.Provider, err error) *MockProviderRepository_GetById_Call {
	_c.Call.Return(provider1, err)
	return _c
}

func (_c *MockProviderRepository_GetById_Call) RunAndReturn(run func(ctx context.Context, entityId types.ProviderID) (provider.Provider, error)) *MockProviderRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIdForUser provides a mock function for the type MockProviderRepository
func (_mock *MockProviderRepository) GetByIdForUser(ctx context.Context, userId types.UserID, providerId types.ProviderID) (provider.Provider, error) {
	ret := _mock.Called(ctx, userId, providerId)

	if len(ret) == 0 {
		panic("no return value specified for GetByIdForUser")
	}

	var r0 provider.Provider
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID, types.ProviderID) (provider.Provider, error)); ok {
		return returnFunc(ctx, userId, providerId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID, types.ProviderID) provider.Provider); ok {
		r0 = returnFunc(ctx, userId, providerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provider.Provider)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.UserID, types.ProviderID) error); ok {
		r1 = returnFunc(ctx, userId, providerId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProviderRepository_GetByIdForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIdForUser'
type MockProviderRepository_GetByIdForUser_Call struct {
	*mock.Call
}

// GetByIdForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.UserID
//   - providerId types.ProviderID
func (_e *MockProviderRepository_Expecter) GetByIdForUser(ctx interface{}, userId interface{}, providerId interface{}) *MockProviderRepository_GetByIdForUser_Call {
	return &MockProviderRepository_GetByIdForUser_Call{Call: _e.mock.On("GetByIdForUser", ctx, userId, providerId)}
}

func (_c *MockProviderRepository_GetByIdForUser_Call) Run(run func(ctx context.Context, userId types.UserID, providerId types.ProviderID)) *MockProviderRepository_GetByIdForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.UserID
		if args[1] != nil {
			arg1 = args[1].(types.UserID)
		}
		var arg2 types.ProviderID
		if args[2] != nil {
			arg2 = args[2].(types.ProviderID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProviderRepository_GetByIdForUser_Call) Return(provider1 provider.Provider, err error) *MockProviderRepository_GetByIdForUser_Call {
	_c.Call.Return(provider1, err)
	return _c
}

func (_c *MockProviderRepository_GetByIdForUser_Call) RunAndReturn(run func(ctx context.Context, userId types.UserID, providerId types.ProviderID) (provider.Provider, error)) *MockProviderRepository_GetByIdForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemProviders provides a mock function for the type MockProviderRepository
func (_mock *MockProviderRepository) GetSystemProviders(ctx context.Context) ([]provider.Provider, int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemProviders")
	}

	var r0 []provider.Provider
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]provider.Provider, int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []provider.Provider); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]provider.Provider)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) int64); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = returnFunc(ctx)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProviderRepository_GetSystemProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemProviders'
type MockProviderRepository_GetSystemProviders_Call struct {
	*mock.Call
}

// GetSystemProviders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderRepository_Expecter) GetSystemProviders(ctx interface{}) *MockProviderRepository_GetSystemProviders_Call {
	return &MockProviderRepository_GetSystemProviders_Call{Call: _e.mock.On("GetSystemProviders", ctx)}
}

func (_c *MockProviderRepository_GetSystemProviders_Call) Run(run func(ctx context.Context)) *MockProviderRepository_GetSystemProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProviderRepository_GetSystemProviders_Call) Return(providers []provider.Provider, n int64, err error) *MockProviderRepository_GetSystemProviders_Call {
	_c.Call.Return(providers, n, err)
	return _c
}

func (_c *MockProviderRepository_GetSystemProviders_Call) RunAndReturn(run func(ctx context.Context) ([]provider.Provider, int64, error)) *MockProviderRepository_GetSystemProviders_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockProviderRepository
func (_mock *MockProviderRepository) Save(ctx context.Context, entities ...provider.Provider) error {
	var tmpRet mock.Arguments
	if len(entities) > 0 {
		tmpRet = _mock.Called(ctx, entities)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...provider.Provider) error); ok {
		r0 = returnFunc(ctx, entities...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProviderRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockProviderRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - entities ...provider.Provider
func (_e *MockProviderRepository_Expecter) Save(ctx interface{}, entities ...interface{}) *MockProviderRepository_Save_Call {
	return &MockProviderRepository_Save_Call{Call: _e.mock.On("Save",
		append([]interface{}{ctx}, entities...)...)}
}

func (_c *MockProviderRepository_Save_Call) Run(run func(ctx context.Context, entities ...provider.Provider)) *MockProviderRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []provider.Provider
		var variadicArgs []provider.Provider
		if len(args) > 1 {
			variadicArgs = args[1].([]provider.Provider)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockProviderRepository_Save_Call) Return(err error) *MockProviderRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProviderRepository_Save_Call) RunAndReturn(run func(ctx context.Context, entities ...provider.Provider) error) *MockProviderRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
