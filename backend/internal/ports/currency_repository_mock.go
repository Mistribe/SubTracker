// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/mistribe/subtracker/internal/domain/currency"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCurrencyRepository creates a new instance of MockCurrencyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCurrencyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCurrencyRepository {
	mock := &MockCurrencyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCurrencyRepository is an autogenerated mock type for the CurrencyRepository type
type MockCurrencyRepository struct {
	mock.Mock
}

type MockCurrencyRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCurrencyRepository) EXPECT() *MockCurrencyRepository_Expecter {
	return &MockCurrencyRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockCurrencyRepository
func (_mock *MockCurrencyRepository) Delete(ctx context.Context, entityId uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, entityId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, entityId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, entityId)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, entityId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCurrencyRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCurrencyRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - entityId uuid.UUID
func (_e *MockCurrencyRepository_Expecter) Delete(ctx interface{}, entityId interface{}) *MockCurrencyRepository_Delete_Call {
	return &MockCurrencyRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, entityId)}
}

func (_c *MockCurrencyRepository_Delete_Call) Run(run func(ctx context.Context, entityId uuid.UUID)) *MockCurrencyRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCurrencyRepository_Delete_Call) Return(b bool, err error) *MockCurrencyRepository_Delete_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockCurrencyRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, entityId uuid.UUID) (bool, error)) *MockCurrencyRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockCurrencyRepository
func (_mock *MockCurrencyRepository) Exists(ctx context.Context, ids ...uuid.UUID) (bool, error) {
	var tmpRet mock.Arguments
	if len(ids) > 0 {
		tmpRet = _mock.Called(ctx, ids)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, ids...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, ids...)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...uuid.UUID) error); ok {
		r1 = returnFunc(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCurrencyRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockCurrencyRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...uuid.UUID
func (_e *MockCurrencyRepository_Expecter) Exists(ctx interface{}, ids ...interface{}) *MockCurrencyRepository_Exists_Call {
	return &MockCurrencyRepository_Exists_Call{Call: _e.mock.On("Exists",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *MockCurrencyRepository_Exists_Call) Run(run func(ctx context.Context, ids ...uuid.UUID)) *MockCurrencyRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []uuid.UUID
		var variadicArgs []uuid.UUID
		if len(args) > 1 {
			variadicArgs = args[1].([]uuid.UUID)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockCurrencyRepository_Exists_Call) Return(b bool, err error) *MockCurrencyRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockCurrencyRepository_Exists_Call) RunAndReturn(run func(ctx context.Context, ids ...uuid.UUID) (bool, error)) *MockCurrencyRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function for the type MockCurrencyRepository
func (_mock *MockCurrencyRepository) GetById(ctx context.Context, entityId uuid.UUID) (currency.Rate, error) {
	ret := _mock.Called(ctx, entityId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 currency.Rate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (currency.Rate, error)); ok {
		return returnFunc(ctx, entityId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) currency.Rate); ok {
		r0 = returnFunc(ctx, entityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(currency.Rate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, entityId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCurrencyRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockCurrencyRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - entityId uuid.UUID
func (_e *MockCurrencyRepository_Expecter) GetById(ctx interface{}, entityId interface{}) *MockCurrencyRepository_GetById_Call {
	return &MockCurrencyRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, entityId)}
}

func (_c *MockCurrencyRepository_GetById_Call) Run(run func(ctx context.Context, entityId uuid.UUID)) *MockCurrencyRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCurrencyRepository_GetById_Call) Return(rate currency.Rate, err error) *MockCurrencyRepository_GetById_Call {
	_c.Call.Return(rate, err)
	return _c
}

func (_c *MockCurrencyRepository_GetById_Call) RunAndReturn(run func(ctx context.Context, entityId uuid.UUID) (currency.Rate, error)) *MockCurrencyRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestUpdateDate provides a mock function for the type MockCurrencyRepository
func (_mock *MockCurrencyRepository) GetLatestUpdateDate(ctx context.Context) (time.Time, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestUpdateDate")
	}

	var r0 time.Time
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (time.Time, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) time.Time); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCurrencyRepository_GetLatestUpdateDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestUpdateDate'
type MockCurrencyRepository_GetLatestUpdateDate_Call struct {
	*mock.Call
}

// GetLatestUpdateDate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCurrencyRepository_Expecter) GetLatestUpdateDate(ctx interface{}) *MockCurrencyRepository_GetLatestUpdateDate_Call {
	return &MockCurrencyRepository_GetLatestUpdateDate_Call{Call: _e.mock.On("GetLatestUpdateDate", ctx)}
}

func (_c *MockCurrencyRepository_GetLatestUpdateDate_Call) Run(run func(ctx context.Context)) *MockCurrencyRepository_GetLatestUpdateDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCurrencyRepository_GetLatestUpdateDate_Call) Return(time1 time.Time, err error) *MockCurrencyRepository_GetLatestUpdateDate_Call {
	_c.Call.Return(time1, err)
	return _c
}

func (_c *MockCurrencyRepository_GetLatestUpdateDate_Call) RunAndReturn(run func(ctx context.Context) (time.Time, error)) *MockCurrencyRepository_GetLatestUpdateDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetRatesByDate provides a mock function for the type MockCurrencyRepository
func (_mock *MockCurrencyRepository) GetRatesByDate(ctx context.Context, date time.Time) (currency.Rates, error) {
	ret := _mock.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for GetRatesByDate")
	}

	var r0 currency.Rates
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) (currency.Rates, error)); ok {
		return returnFunc(ctx, date)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) currency.Rates); ok {
		r0 = returnFunc(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(currency.Rates)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = returnFunc(ctx, date)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCurrencyRepository_GetRatesByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRatesByDate'
type MockCurrencyRepository_GetRatesByDate_Call struct {
	*mock.Call
}

// GetRatesByDate is a helper method to define mock.On call
//   - ctx context.Context
//   - date time.Time
func (_e *MockCurrencyRepository_Expecter) GetRatesByDate(ctx interface{}, date interface{}) *MockCurrencyRepository_GetRatesByDate_Call {
	return &MockCurrencyRepository_GetRatesByDate_Call{Call: _e.mock.On("GetRatesByDate", ctx, date)}
}

func (_c *MockCurrencyRepository_GetRatesByDate_Call) Run(run func(ctx context.Context, date time.Time)) *MockCurrencyRepository_GetRatesByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCurrencyRepository_GetRatesByDate_Call) Return(rates currency.Rates, err error) *MockCurrencyRepository_GetRatesByDate_Call {
	_c.Call.Return(rates, err)
	return _c
}

func (_c *MockCurrencyRepository_GetRatesByDate_Call) RunAndReturn(run func(ctx context.Context, date time.Time) (currency.Rates, error)) *MockCurrencyRepository_GetRatesByDate_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockCurrencyRepository
func (_mock *MockCurrencyRepository) Save(ctx context.Context, entities ...currency.Rate) error {
	var tmpRet mock.Arguments
	if len(entities) > 0 {
		tmpRet = _mock.Called(ctx, entities)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...currency.Rate) error); ok {
		r0 = returnFunc(ctx, entities...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCurrencyRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockCurrencyRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - entities ...currency.Rate
func (_e *MockCurrencyRepository_Expecter) Save(ctx interface{}, entities ...interface{}) *MockCurrencyRepository_Save_Call {
	return &MockCurrencyRepository_Save_Call{Call: _e.mock.On("Save",
		append([]interface{}{ctx}, entities...)...)}
}

func (_c *MockCurrencyRepository_Save_Call) Run(run func(ctx context.Context, entities ...currency.Rate)) *MockCurrencyRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []currency.Rate
		var variadicArgs []currency.Rate
		if len(args) > 1 {
			variadicArgs = args[1].([]currency.Rate)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockCurrencyRepository_Save_Call) Return(err error) *MockCurrencyRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCurrencyRepository_Save_Call) RunAndReturn(run func(ctx context.Context, entities ...currency.Rate) error) *MockCurrencyRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
