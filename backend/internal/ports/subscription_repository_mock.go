// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"
	"iter"

	"github.com/mistribe/subtracker/internal/domain/subscription"
	"github.com/mistribe/subtracker/internal/domain/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSubscriptionRepository creates a new instance of MockSubscriptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubscriptionRepository is an autogenerated mock type for the SubscriptionRepository type
type MockSubscriptionRepository struct {
	mock.Mock
}

type MockSubscriptionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepository_Expecter {
	return &MockSubscriptionRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockSubscriptionRepository
func (_mock *MockSubscriptionRepository) Delete(ctx context.Context, entityId types.SubscriptionID) (bool, error) {
	ret := _mock.Called(ctx, entityId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.SubscriptionID) (bool, error)); ok {
		return returnFunc(ctx, entityId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.SubscriptionID) bool); ok {
		r0 = returnFunc(ctx, entityId)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.SubscriptionID) error); ok {
		r1 = returnFunc(ctx, entityId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSubscriptionRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - entityId types.SubscriptionID
func (_e *MockSubscriptionRepository_Expecter) Delete(ctx interface{}, entityId interface{}) *MockSubscriptionRepository_Delete_Call {
	return &MockSubscriptionRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, entityId)}
}

func (_c *MockSubscriptionRepository_Delete_Call) Run(run func(ctx context.Context, entityId types.SubscriptionID)) *MockSubscriptionRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.SubscriptionID
		if args[1] != nil {
			arg1 = args[1].(types.SubscriptionID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubscriptionRepository_Delete_Call) Return(b bool, err error) *MockSubscriptionRepository_Delete_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockSubscriptionRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, entityId types.SubscriptionID) (bool, error)) *MockSubscriptionRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockSubscriptionRepository
func (_mock *MockSubscriptionRepository) Exists(ctx context.Context, ids ...types.SubscriptionID) (bool, error) {
	var tmpRet mock.Arguments
	if len(ids) > 0 {
		tmpRet = _mock.Called(ctx, ids)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...types.SubscriptionID) (bool, error)); ok {
		return returnFunc(ctx, ids...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...types.SubscriptionID) bool); ok {
		r0 = returnFunc(ctx, ids...)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...types.SubscriptionID) error); ok {
		r1 = returnFunc(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockSubscriptionRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...types.SubscriptionID
func (_e *MockSubscriptionRepository_Expecter) Exists(ctx interface{}, ids ...interface{}) *MockSubscriptionRepository_Exists_Call {
	return &MockSubscriptionRepository_Exists_Call{Call: _e.mock.On("Exists",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *MockSubscriptionRepository_Exists_Call) Run(run func(ctx context.Context, ids ...types.SubscriptionID)) *MockSubscriptionRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []types.SubscriptionID
		var variadicArgs []types.SubscriptionID
		if len(args) > 1 {
			variadicArgs = args[1].([]types.SubscriptionID)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockSubscriptionRepository_Exists_Call) Return(b bool, err error) *MockSubscriptionRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockSubscriptionRepository_Exists_Call) RunAndReturn(run func(ctx context.Context, ids ...types.SubscriptionID) (bool, error)) *MockSubscriptionRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockSubscriptionRepository
func (_mock *MockSubscriptionRepository) GetAll(ctx context.Context, parameters SubscriptionQueryParameters) ([]subscription.Subscription, int64, error) {
	ret := _mock.Called(ctx, parameters)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []subscription.Subscription
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, SubscriptionQueryParameters) ([]subscription.Subscription, int64, error)); ok {
		return returnFunc(ctx, parameters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, SubscriptionQueryParameters) []subscription.Subscription); ok {
		r0 = returnFunc(ctx, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]subscription.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, SubscriptionQueryParameters) int64); ok {
		r1 = returnFunc(ctx, parameters)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, SubscriptionQueryParameters) error); ok {
		r2 = returnFunc(ctx, parameters)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSubscriptionRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockSubscriptionRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - parameters SubscriptionQueryParameters
func (_e *MockSubscriptionRepository_Expecter) GetAll(ctx interface{}, parameters interface{}) *MockSubscriptionRepository_GetAll_Call {
	return &MockSubscriptionRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, parameters)}
}

func (_c *MockSubscriptionRepository_GetAll_Call) Run(run func(ctx context.Context, parameters SubscriptionQueryParameters)) *MockSubscriptionRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 SubscriptionQueryParameters
		if args[1] != nil {
			arg1 = args[1].(SubscriptionQueryParameters)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubscriptionRepository_GetAll_Call) Return(subscriptions []subscription.Subscription, n int64, err error) *MockSubscriptionRepository_GetAll_Call {
	_c.Call.Return(subscriptions, n, err)
	return _c
}

func (_c *MockSubscriptionRepository_GetAll_Call) RunAndReturn(run func(ctx context.Context, parameters SubscriptionQueryParameters) ([]subscription.Subscription, int64, error)) *MockSubscriptionRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllForUser provides a mock function for the type MockSubscriptionRepository
func (_mock *MockSubscriptionRepository) GetAllForUser(ctx context.Context, userId types.UserID, parameters SubscriptionQueryParameters) ([]subscription.Subscription, int64, error) {
	ret := _mock.Called(ctx, userId, parameters)

	if len(ret) == 0 {
		panic("no return value specified for GetAllForUser")
	}

	var r0 []subscription.Subscription
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID, SubscriptionQueryParameters) ([]subscription.Subscription, int64, error)); ok {
		return returnFunc(ctx, userId, parameters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID, SubscriptionQueryParameters) []subscription.Subscription); ok {
		r0 = returnFunc(ctx, userId, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]subscription.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.UserID, SubscriptionQueryParameters) int64); ok {
		r1 = returnFunc(ctx, userId, parameters)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, types.UserID, SubscriptionQueryParameters) error); ok {
		r2 = returnFunc(ctx, userId, parameters)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSubscriptionRepository_GetAllForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllForUser'
type MockSubscriptionRepository_GetAllForUser_Call struct {
	*mock.Call
}

// GetAllForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.UserID
//   - parameters SubscriptionQueryParameters
func (_e *MockSubscriptionRepository_Expecter) GetAllForUser(ctx interface{}, userId interface{}, parameters interface{}) *MockSubscriptionRepository_GetAllForUser_Call {
	return &MockSubscriptionRepository_GetAllForUser_Call{Call: _e.mock.On("GetAllForUser", ctx, userId, parameters)}
}

func (_c *MockSubscriptionRepository_GetAllForUser_Call) Run(run func(ctx context.Context, userId types.UserID, parameters SubscriptionQueryParameters)) *MockSubscriptionRepository_GetAllForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.UserID
		if args[1] != nil {
			arg1 = args[1].(types.UserID)
		}
		var arg2 SubscriptionQueryParameters
		if args[2] != nil {
			arg2 = args[2].(SubscriptionQueryParameters)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSubscriptionRepository_GetAllForUser_Call) Return(subscriptions []subscription.Subscription, n int64, err error) *MockSubscriptionRepository_GetAllForUser_Call {
	_c.Call.Return(subscriptions, n, err)
	return _c
}

func (_c *MockSubscriptionRepository_GetAllForUser_Call) RunAndReturn(run func(ctx context.Context, userId types.UserID, parameters SubscriptionQueryParameters) ([]subscription.Subscription, int64, error)) *MockSubscriptionRepository_GetAllForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllIt provides a mock function for the type MockSubscriptionRepository
func (_mock *MockSubscriptionRepository) GetAllIt(ctx context.Context, userId types.UserID, searchText string) iter.Seq[subscription.Subscription] {
	ret := _mock.Called(ctx, userId, searchText)

	if len(ret) == 0 {
		panic("no return value specified for GetAllIt")
	}

	var r0 iter.Seq[subscription.Subscription]
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID, string) iter.Seq[subscription.Subscription]); ok {
		r0 = returnFunc(ctx, userId, searchText)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iter.Seq[subscription.Subscription])
		}
	}
	return r0
}

// MockSubscriptionRepository_GetAllIt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllIt'
type MockSubscriptionRepository_GetAllIt_Call struct {
	*mock.Call
}

// GetAllIt is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.UserID
//   - searchText string
func (_e *MockSubscriptionRepository_Expecter) GetAllIt(ctx interface{}, userId interface{}, searchText interface{}) *MockSubscriptionRepository_GetAllIt_Call {
	return &MockSubscriptionRepository_GetAllIt_Call{Call: _e.mock.On("GetAllIt", ctx, userId, searchText)}
}

func (_c *MockSubscriptionRepository_GetAllIt_Call) Run(run func(ctx context.Context, userId types.UserID, searchText string)) *MockSubscriptionRepository_GetAllIt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.UserID
		if args[1] != nil {
			arg1 = args[1].(types.UserID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSubscriptionRepository_GetAllIt_Call) Return(seq iter.Seq[subscription.Subscription]) *MockSubscriptionRepository_GetAllIt_Call {
	_c.Call.Return(seq)
	return _c
}

func (_c *MockSubscriptionRepository_GetAllIt_Call) RunAndReturn(run func(ctx context.Context, userId types.UserID, searchText string) iter.Seq[subscription.Subscription]) *MockSubscriptionRepository_GetAllIt_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function for the type MockSubscriptionRepository
func (_mock *MockSubscriptionRepository) GetById(ctx context.Context, entityId types.SubscriptionID) (subscription.Subscription, error) {
	ret := _mock.Called(ctx, entityId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 subscription.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.SubscriptionID) (subscription.Subscription, error)); ok {
		return returnFunc(ctx, entityId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.SubscriptionID) subscription.Subscription); ok {
		r0 = returnFunc(ctx, entityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.SubscriptionID) error); ok {
		r1 = returnFunc(ctx, entityId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockSubscriptionRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - entityId types.SubscriptionID
func (_e *MockSubscriptionRepository_Expecter) GetById(ctx interface{}, entityId interface{}) *MockSubscriptionRepository_GetById_Call {
	return &MockSubscriptionRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, entityId)}
}

func (_c *MockSubscriptionRepository_GetById_Call) Run(run func(ctx context.Context, entityId types.SubscriptionID)) *MockSubscriptionRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.SubscriptionID
		if args[1] != nil {
			arg1 = args[1].(types.SubscriptionID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubscriptionRepository_GetById_Call) Return(subscription1 subscription.Subscription, err error) *MockSubscriptionRepository_GetById_Call {
	_c.Call.Return(subscription1, err)
	return _c
}

func (_c *MockSubscriptionRepository_GetById_Call) RunAndReturn(run func(ctx context.Context, entityId types.SubscriptionID) (subscription.Subscription, error)) *MockSubscriptionRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIdForUser provides a mock function for the type MockSubscriptionRepository
func (_mock *MockSubscriptionRepository) GetByIdForUser(ctx context.Context, userId types.UserID, id types.SubscriptionID) (subscription.Subscription, error) {
	ret := _mock.Called(ctx, userId, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByIdForUser")
	}

	var r0 subscription.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID, types.SubscriptionID) (subscription.Subscription, error)); ok {
		return returnFunc(ctx, userId, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID, types.SubscriptionID) subscription.Subscription); ok {
		r0 = returnFunc(ctx, userId, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.UserID, types.SubscriptionID) error); ok {
		r1 = returnFunc(ctx, userId, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionRepository_GetByIdForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIdForUser'
type MockSubscriptionRepository_GetByIdForUser_Call struct {
	*mock.Call
}

// GetByIdForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.UserID
//   - id types.SubscriptionID
func (_e *MockSubscriptionRepository_Expecter) GetByIdForUser(ctx interface{}, userId interface{}, id interface{}) *MockSubscriptionRepository_GetByIdForUser_Call {
	return &MockSubscriptionRepository_GetByIdForUser_Call{Call: _e.mock.On("GetByIdForUser", ctx, userId, id)}
}

func (_c *MockSubscriptionRepository_GetByIdForUser_Call) Run(run func(ctx context.Context, userId types.UserID, id types.SubscriptionID)) *MockSubscriptionRepository_GetByIdForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.UserID
		if args[1] != nil {
			arg1 = args[1].(types.UserID)
		}
		var arg2 types.SubscriptionID
		if args[2] != nil {
			arg2 = args[2].(types.SubscriptionID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSubscriptionRepository_GetByIdForUser_Call) Return(subscription1 subscription.Subscription, err error) *MockSubscriptionRepository_GetByIdForUser_Call {
	_c.Call.Return(subscription1, err)
	return _c
}

func (_c *MockSubscriptionRepository_GetByIdForUser_Call) RunAndReturn(run func(ctx context.Context, userId types.UserID, id types.SubscriptionID) (subscription.Subscription, error)) *MockSubscriptionRepository_GetByIdForUser_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockSubscriptionRepository
func (_mock *MockSubscriptionRepository) Save(ctx context.Context, entities ...subscription.Subscription) error {
	var tmpRet mock.Arguments
	if len(entities) > 0 {
		tmpRet = _mock.Called(ctx, entities)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...subscription.Subscription) error); ok {
		r0 = returnFunc(ctx, entities...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockSubscriptionRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - entities ...subscription.Subscription
func (_e *MockSubscriptionRepository_Expecter) Save(ctx interface{}, entities ...interface{}) *MockSubscriptionRepository_Save_Call {
	return &MockSubscriptionRepository_Save_Call{Call: _e.mock.On("Save",
		append([]interface{}{ctx}, entities...)...)}
}

func (_c *MockSubscriptionRepository_Save_Call) Run(run func(ctx context.Context, entities ...subscription.Subscription)) *MockSubscriptionRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []subscription.Subscription
		var variadicArgs []subscription.Subscription
		if len(args) > 1 {
			variadicArgs = args[1].([]subscription.Subscription)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockSubscriptionRepository_Save_Call) Return(err error) *MockSubscriptionRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionRepository_Save_Call) RunAndReturn(run func(ctx context.Context, entities ...subscription.Subscription) error) *MockSubscriptionRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
