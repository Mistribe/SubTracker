// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockPermissionRequest creates a new instance of MockPermissionRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPermissionRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPermissionRequest {
	mock := &MockPermissionRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPermissionRequest is an autogenerated mock type for the PermissionRequest type
type MockPermissionRequest struct {
	mock.Mock
}

type MockPermissionRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPermissionRequest) EXPECT() *MockPermissionRequest_Expecter {
	return &MockPermissionRequest_Expecter{mock: &_m.Mock}
}

// For provides a mock function for the type MockPermissionRequest
func (_mock *MockPermissionRequest) For(entity EntityWithOwnership) error {
	ret := _mock.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for For")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(EntityWithOwnership) error); ok {
		r0 = returnFunc(entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPermissionRequest_For_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'For'
type MockPermissionRequest_For_Call struct {
	*mock.Call
}

// For is a helper method to define mock.On call
//   - entity EntityWithOwnership
func (_e *MockPermissionRequest_Expecter) For(entity interface{}) *MockPermissionRequest_For_Call {
	return &MockPermissionRequest_For_Call{Call: _e.mock.On("For", entity)}
}

func (_c *MockPermissionRequest_For_Call) Run(run func(entity EntityWithOwnership)) *MockPermissionRequest_For_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 EntityWithOwnership
		if args[0] != nil {
			arg0 = args[0].(EntityWithOwnership)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPermissionRequest_For_Call) Return(err error) *MockPermissionRequest_For_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPermissionRequest_For_Call) RunAndReturn(run func(entity EntityWithOwnership) error) *MockPermissionRequest_For_Call {
	_c.Call.Return(run)
	return _c
}
