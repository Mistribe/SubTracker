// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"

	"github.com/mistribe/subtracker/internal/domain/user"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthentication creates a new instance of MockAuthentication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthentication(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthentication {
	mock := &MockAuthentication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthentication is an autogenerated mock type for the Authentication type
type MockAuthentication struct {
	mock.Mock
}

type MockAuthentication_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthentication) EXPECT() *MockAuthentication_Expecter {
	return &MockAuthentication_Expecter{mock: &_m.Mock}
}

// MustGetUserId provides a mock function for the type MockAuthentication
func (_mock *MockAuthentication) MustGetUserId(ctx context.Context) string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MustGetUserId")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAuthentication_MustGetUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustGetUserId'
type MockAuthentication_MustGetUserId_Call struct {
	*mock.Call
}

// MustGetUserId is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthentication_Expecter) MustGetUserId(ctx interface{}) *MockAuthentication_MustGetUserId_Call {
	return &MockAuthentication_MustGetUserId_Call{Call: _e.mock.On("MustGetUserId", ctx)}
}

func (_c *MockAuthentication_MustGetUserId_Call) Run(run func(ctx context.Context)) *MockAuthentication_MustGetUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthentication_MustGetUserId_Call) Return(s string) *MockAuthentication_MustGetUserId_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAuthentication_MustGetUserId_Call) RunAndReturn(run func(ctx context.Context) string) *MockAuthentication_MustGetUserId_Call {
	_c.Call.Return(run)
	return _c
}

// MustGetUserRole provides a mock function for the type MockAuthentication
func (_mock *MockAuthentication) MustGetUserRole(ctx context.Context) user.Role {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MustGetUserRole")
	}

	var r0 user.Role
	if returnFunc, ok := ret.Get(0).(func(context.Context) user.Role); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(user.Role)
	}
	return r0
}

// MockAuthentication_MustGetUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustGetUserRole'
type MockAuthentication_MustGetUserRole_Call struct {
	*mock.Call
}

// MustGetUserRole is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthentication_Expecter) MustGetUserRole(ctx interface{}) *MockAuthentication_MustGetUserRole_Call {
	return &MockAuthentication_MustGetUserRole_Call{Call: _e.mock.On("MustGetUserRole", ctx)}
}

func (_c *MockAuthentication_MustGetUserRole_Call) Run(run func(ctx context.Context)) *MockAuthentication_MustGetUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthentication_MustGetUserRole_Call) Return(role user.Role) *MockAuthentication_MustGetUserRole_Call {
	_c.Call.Return(role)
	return _c
}

func (_c *MockAuthentication_MustGetUserRole_Call) RunAndReturn(run func(ctx context.Context) user.Role) *MockAuthentication_MustGetUserRole_Call {
	_c.Call.Return(run)
	return _c
}
