// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"

	"github.com/mistribe/subtracker/internal/domain/authorization"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthorization creates a new instance of MockAuthorization. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorization(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorization {
	mock := &MockAuthorization{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthorization is an autogenerated mock type for the Authorization type
type MockAuthorization struct {
	mock.Mock
}

type MockAuthorization_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorization) EXPECT() *MockAuthorization_Expecter {
	return &MockAuthorization_Expecter{mock: &_m.Mock}
}

// Can provides a mock function for the type MockAuthorization
func (_mock *MockAuthorization) Can(ctx context.Context, permission authorization.Permission) PermissionRequest {
	ret := _mock.Called(ctx, permission)

	if len(ret) == 0 {
		panic("no return value specified for Can")
	}

	var r0 PermissionRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, authorization.Permission) PermissionRequest); ok {
		r0 = returnFunc(ctx, permission)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PermissionRequest)
		}
	}
	return r0
}

// MockAuthorization_Can_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Can'
type MockAuthorization_Can_Call struct {
	*mock.Call
}

// Can is a helper method to define mock.On call
//   - ctx context.Context
//   - permission authorization.Permission
func (_e *MockAuthorization_Expecter) Can(ctx interface{}, permission interface{}) *MockAuthorization_Can_Call {
	return &MockAuthorization_Can_Call{Call: _e.mock.On("Can", ctx, permission)}
}

func (_c *MockAuthorization_Can_Call) Run(run func(ctx context.Context, permission authorization.Permission)) *MockAuthorization_Can_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 authorization.Permission
		if args[1] != nil {
			arg1 = args[1].(authorization.Permission)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthorization_Can_Call) Return(permissionRequest PermissionRequest) *MockAuthorization_Can_Call {
	_c.Call.Return(permissionRequest)
	return _c
}

func (_c *MockAuthorization_Can_Call) RunAndReturn(run func(ctx context.Context, permission authorization.Permission) PermissionRequest) *MockAuthorization_Can_Call {
	_c.Call.Return(run)
	return _c
}
