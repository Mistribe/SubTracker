// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIdentityProvider creates a new instance of MockIdentityProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIdentityProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIdentityProvider {
	mock := &MockIdentityProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIdentityProvider is an autogenerated mock type for the IdentityProvider type
type MockIdentityProvider struct {
	mock.Mock
}

type MockIdentityProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIdentityProvider) EXPECT() *MockIdentityProvider_Expecter {
	return &MockIdentityProvider_Expecter{mock: &_m.Mock}
}

// DeleteUser provides a mock function for the type MockIdentityProvider
func (_mock *MockIdentityProvider) DeleteUser(ctx context.Context, userId string) error {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIdentityProvider_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockIdentityProvider_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockIdentityProvider_Expecter) DeleteUser(ctx interface{}, userId interface{}) *MockIdentityProvider_DeleteUser_Call {
	return &MockIdentityProvider_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, userId)}
}

func (_c *MockIdentityProvider_DeleteUser_Call) Run(run func(ctx context.Context, userId string)) *MockIdentityProvider_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIdentityProvider_DeleteUser_Call) Return(err error) *MockIdentityProvider_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIdentityProvider_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, userId string) error) *MockIdentityProvider_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// ReadSessionToken provides a mock function for the type MockIdentityProvider
func (_mock *MockIdentityProvider) ReadSessionToken(ctx context.Context, sessionToken string) (Identity, error) {
	ret := _mock.Called(ctx, sessionToken)

	if len(ret) == 0 {
		panic("no return value specified for ReadSessionToken")
	}

	var r0 Identity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (Identity, error)); ok {
		return returnFunc(ctx, sessionToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) Identity); ok {
		r0 = returnFunc(ctx, sessionToken)
	} else {
		r0 = ret.Get(0).(Identity)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, sessionToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityProvider_ReadSessionToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadSessionToken'
type MockIdentityProvider_ReadSessionToken_Call struct {
	*mock.Call
}

// ReadSessionToken is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionToken string
func (_e *MockIdentityProvider_Expecter) ReadSessionToken(ctx interface{}, sessionToken interface{}) *MockIdentityProvider_ReadSessionToken_Call {
	return &MockIdentityProvider_ReadSessionToken_Call{Call: _e.mock.On("ReadSessionToken", ctx, sessionToken)}
}

func (_c *MockIdentityProvider_ReadSessionToken_Call) Run(run func(ctx context.Context, sessionToken string)) *MockIdentityProvider_ReadSessionToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIdentityProvider_ReadSessionToken_Call) Return(identity Identity, err error) *MockIdentityProvider_ReadSessionToken_Call {
	_c.Call.Return(identity, err)
	return _c
}

func (_c *MockIdentityProvider_ReadSessionToken_Call) RunAndReturn(run func(ctx context.Context, sessionToken string) (Identity, error)) *MockIdentityProvider_ReadSessionToken_Call {
	_c.Call.Return(run)
	return _c
}
