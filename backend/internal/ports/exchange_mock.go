// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"
	"time"

	"github.com/mistribe/subtracker/internal/domain/currency"
	mock "github.com/stretchr/testify/mock"
)

// NewMockExchange creates a new instance of MockExchange. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExchange(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExchange {
	mock := &MockExchange{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExchange is an autogenerated mock type for the Exchange type
type MockExchange struct {
	mock.Mock
}

type MockExchange_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExchange) EXPECT() *MockExchange_Expecter {
	return &MockExchange_Expecter{mock: &_m.Mock}
}

// ToCurrency provides a mock function for the type MockExchange
func (_mock *MockExchange) ToCurrency(ctx context.Context, initial currency.Amount, target currency.Unit) (currency.Amount, error) {
	ret := _mock.Called(ctx, initial, target)

	if len(ret) == 0 {
		panic("no return value specified for ToCurrency")
	}

	var r0 currency.Amount
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, currency.Amount, currency.Unit) (currency.Amount, error)); ok {
		return returnFunc(ctx, initial, target)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, currency.Amount, currency.Unit) currency.Amount); ok {
		r0 = returnFunc(ctx, initial, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(currency.Amount)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, currency.Amount, currency.Unit) error); ok {
		r1 = returnFunc(ctx, initial, target)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExchange_ToCurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToCurrency'
type MockExchange_ToCurrency_Call struct {
	*mock.Call
}

// ToCurrency is a helper method to define mock.On call
//   - ctx context.Context
//   - initial currency.Amount
//   - target currency.Unit
func (_e *MockExchange_Expecter) ToCurrency(ctx interface{}, initial interface{}, target interface{}) *MockExchange_ToCurrency_Call {
	return &MockExchange_ToCurrency_Call{Call: _e.mock.On("ToCurrency", ctx, initial, target)}
}

func (_c *MockExchange_ToCurrency_Call) Run(run func(ctx context.Context, initial currency.Amount, target currency.Unit)) *MockExchange_ToCurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 currency.Amount
		if args[1] != nil {
			arg1 = args[1].(currency.Amount)
		}
		var arg2 currency.Unit
		if args[2] != nil {
			arg2 = args[2].(currency.Unit)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockExchange_ToCurrency_Call) Return(amount currency.Amount, err error) *MockExchange_ToCurrency_Call {
	_c.Call.Return(amount, err)
	return _c
}

func (_c *MockExchange_ToCurrency_Call) RunAndReturn(run func(ctx context.Context, initial currency.Amount, target currency.Unit) (currency.Amount, error)) *MockExchange_ToCurrency_Call {
	_c.Call.Return(run)
	return _c
}

// ToCurrencyAt provides a mock function for the type MockExchange
func (_mock *MockExchange) ToCurrencyAt(ctx context.Context, initial currency.Amount, target currency.Unit, at time.Time) (currency.Amount, error) {
	ret := _mock.Called(ctx, initial, target, at)

	if len(ret) == 0 {
		panic("no return value specified for ToCurrencyAt")
	}

	var r0 currency.Amount
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, currency.Amount, currency.Unit, time.Time) (currency.Amount, error)); ok {
		return returnFunc(ctx, initial, target, at)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, currency.Amount, currency.Unit, time.Time) currency.Amount); ok {
		r0 = returnFunc(ctx, initial, target, at)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(currency.Amount)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, currency.Amount, currency.Unit, time.Time) error); ok {
		r1 = returnFunc(ctx, initial, target, at)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExchange_ToCurrencyAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToCurrencyAt'
type MockExchange_ToCurrencyAt_Call struct {
	*mock.Call
}

// ToCurrencyAt is a helper method to define mock.On call
//   - ctx context.Context
//   - initial currency.Amount
//   - target currency.Unit
//   - at time.Time
func (_e *MockExchange_Expecter) ToCurrencyAt(ctx interface{}, initial interface{}, target interface{}, at interface{}) *MockExchange_ToCurrencyAt_Call {
	return &MockExchange_ToCurrencyAt_Call{Call: _e.mock.On("ToCurrencyAt", ctx, initial, target, at)}
}

func (_c *MockExchange_ToCurrencyAt_Call) Run(run func(ctx context.Context, initial currency.Amount, target currency.Unit, at time.Time)) *MockExchange_ToCurrencyAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 currency.Amount
		if args[1] != nil {
			arg1 = args[1].(currency.Amount)
		}
		var arg2 currency.Unit
		if args[2] != nil {
			arg2 = args[2].(currency.Unit)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockExchange_ToCurrencyAt_Call) Return(amount currency.Amount, err error) *MockExchange_ToCurrencyAt_Call {
	_c.Call.Return(amount, err)
	return _c
}

func (_c *MockExchange_ToCurrencyAt_Call) RunAndReturn(run func(ctx context.Context, initial currency.Amount, target currency.Unit, at time.Time) (currency.Amount, error)) *MockExchange_ToCurrencyAt_Call {
	_c.Call.Return(run)
	return _c
}
