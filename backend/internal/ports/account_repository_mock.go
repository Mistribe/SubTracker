// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"

	"github.com/mistribe/subtracker/internal/domain/account"
	"github.com/mistribe/subtracker/internal/domain/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAccountRepository creates a new instance of MockAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountRepository {
	mock := &MockAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccountRepository is an autogenerated mock type for the AccountRepository type
type MockAccountRepository struct {
	mock.Mock
}

type MockAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountRepository) EXPECT() *MockAccountRepository_Expecter {
	return &MockAccountRepository_Expecter{mock: &_m.Mock}
}

// GetById provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) GetById(ctx context.Context, userId types.UserID) (account.Account, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 account.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID) (account.Account, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID) account.Account); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(account.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.UserID) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockAccountRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.UserID
func (_e *MockAccountRepository_Expecter) GetById(ctx interface{}, userId interface{}) *MockAccountRepository_GetById_Call {
	return &MockAccountRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, userId)}
}

func (_c *MockAccountRepository_GetById_Call) Run(run func(ctx context.Context, userId types.UserID)) *MockAccountRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.UserID
		if args[1] != nil {
			arg1 = args[1].(types.UserID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_GetById_Call) Return(account1 account.Account, err error) *MockAccountRepository_GetById_Call {
	_c.Call.Return(account1, err)
	return _c
}

func (_c *MockAccountRepository_GetById_Call) RunAndReturn(run func(ctx context.Context, userId types.UserID) (account.Account, error)) *MockAccountRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetFamily provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) GetFamily(ctx context.Context, userId types.UserID) (*types.FamilyID, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetFamily")
	}

	var r0 *types.FamilyID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID) (*types.FamilyID, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID) *types.FamilyID); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.FamilyID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.UserID) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_GetFamily_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFamily'
type MockAccountRepository_GetFamily_Call struct {
	*mock.Call
}

// GetFamily is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.UserID
func (_e *MockAccountRepository_Expecter) GetFamily(ctx interface{}, userId interface{}) *MockAccountRepository_GetFamily_Call {
	return &MockAccountRepository_GetFamily_Call{Call: _e.mock.On("GetFamily", ctx, userId)}
}

func (_c *MockAccountRepository_GetFamily_Call) Run(run func(ctx context.Context, userId types.UserID)) *MockAccountRepository_GetFamily_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.UserID
		if args[1] != nil {
			arg1 = args[1].(types.UserID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_GetFamily_Call) Return(familyID *types.FamilyID, err error) *MockAccountRepository_GetFamily_Call {
	_c.Call.Return(familyID, err)
	return _c
}

func (_c *MockAccountRepository_GetFamily_Call) RunAndReturn(run func(ctx context.Context, userId types.UserID) (*types.FamilyID, error)) *MockAccountRepository_GetFamily_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) Save(ctx context.Context, profile account.Account) error {
	ret := _mock.Called(ctx, profile)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, account.Account) error); ok {
		r0 = returnFunc(ctx, profile)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockAccountRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - profile account.Account
func (_e *MockAccountRepository_Expecter) Save(ctx interface{}, profile interface{}) *MockAccountRepository_Save_Call {
	return &MockAccountRepository_Save_Call{Call: _e.mock.On("Save", ctx, profile)}
}

func (_c *MockAccountRepository_Save_Call) Run(run func(ctx context.Context, profile account.Account)) *MockAccountRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 account.Account
		if args[1] != nil {
			arg1 = args[1].(account.Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_Save_Call) Return(err error) *MockAccountRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountRepository_Save_Call) RunAndReturn(run func(ctx context.Context, profile account.Account) error) *MockAccountRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
