// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"

	"github.com/mistribe/subtracker/internal/domain/family"
	"github.com/mistribe/subtracker/internal/domain/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFamilyRepository creates a new instance of MockFamilyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFamilyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFamilyRepository {
	mock := &MockFamilyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFamilyRepository is an autogenerated mock type for the FamilyRepository type
type MockFamilyRepository struct {
	mock.Mock
}

type MockFamilyRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFamilyRepository) EXPECT() *MockFamilyRepository_Expecter {
	return &MockFamilyRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockFamilyRepository
func (_mock *MockFamilyRepository) Delete(ctx context.Context, entityId types.FamilyID) (bool, error) {
	ret := _mock.Called(ctx, entityId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.FamilyID) (bool, error)); ok {
		return returnFunc(ctx, entityId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.FamilyID) bool); ok {
		r0 = returnFunc(ctx, entityId)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.FamilyID) error); ok {
		r1 = returnFunc(ctx, entityId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFamilyRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockFamilyRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - entityId types.FamilyID
func (_e *MockFamilyRepository_Expecter) Delete(ctx interface{}, entityId interface{}) *MockFamilyRepository_Delete_Call {
	return &MockFamilyRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, entityId)}
}

func (_c *MockFamilyRepository_Delete_Call) Run(run func(ctx context.Context, entityId types.FamilyID)) *MockFamilyRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.FamilyID
		if args[1] != nil {
			arg1 = args[1].(types.FamilyID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFamilyRepository_Delete_Call) Return(b bool, err error) *MockFamilyRepository_Delete_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockFamilyRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, entityId types.FamilyID) (bool, error)) *MockFamilyRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockFamilyRepository
func (_mock *MockFamilyRepository) Exists(ctx context.Context, ids ...types.FamilyID) (bool, error) {
	var tmpRet mock.Arguments
	if len(ids) > 0 {
		tmpRet = _mock.Called(ctx, ids)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...types.FamilyID) (bool, error)); ok {
		return returnFunc(ctx, ids...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...types.FamilyID) bool); ok {
		r0 = returnFunc(ctx, ids...)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...types.FamilyID) error); ok {
		r1 = returnFunc(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFamilyRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockFamilyRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...types.FamilyID
func (_e *MockFamilyRepository_Expecter) Exists(ctx interface{}, ids ...interface{}) *MockFamilyRepository_Exists_Call {
	return &MockFamilyRepository_Exists_Call{Call: _e.mock.On("Exists",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *MockFamilyRepository_Exists_Call) Run(run func(ctx context.Context, ids ...types.FamilyID)) *MockFamilyRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []types.FamilyID
		var variadicArgs []types.FamilyID
		if len(args) > 1 {
			variadicArgs = args[1].([]types.FamilyID)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFamilyRepository_Exists_Call) Return(b bool, err error) *MockFamilyRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockFamilyRepository_Exists_Call) RunAndReturn(run func(ctx context.Context, ids ...types.FamilyID) (bool, error)) *MockFamilyRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function for the type MockFamilyRepository
func (_mock *MockFamilyRepository) GetById(ctx context.Context, entityId types.FamilyID) (family.Family, error) {
	ret := _mock.Called(ctx, entityId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 family.Family
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.FamilyID) (family.Family, error)); ok {
		return returnFunc(ctx, entityId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.FamilyID) family.Family); ok {
		r0 = returnFunc(ctx, entityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(family.Family)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.FamilyID) error); ok {
		r1 = returnFunc(ctx, entityId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFamilyRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockFamilyRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - entityId types.FamilyID
func (_e *MockFamilyRepository_Expecter) GetById(ctx interface{}, entityId interface{}) *MockFamilyRepository_GetById_Call {
	return &MockFamilyRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, entityId)}
}

func (_c *MockFamilyRepository_GetById_Call) Run(run func(ctx context.Context, entityId types.FamilyID)) *MockFamilyRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.FamilyID
		if args[1] != nil {
			arg1 = args[1].(types.FamilyID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFamilyRepository_GetById_Call) Return(family1 family.Family, err error) *MockFamilyRepository_GetById_Call {
	_c.Call.Return(family1, err)
	return _c
}

func (_c *MockFamilyRepository_GetById_Call) RunAndReturn(run func(ctx context.Context, entityId types.FamilyID) (family.Family, error)) *MockFamilyRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserFamily provides a mock function for the type MockFamilyRepository
func (_mock *MockFamilyRepository) GetAccountFamily(ctx context.Context, userId types.UserID) (family.Family, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountFamily")
	}

	var r0 family.Family
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID) (family.Family, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID) family.Family); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(family.Family)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.UserID) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFamilyRepository_GetUserFamily_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountFamily'
type MockFamilyRepository_GetUserFamily_Call struct {
	*mock.Call
}

// GetUserFamily is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.UserID
func (_e *MockFamilyRepository_Expecter) GetUserFamily(ctx interface{}, userId interface{}) *MockFamilyRepository_GetUserFamily_Call {
	return &MockFamilyRepository_GetUserFamily_Call{Call: _e.mock.On("GetAccountFamily", ctx, userId)}
}

func (_c *MockFamilyRepository_GetUserFamily_Call) Run(run func(ctx context.Context, userId types.UserID)) *MockFamilyRepository_GetUserFamily_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.UserID
		if args[1] != nil {
			arg1 = args[1].(types.UserID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFamilyRepository_GetUserFamily_Call) Return(family1 family.Family, err error) *MockFamilyRepository_GetUserFamily_Call {
	_c.Call.Return(family1, err)
	return _c
}

func (_c *MockFamilyRepository_GetUserFamily_Call) RunAndReturn(run func(ctx context.Context, userId types.UserID) (family.Family, error)) *MockFamilyRepository_GetUserFamily_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserMemberOfFamily provides a mock function for the type MockFamilyRepository
func (_mock *MockFamilyRepository) IsUserMemberOfFamily(ctx context.Context, familyId types.FamilyID, userId types.UserID) (bool, error) {
	ret := _mock.Called(ctx, familyId, userId)

	if len(ret) == 0 {
		panic("no return value specified for IsUserMemberOfFamily")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.FamilyID, types.UserID) (bool, error)); ok {
		return returnFunc(ctx, familyId, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.FamilyID, types.UserID) bool); ok {
		r0 = returnFunc(ctx, familyId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.FamilyID, types.UserID) error); ok {
		r1 = returnFunc(ctx, familyId, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFamilyRepository_IsUserMemberOfFamily_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserMemberOfFamily'
type MockFamilyRepository_IsUserMemberOfFamily_Call struct {
	*mock.Call
}

// IsUserMemberOfFamily is a helper method to define mock.On call
//   - ctx context.Context
//   - familyId types.FamilyID
//   - userId types.UserID
func (_e *MockFamilyRepository_Expecter) IsUserMemberOfFamily(ctx interface{}, familyId interface{}, userId interface{}) *MockFamilyRepository_IsUserMemberOfFamily_Call {
	return &MockFamilyRepository_IsUserMemberOfFamily_Call{Call: _e.mock.On("IsUserMemberOfFamily", ctx, familyId, userId)}
}

func (_c *MockFamilyRepository_IsUserMemberOfFamily_Call) Run(run func(ctx context.Context, familyId types.FamilyID, userId types.UserID)) *MockFamilyRepository_IsUserMemberOfFamily_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.FamilyID
		if args[1] != nil {
			arg1 = args[1].(types.FamilyID)
		}
		var arg2 types.UserID
		if args[2] != nil {
			arg2 = args[2].(types.UserID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFamilyRepository_IsUserMemberOfFamily_Call) Return(b bool, err error) *MockFamilyRepository_IsUserMemberOfFamily_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockFamilyRepository_IsUserMemberOfFamily_Call) RunAndReturn(run func(ctx context.Context, familyId types.FamilyID, userId types.UserID) (bool, error)) *MockFamilyRepository_IsUserMemberOfFamily_Call {
	_c.Call.Return(run)
	return _c
}

// MemberExists provides a mock function for the type MockFamilyRepository
func (_mock *MockFamilyRepository) MemberExists(ctx context.Context, familyId types.FamilyID, members ...types.FamilyMemberID) (bool, error) {
	var tmpRet mock.Arguments
	if len(members) > 0 {
		tmpRet = _mock.Called(ctx, familyId, members)
	} else {
		tmpRet = _mock.Called(ctx, familyId)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for MemberExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.FamilyID, ...types.FamilyMemberID) (bool, error)); ok {
		return returnFunc(ctx, familyId, members...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.FamilyID, ...types.FamilyMemberID) bool); ok {
		r0 = returnFunc(ctx, familyId, members...)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.FamilyID, ...types.FamilyMemberID) error); ok {
		r1 = returnFunc(ctx, familyId, members...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFamilyRepository_MemberExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MemberExists'
type MockFamilyRepository_MemberExists_Call struct {
	*mock.Call
}

// MemberExists is a helper method to define mock.On call
//   - ctx context.Context
//   - familyId types.FamilyID
//   - members ...types.FamilyMemberID
func (_e *MockFamilyRepository_Expecter) MemberExists(ctx interface{}, familyId interface{}, members ...interface{}) *MockFamilyRepository_MemberExists_Call {
	return &MockFamilyRepository_MemberExists_Call{Call: _e.mock.On("MemberExists",
		append([]interface{}{ctx, familyId}, members...)...)}
}

func (_c *MockFamilyRepository_MemberExists_Call) Run(run func(ctx context.Context, familyId types.FamilyID, members ...types.FamilyMemberID)) *MockFamilyRepository_MemberExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.FamilyID
		if args[1] != nil {
			arg1 = args[1].(types.FamilyID)
		}
		var arg2 []types.FamilyMemberID
		var variadicArgs []types.FamilyMemberID
		if len(args) > 2 {
			variadicArgs = args[2].([]types.FamilyMemberID)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockFamilyRepository_MemberExists_Call) Return(b bool, err error) *MockFamilyRepository_MemberExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockFamilyRepository_MemberExists_Call) RunAndReturn(run func(ctx context.Context, familyId types.FamilyID, members ...types.FamilyMemberID) (bool, error)) *MockFamilyRepository_MemberExists_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockFamilyRepository
func (_mock *MockFamilyRepository) Save(ctx context.Context, entities ...family.Family) error {
	var tmpRet mock.Arguments
	if len(entities) > 0 {
		tmpRet = _mock.Called(ctx, entities)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...family.Family) error); ok {
		r0 = returnFunc(ctx, entities...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFamilyRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockFamilyRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - entities ...family.Family
func (_e *MockFamilyRepository_Expecter) Save(ctx interface{}, entities ...interface{}) *MockFamilyRepository_Save_Call {
	return &MockFamilyRepository_Save_Call{Call: _e.mock.On("Save",
		append([]interface{}{ctx}, entities...)...)}
}

func (_c *MockFamilyRepository_Save_Call) Run(run func(ctx context.Context, entities ...family.Family)) *MockFamilyRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []family.Family
		var variadicArgs []family.Family
		if len(args) > 1 {
			variadicArgs = args[1].([]family.Family)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFamilyRepository_Save_Call) Return(err error) *MockFamilyRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFamilyRepository_Save_Call) RunAndReturn(run func(ctx context.Context, entities ...family.Family) error) *MockFamilyRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
