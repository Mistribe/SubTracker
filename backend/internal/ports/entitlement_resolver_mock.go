// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"

	"github.com/mistribe/subtracker/internal/domain/account"
	"github.com/mistribe/subtracker/internal/domain/billing"
	"github.com/mistribe/subtracker/internal/domain/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEntitlementResolver creates a new instance of MockEntitlementResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEntitlementResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEntitlementResolver {
	mock := &MockEntitlementResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEntitlementResolver is an autogenerated mock type for the EntitlementResolver type
type MockEntitlementResolver struct {
	mock.Mock
}

type MockEntitlementResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEntitlementResolver) EXPECT() *MockEntitlementResolver_Expecter {
	return &MockEntitlementResolver_Expecter{mock: &_m.Mock}
}

// CheckBoolean provides a mock function for the type MockEntitlementResolver
func (_mock *MockEntitlementResolver) CheckBoolean(ctx context.Context, account1 account.ConnectedAccount, featureID types.FeatureID) (bool, error) {
	ret := _mock.Called(ctx, account1, featureID)

	if len(ret) == 0 {
		panic("no return value specified for CheckBoolean")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, account.ConnectedAccount, types.FeatureID) (bool, error)); ok {
		return returnFunc(ctx, account1, featureID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, account.ConnectedAccount, types.FeatureID) bool); ok {
		r0 = returnFunc(ctx, account1, featureID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, account.ConnectedAccount, types.FeatureID) error); ok {
		r1 = returnFunc(ctx, account1, featureID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEntitlementResolver_CheckBoolean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckBoolean'
type MockEntitlementResolver_CheckBoolean_Call struct {
	*mock.Call
}

// CheckBoolean is a helper method to define mock.On call
//   - ctx context.Context
//   - account1 account.ConnectedAccount
//   - featureID types.FeatureID
func (_e *MockEntitlementResolver_Expecter) CheckBoolean(ctx interface{}, account1 interface{}, featureID interface{}) *MockEntitlementResolver_CheckBoolean_Call {
	return &MockEntitlementResolver_CheckBoolean_Call{Call: _e.mock.On("CheckBoolean", ctx, account1, featureID)}
}

func (_c *MockEntitlementResolver_CheckBoolean_Call) Run(run func(ctx context.Context, account1 account.ConnectedAccount, featureID types.FeatureID)) *MockEntitlementResolver_CheckBoolean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 account.ConnectedAccount
		if args[1] != nil {
			arg1 = args[1].(account.ConnectedAccount)
		}
		var arg2 types.FeatureID
		if args[2] != nil {
			arg2 = args[2].(types.FeatureID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEntitlementResolver_CheckBoolean_Call) Return(b bool, err error) *MockEntitlementResolver_CheckBoolean_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockEntitlementResolver_CheckBoolean_Call) RunAndReturn(run func(ctx context.Context, account1 account.ConnectedAccount, featureID types.FeatureID) (bool, error)) *MockEntitlementResolver_CheckBoolean_Call {
	_c.Call.Return(run)
	return _c
}

// CheckQuota provides a mock function for the type MockEntitlementResolver
func (_mock *MockEntitlementResolver) CheckQuota(ctx context.Context, featureID types.FeatureID, needed int64) (bool, billing.EffectiveEntitlement, error) {
	ret := _mock.Called(ctx, featureID, needed)

	if len(ret) == 0 {
		panic("no return value specified for CheckQuota")
	}

	var r0 bool
	var r1 billing.EffectiveEntitlement
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.FeatureID, int64) (bool, billing.EffectiveEntitlement, error)); ok {
		return returnFunc(ctx, featureID, needed)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.FeatureID, int64) bool); ok {
		r0 = returnFunc(ctx, featureID, needed)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.FeatureID, int64) billing.EffectiveEntitlement); ok {
		r1 = returnFunc(ctx, featureID, needed)
	} else {
		r1 = ret.Get(1).(billing.EffectiveEntitlement)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, types.FeatureID, int64) error); ok {
		r2 = returnFunc(ctx, featureID, needed)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockEntitlementResolver_CheckQuota_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckQuota'
type MockEntitlementResolver_CheckQuota_Call struct {
	*mock.Call
}

// CheckQuota is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID types.FeatureID
//   - needed int64
func (_e *MockEntitlementResolver_Expecter) CheckQuota(ctx interface{}, featureID interface{}, needed interface{}) *MockEntitlementResolver_CheckQuota_Call {
	return &MockEntitlementResolver_CheckQuota_Call{Call: _e.mock.On("CheckQuota", ctx, featureID, needed)}
}

func (_c *MockEntitlementResolver_CheckQuota_Call) Run(run func(ctx context.Context, featureID types.FeatureID, needed int64)) *MockEntitlementResolver_CheckQuota_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.FeatureID
		if args[1] != nil {
			arg1 = args[1].(types.FeatureID)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEntitlementResolver_CheckQuota_Call) Return(allowed bool, eff billing.EffectiveEntitlement, err error) *MockEntitlementResolver_CheckQuota_Call {
	_c.Call.Return(allowed, eff, err)
	return _c
}

func (_c *MockEntitlementResolver_CheckQuota_Call) RunAndReturn(run func(ctx context.Context, featureID types.FeatureID, needed int64) (bool, billing.EffectiveEntitlement, error)) *MockEntitlementResolver_CheckQuota_Call {
	_c.Call.Return(run)
	return _c
}

// CheckQuotaForAccount provides a mock function for the type MockEntitlementResolver
func (_mock *MockEntitlementResolver) CheckQuotaForAccount(ctx context.Context, account1 account.ConnectedAccount, featureID types.FeatureID, needed int64) (bool, billing.EffectiveEntitlement, error) {
	ret := _mock.Called(ctx, account1, featureID, needed)

	if len(ret) == 0 {
		panic("no return value specified for CheckQuotaForAccount")
	}

	var r0 bool
	var r1 billing.EffectiveEntitlement
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, account.ConnectedAccount, types.FeatureID, int64) (bool, billing.EffectiveEntitlement, error)); ok {
		return returnFunc(ctx, account1, featureID, needed)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, account.ConnectedAccount, types.FeatureID, int64) bool); ok {
		r0 = returnFunc(ctx, account1, featureID, needed)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, account.ConnectedAccount, types.FeatureID, int64) billing.EffectiveEntitlement); ok {
		r1 = returnFunc(ctx, account1, featureID, needed)
	} else {
		r1 = ret.Get(1).(billing.EffectiveEntitlement)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, account.ConnectedAccount, types.FeatureID, int64) error); ok {
		r2 = returnFunc(ctx, account1, featureID, needed)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockEntitlementResolver_CheckQuotaForAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckQuotaForAccount'
type MockEntitlementResolver_CheckQuotaForAccount_Call struct {
	*mock.Call
}

// CheckQuotaForAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - account1 account.ConnectedAccount
//   - featureID types.FeatureID
//   - needed int64
func (_e *MockEntitlementResolver_Expecter) CheckQuotaForAccount(ctx interface{}, account1 interface{}, featureID interface{}, needed interface{}) *MockEntitlementResolver_CheckQuotaForAccount_Call {
	return &MockEntitlementResolver_CheckQuotaForAccount_Call{Call: _e.mock.On("CheckQuotaForAccount", ctx, account1, featureID, needed)}
}

func (_c *MockEntitlementResolver_CheckQuotaForAccount_Call) Run(run func(ctx context.Context, account1 account.ConnectedAccount, featureID types.FeatureID, needed int64)) *MockEntitlementResolver_CheckQuotaForAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 account.ConnectedAccount
		if args[1] != nil {
			arg1 = args[1].(account.ConnectedAccount)
		}
		var arg2 types.FeatureID
		if args[2] != nil {
			arg2 = args[2].(types.FeatureID)
		}
		var arg3 int64
		if args[3] != nil {
			arg3 = args[3].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockEntitlementResolver_CheckQuotaForAccount_Call) Return(allowed bool, eff billing.EffectiveEntitlement, err error) *MockEntitlementResolver_CheckQuotaForAccount_Call {
	_c.Call.Return(allowed, eff, err)
	return _c
}

func (_c *MockEntitlementResolver_CheckQuotaForAccount_Call) RunAndReturn(run func(ctx context.Context, account1 account.ConnectedAccount, featureID types.FeatureID, needed int64) (bool, billing.EffectiveEntitlement, error)) *MockEntitlementResolver_CheckQuotaForAccount_Call {
	_c.Call.Return(run)
	return _c
}

// Resolve provides a mock function for the type MockEntitlementResolver
func (_mock *MockEntitlementResolver) Resolve(ctx context.Context, account1 account.ConnectedAccount, featureID types.FeatureID) (billing.EffectiveEntitlement, error) {
	ret := _mock.Called(ctx, account1, featureID)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 billing.EffectiveEntitlement
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, account.ConnectedAccount, types.FeatureID) (billing.EffectiveEntitlement, error)); ok {
		return returnFunc(ctx, account1, featureID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, account.ConnectedAccount, types.FeatureID) billing.EffectiveEntitlement); ok {
		r0 = returnFunc(ctx, account1, featureID)
	} else {
		r0 = ret.Get(0).(billing.EffectiveEntitlement)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, account.ConnectedAccount, types.FeatureID) error); ok {
		r1 = returnFunc(ctx, account1, featureID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEntitlementResolver_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type MockEntitlementResolver_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//   - ctx context.Context
//   - account1 account.ConnectedAccount
//   - featureID types.FeatureID
func (_e *MockEntitlementResolver_Expecter) Resolve(ctx interface{}, account1 interface{}, featureID interface{}) *MockEntitlementResolver_Resolve_Call {
	return &MockEntitlementResolver_Resolve_Call{Call: _e.mock.On("Resolve", ctx, account1, featureID)}
}

func (_c *MockEntitlementResolver_Resolve_Call) Run(run func(ctx context.Context, account1 account.ConnectedAccount, featureID types.FeatureID)) *MockEntitlementResolver_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 account.ConnectedAccount
		if args[1] != nil {
			arg1 = args[1].(account.ConnectedAccount)
		}
		var arg2 types.FeatureID
		if args[2] != nil {
			arg2 = args[2].(types.FeatureID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEntitlementResolver_Resolve_Call) Return(effectiveEntitlement billing.EffectiveEntitlement, err error) *MockEntitlementResolver_Resolve_Call {
	_c.Call.Return(effectiveEntitlement, err)
	return _c
}

func (_c *MockEntitlementResolver_Resolve_Call) RunAndReturn(run func(ctx context.Context, account1 account.ConnectedAccount, featureID types.FeatureID) (billing.EffectiveEntitlement, error)) *MockEntitlementResolver_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// Resolves provides a mock function for the type MockEntitlementResolver
func (_mock *MockEntitlementResolver) Resolves(ctx context.Context, account1 account.ConnectedAccount, featureIDs []types.FeatureID) ([]billing.EffectiveEntitlement, error) {
	ret := _mock.Called(ctx, account1, featureIDs)

	if len(ret) == 0 {
		panic("no return value specified for Resolves")
	}

	var r0 []billing.EffectiveEntitlement
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, account.ConnectedAccount, []types.FeatureID) ([]billing.EffectiveEntitlement, error)); ok {
		return returnFunc(ctx, account1, featureIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, account.ConnectedAccount, []types.FeatureID) []billing.EffectiveEntitlement); ok {
		r0 = returnFunc(ctx, account1, featureIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]billing.EffectiveEntitlement)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, account.ConnectedAccount, []types.FeatureID) error); ok {
		r1 = returnFunc(ctx, account1, featureIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEntitlementResolver_Resolves_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolves'
type MockEntitlementResolver_Resolves_Call struct {
	*mock.Call
}

// Resolves is a helper method to define mock.On call
//   - ctx context.Context
//   - account1 account.ConnectedAccount
//   - featureIDs []types.FeatureID
func (_e *MockEntitlementResolver_Expecter) Resolves(ctx interface{}, account1 interface{}, featureIDs interface{}) *MockEntitlementResolver_Resolves_Call {
	return &MockEntitlementResolver_Resolves_Call{Call: _e.mock.On("Resolves", ctx, account1, featureIDs)}
}

func (_c *MockEntitlementResolver_Resolves_Call) Run(run func(ctx context.Context, account1 account.ConnectedAccount, featureIDs []types.FeatureID)) *MockEntitlementResolver_Resolves_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 account.ConnectedAccount
		if args[1] != nil {
			arg1 = args[1].(account.ConnectedAccount)
		}
		var arg2 []types.FeatureID
		if args[2] != nil {
			arg2 = args[2].([]types.FeatureID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEntitlementResolver_Resolves_Call) Return(effectiveEntitlements []billing.EffectiveEntitlement, err error) *MockEntitlementResolver_Resolves_Call {
	_c.Call.Return(effectiveEntitlements, err)
	return _c
}

func (_c *MockEntitlementResolver_Resolves_Call) RunAndReturn(run func(ctx context.Context, account1 account.ConnectedAccount, featureIDs []types.FeatureID) ([]billing.EffectiveEntitlement, error)) *MockEntitlementResolver_Resolves_Call {
	_c.Call.Return(run)
	return _c
}
