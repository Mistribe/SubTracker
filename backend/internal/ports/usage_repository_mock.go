// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"

	"github.com/mistribe/subtracker/internal/domain/billing"
	"github.com/mistribe/subtracker/internal/domain/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUsageRepository creates a new instance of MockUsageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsageRepository {
	mock := &MockUsageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsageRepository is an autogenerated mock type for the UsageRepository type
type MockUsageRepository struct {
	mock.Mock
}

type MockUsageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsageRepository) EXPECT() *MockUsageRepository_Expecter {
	return &MockUsageRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockUsageRepository
func (_mock *MockUsageRepository) Get(ctx context.Context, userID types.UserID, featureID types.FeatureID) (billing.UsageCounter, bool, error) {
	ret := _mock.Called(ctx, userID, featureID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 billing.UsageCounter
	var r1 bool
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID, types.FeatureID) (billing.UsageCounter, bool, error)); ok {
		return returnFunc(ctx, userID, featureID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UserID, types.FeatureID) billing.UsageCounter); ok {
		r0 = returnFunc(ctx, userID, featureID)
	} else {
		r0 = ret.Get(0).(billing.UsageCounter)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.UserID, types.FeatureID) bool); ok {
		r1 = returnFunc(ctx, userID, featureID)
	} else {
		r1 = ret.Get(1).(bool)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, types.UserID, types.FeatureID) error); ok {
		r2 = returnFunc(ctx, userID, featureID)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUsageRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUsageRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - userID types.UserID
//   - featureID types.FeatureID
func (_e *MockUsageRepository_Expecter) Get(ctx interface{}, userID interface{}, featureID interface{}) *MockUsageRepository_Get_Call {
	return &MockUsageRepository_Get_Call{Call: _e.mock.On("Get", ctx, userID, featureID)}
}

func (_c *MockUsageRepository_Get_Call) Run(run func(ctx context.Context, userID types.UserID, featureID types.FeatureID)) *MockUsageRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.UserID
		if args[1] != nil {
			arg1 = args[1].(types.UserID)
		}
		var arg2 types.FeatureID
		if args[2] != nil {
			arg2 = args[2].(types.FeatureID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsageRepository_Get_Call) Return(usageCounter billing.UsageCounter, b bool, err error) *MockUsageRepository_Get_Call {
	_c.Call.Return(usageCounter, b, err)
	return _c
}

func (_c *MockUsageRepository_Get_Call) RunAndReturn(run func(ctx context.Context, userID types.UserID, featureID types.FeatureID) (billing.UsageCounter, bool, error)) *MockUsageRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}
