components:
  schemas:
    endpoints.OwnerModel:
      properties:
        etag:
          type: string
        family_id:
          type: string
        type:
          type: string
        userId:
          type: string
      required:
      - etag
      - type
      type: object
    endpoints.PaginatedResponseModel-endpoints_ProviderModel:
      properties:
        data:
          description: Data contains the list of items for the current page
          items:
            $ref: '#/components/schemas/endpoints.ProviderModel'
          type: array
          uniqueItems: false
        length:
          description: Length represents the number of items in the current page
          type: integer
        total:
          description: Total represents the total number of items available
          type: integer
      required:
      - data
      - length
      - total
      type: object
    endpoints.PaginatedResponseModel-endpoints_familyModel:
      properties:
        data:
          description: Data contains the list of items for the current page
          items:
            $ref: '#/components/schemas/endpoints.familyModel'
          type: array
          uniqueItems: false
        length:
          description: Length represents the number of items in the current page
          type: integer
        total:
          description: Total represents the total number of items available
          type: integer
      required:
      - data
      - length
      - total
      type: object
    endpoints.PaginatedResponseModel-endpoints_labelModel:
      properties:
        data:
          description: Data contains the list of items for the current page
          items:
            $ref: '#/components/schemas/endpoints.labelModel'
          type: array
          uniqueItems: false
        length:
          description: Length represents the number of items in the current page
          type: integer
        total:
          description: Total represents the total number of items available
          type: integer
      required:
      - data
      - length
      - total
      type: object
    endpoints.PaginatedResponseModel-endpoints_subscriptionModel:
      properties:
        data:
          description: Data contains the list of items for the current page
          items:
            $ref: '#/components/schemas/endpoints.subscriptionModel'
          type: array
          uniqueItems: false
        length:
          description: Length represents the number of items in the current page
          type: integer
        total:
          description: Total represents the total number of items available
          type: integer
      required:
      - data
      - length
      - total
      type: object
    endpoints.PlanModel:
      properties:
        created_at:
          format: date-time
          type: string
        description:
          type: string
        etag:
          type: string
        id:
          type: string
        name:
          type: string
        prices:
          items:
            $ref: '#/components/schemas/endpoints.PriceModel'
          type: array
          uniqueItems: false
        updated_at:
          format: date-time
          type: string
      required:
      - created_at
      - etag
      - id
      - name
      - prices
      - updated_at
      type: object
    endpoints.PriceModel:
      properties:
        amount:
          type: number
        created_at:
          format: date-time
          type: string
        currency:
          type: string
        end_date:
          format: date-time
          type: string
        etag:
          type: string
        id:
          type: string
        start_date:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - amount
      - created_at
      - currency
      - etag
      - id
      - start_date
      - updated_at
      type: object
    endpoints.ProviderModel:
      properties:
        created_at:
          format: date-time
          type: string
        description:
          type: string
        etag:
          type: string
        icon_url:
          type: string
        id:
          type: string
        labels:
          items:
            type: string
          type: array
          uniqueItems: false
        name:
          type: string
        owner:
          $ref: '#/components/schemas/endpoints.OwnerModel'
        plans:
          items:
            $ref: '#/components/schemas/endpoints.PlanModel'
          type: array
          uniqueItems: false
        pricing_page_url:
          type: string
        updated_at:
          format: date-time
          type: string
        url:
          type: string
      required:
      - created_at
      - etag
      - id
      - labels
      - name
      - owner
      - plans
      - updated_at
      type: object
    endpoints.createFamilyMemberModel:
      properties:
        created_at:
          format: date-time
          type: string
        email:
          type: string
        id:
          type: string
        is_kid:
          type: boolean
        name:
          type: string
      required:
      - name
      type: object
    endpoints.createFamilyModel:
      properties:
        created_at:
          format: date-time
          type: string
        have_joint_account:
          type: boolean
        id:
          type: string
        name:
          type: string
      required:
      - name
      type: object
    endpoints.createLabelModel:
      properties:
        color:
          type: string
        created_at:
          format: date-time
          type: string
        id:
          type: string
        name:
          type: string
        owner:
          $ref: '#/components/schemas/endpoints.editableOwnerModel'
      required:
      - color
      - name
      - owner
      type: object
    endpoints.createPlanModel:
      properties:
        created_at:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
      required:
      - name
      type: object
    endpoints.createPriceModel:
      description: Price information for a plan
      properties:
        amount:
          type: number
        created_at:
          format: date-time
          type: string
        currency:
          type: string
        end_date:
          format: date-time
          type: string
        id:
          type: string
        start_date:
          format: date-time
          type: string
      required:
      - amount
      - currency
      - start_date
      type: object
    endpoints.createProviderModel:
      properties:
        created_at:
          format: date-time
          type: string
        description:
          type: string
        icon_url:
          type: string
        id:
          type: string
        labels:
          items:
            type: string
          type: array
          uniqueItems: false
        name:
          type: string
        owner:
          $ref: '#/components/schemas/endpoints.editableOwnerModel'
        pricing_page_url:
          type: string
        url:
          type: string
      required:
      - labels
      - name
      - owner
      type: object
    endpoints.createSubscriptionModel:
      properties:
        created_at:
          type: string
        custom_recurrency:
          type: integer
        end_date:
          format: date-time
          type: string
        free_trial_days:
          type: integer
        friendly_name:
          type: string
        id:
          type: string
        owner:
          $ref: '#/components/schemas/endpoints.editableOwnerModel'
        payer:
          $ref: '#/components/schemas/endpoints.editableSubscriptionPayerModel'
        plan_id:
          type: string
        price_id:
          type: string
        recurrency:
          type: string
        service_provider_id:
          type: string
        service_users:
          items:
            type: string
          type: array
          uniqueItems: false
        start_date:
          format: date-time
          type: string
      required:
      - owner
      - plan_id
      - price_id
      - recurrency
      - service_provider_id
      - start_date
      type: object
    endpoints.editableOwnerModel:
      properties:
        family_id:
          type: string
        type:
          type: string
      required:
      - type
      type: object
    endpoints.editableSubscriptionPayerModel:
      properties:
        family_id:
          type: string
        memberId:
          type: string
        type:
          type: string
      required:
      - family_id
      - type
      type: object
    endpoints.familyMemberModel:
      properties:
        created_at:
          format: date-time
          type: string
        etag:
          type: string
        family_id:
          type: string
        id:
          type: string
        is_kid:
          type: boolean
        name:
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - created_at
      - etag
      - family_id
      - id
      - is_kid
      - name
      - updated_at
      type: object
    endpoints.familyModel:
      properties:
        created_at:
          format: date-time
          type: string
        etag:
          type: string
        have_joint_account:
          type: boolean
        id:
          type: string
        is_owner:
          type: boolean
        members:
          items:
            $ref: '#/components/schemas/endpoints.familyMemberModel'
          type: array
          uniqueItems: false
        name:
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - created_at
      - etag
      - have_joint_account
      - id
      - is_owner
      - members
      - name
      - updated_at
      type: object
    endpoints.httpError:
      properties:
        message:
          type: string
      required:
      - message
      type: object
    endpoints.labelModel:
      properties:
        color:
          type: string
        created_at:
          format: date-time
          type: string
        etag:
          type: string
        id:
          type: string
        name:
          type: string
        owner:
          $ref: '#/components/schemas/endpoints.OwnerModel'
        updated_at:
          format: date-time
          type: string
      required:
      - color
      - created_at
      - etag
      - id
      - name
      - owner
      - updated_at
      type: object
    endpoints.patchFamilyMemberModel:
      description: Model for updating family member details
      properties:
        id:
          description: Optional member ID. If not provided, new member will be created
          type: string
        is_kid:
          description: Indicates if the member is a kid
          type: boolean
        name:
          description: member's name
          type: string
        updated_at:
          description: Optional timestamp of the last update
          format: date-time
          type: string
      required:
      - is_kid
      - name
      type: object
    endpoints.patchFamilyModel:
      description: Model for updating family details
      properties:
        id:
          description: Family ID
          type: string
        members:
          description: List of family members
          items:
            $ref: '#/components/schemas/endpoints.patchFamilyMemberModel'
          type: array
          uniqueItems: false
        name:
          description: Family name
          type: string
        updated_at:
          description: Optional timestamp of the last update
          format: date-time
          type: string
      required:
      - id
      - name
      type: object
    endpoints.patchSubscriptionModel:
      properties:
        custom_recurrency:
          type: integer
        end_date:
          format: date-time
          type: string
        free_trial_days:
          type: integer
        friendly_name:
          type: string
        id:
          type: string
        owner:
          $ref: '#/components/schemas/endpoints.editableOwnerModel'
        payer:
          $ref: '#/components/schemas/endpoints.editableSubscriptionPayerModel'
        plan_id:
          type: string
        price_id:
          type: string
        recurrency:
          type: string
        service_provider_id:
          type: string
        service_users:
          items:
            type: string
          type: array
          uniqueItems: false
        start_date:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - owner
      - plan_id
      - price_id
      - recurrency
      - service_provider_id
      - start_date
      type: object
    endpoints.subscriptionModel:
      properties:
        created_at:
          format: date-time
          type: string
        custom_recurrency:
          type: integer
        end_date:
          format: date-time
          type: string
        etag:
          type: string
        free_trial_days:
          type: integer
        friendly_name:
          type: string
        id:
          type: string
        owner:
          $ref: '#/components/schemas/endpoints.OwnerModel'
        payer:
          $ref: '#/components/schemas/endpoints.subscriptionPayerModel'
        plan_id:
          type: string
        price_id:
          type: string
        recurrency:
          type: string
        service_provider_id:
          type: string
        service_users:
          items:
            type: string
          type: array
          uniqueItems: false
        start_date:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - created_at
      - etag
      - id
      - owner
      - plan_id
      - price_id
      - recurrency
      - service_provider_id
      - start_date
      - updated_at
      type: object
    endpoints.subscriptionPayerModel:
      properties:
        etag:
          type: string
        family_id:
          type: string
        memberId:
          type: string
        type:
          type: string
      required:
      - etag
      - family_id
      - type
      type: object
    endpoints.updateFamilyMemberModel:
      properties:
        id_kid:
          type: boolean
        name:
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - id_kid
      - name
      type: object
    endpoints.updateFamilyModel:
      properties:
        name:
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
    endpoints.updateLabelModel:
      properties:
        color:
          type: string
        name:
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - color
      - name
      type: object
    endpoints.updatePriceModel:
      properties:
        amount:
          type: number
        created_at:
          format: date-time
          type: string
        currency:
          type: string
        end_date:
          format: date-time
          type: string
        start_date:
          format: date-time
          type: string
      required:
      - amount
      - currency
      - start_date
      type: object
    endpoints.updateSubscriptionModel:
      properties:
        custom_recurrency:
          type: integer
        end_date:
          format: date-time
          type: string
        free_trial_days:
          type: integer
        friendly_name:
          type: string
        owner:
          $ref: '#/components/schemas/endpoints.editableOwnerModel'
        payer:
          $ref: '#/components/schemas/endpoints.editableSubscriptionPayerModel'
        plan_id:
          type: string
        price_id:
          type: string
        recurrency:
          type: string
        service_provider_id:
          type: string
        service_users:
          items:
            type: string
          type: array
          uniqueItems: false
        start_date:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - owner
      - plan_id
      - price_id
      - recurrency
      - service_provider_id
      - start_date
      type: object
externalDocs:
  description: ""
  url: ""
info:
  contact:
    email: support@mistribe.com
    name: API Support
    url: http://subtracker.mistribe.com/support
  description: This api provide HTTPRest endpoints for the application SubTracker.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://subtracker.mistribe.com/terms/
  title: SubTracker API
  version: "1.0"
openapi: 3.1.0
paths:
  /api/v1/providers:
    get:
      description: Returns a paginated list of providers
      parameters:
      - description: Page number
        in: query
        name: page
        schema:
          default: 1
          type: integer
      - description: Items per page
        in: query
        name: size
        schema:
          default: 10
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.PaginatedResponseModel-endpoints_ProviderModel'
          description: OK
      summary: Get all providers
      tags:
      - providers
  /api/v1/providers/{providerId}:
    get:
      description: Returns a single provider by its ID
      parameters:
      - description: Provider ID
        in: path
        name: providerId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.ProviderModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Get provider by ID
      tags:
      - providers
  /families:
    get:
      description: Get all family members
      parameters:
      - description: Number of items per page
        in: query
        name: size
        schema:
          type: integer
      - description: Offset number
        in: query
        name: page
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.PaginatedResponseModel-endpoints_familyModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Get all family members
      tags:
      - family
    patch:
      description: Patch family with members
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.patchFamilyModel'
        description: Family update data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.familyModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Unauthorized
      summary: Patch family with members
      tags:
      - family
    post:
      description: Create a new family
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.createFamilyModel'
        description: Family data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.familyModel'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Create a new family
      tags:
      - family
  /families/{familyId}:
    delete:
      description: Delete family by ID
      parameters:
      - description: Family ID
        in: path
        name: familyId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Not Found
      summary: Delete family by ID
      tags:
      - family
    get:
      description: Get family member by ID
      parameters:
      - description: Family member ID
        in: path
        name: familyId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.familyModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Not Found
      summary: Get family member by ID
      tags:
      - family
    put:
      description: Update a family
      parameters:
      - description: Family member ID
        in: path
        name: familyId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.updateFamilyModel'
        description: Family data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.familyModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Update a family
      tags:
      - family
  /families/{familyId}/members:
    post:
      description: Add a new family member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.createFamilyMemberModel'
        description: Family member data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.familyModel'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Add a new family member
      tags:
      - family
  /families/{familyId}/members/{id}:
    delete:
      description: Delete family member by ID
      parameters:
      - description: Family member ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Not Found
      summary: Delete family member by ID
      tags:
      - family
    put:
      description: Update family member by ID
      parameters:
      - description: Family member ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.updateFamilyMemberModel'
        description: Family member data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.familyModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Not Found
      summary: Update family member by ID
      tags:
      - family
  /labels:
    get:
      description: Get all labels
      parameters:
      - description: Include default labels
        in: query
        name: with_default
        schema:
          type: boolean
      - description: Number of items per page
        in: query
        name: size
        schema:
          type: integer
      - description: Offset number
        in: query
        name: page
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.PaginatedResponseModel-endpoints_labelModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Get all labels
      tags:
      - label
    post:
      description: Create a new label
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.createLabelModel'
        description: label data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.labelModel'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Create a new label
      tags:
      - label
  /labels/{id}:
    delete:
      description: Delete label by ID
      parameters:
      - description: Label ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Not Found
      summary: Delete label by ID
      tags:
      - label
    get:
      description: Get label by ID
      parameters:
      - description: label ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.labelModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Not Found
      summary: Get label by ID
      tags:
      - label
    put:
      description: Update label by ID
      parameters:
      - description: label ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.updateLabelModel'
        description: label data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.labelModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Not Found
      summary: Update label by ID
      tags:
      - label
  /labels/default:
    get:
      description: Retrieves a list of default labels
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/endpoints.labelModel'
                type: array
          description: OK
      summary: Get default labels
      tags:
      - label
  /providers:
    post:
      description: Create a new provider with plans and prices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.createProviderModel'
        description: Provider information
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.ProviderModel'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Create a new provider
      tags:
      - providers
  /providers/{providerId}/plans:
    post:
      description: Create a new plan for a provider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.createPlanModel'
        description: Plan information
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.PlanModel'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Create a new provider plan
      tags:
      - providers
  /providers/{providerId}/plans/{planId}:
    put:
      description: Update a new price for a provider plan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.updatePriceModel'
        description: Price information
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.PriceModel'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Update a new provider plan
      tags:
      - providers
  /providers/{providerId}/plans/{planId}/prices:
    post:
      description: Create a new price for a provider plan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.createPriceModel'
        description: Price information
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.PriceModel'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Create a new provider price
      tags:
      - providers
  /providers/{providerId}/plans/{planId}/prices/{priceId}:
    put:
      description: Update a provider price
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.updatePriceModel'
        description: Price information
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.PriceModel'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Update a provider price
      tags:
      - providers
  /subscriptions:
    get:
      description: Get all subscriptions
      parameters:
      - description: Number of items per page
        in: query
        name: size
        schema:
          type: integer
      - description: Offset number
        in: query
        name: page
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.PaginatedResponseModel-endpoints_subscriptionModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Get all subscriptions
      tags:
      - subscription
    patch:
      description: Update an existing subscription with new details
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.patchSubscriptionModel'
        description: Subscription details to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.subscriptionModel'
          description: Updated subscription
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Invalid request
      summary: Update subscription
      tags:
      - subscription
    post:
      description: Create a new subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.createSubscriptionModel'
        description: Subscription data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.subscriptionModel'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Create a new subscription
      tags:
      - subscription
  /subscriptions/{subscriptionId}:
    delete:
      description: Delete an existing subscription
      parameters:
      - description: Subscription ID
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Delete an existing subscription
      tags:
      - subscription
    get:
      description: Get subscription by ID
      parameters:
      - description: Subscription ID
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.subscriptionModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Not Found
      summary: Get subscription by ID
      tags:
      - subscription
    put:
      description: Update an existing subscription
      parameters:
      - description: Subscription ID
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoints.updateSubscriptionModel'
        description: Subscription data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.subscriptionModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoints.httpError'
          description: Bad Request
      summary: Update an existing subscription
      tags:
      - subscription
servers:
- description: Production server
  url: https://api.subtracker.mistribe.com
- description: Development server
  url: http://localhost:8080
