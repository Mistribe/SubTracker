package ginx

// ProblemTypeAboutBlank is the default problem type URI when no more specific type applies (RFC7807).
const ProblemTypeAboutBlank = "about:blank"

// HttpErrorResponse represents an RFC 7807 Problem Details object.
// It keeps a deprecated `message` field for backward compatibility with existing clients
// and documentation that still reference it. New consumers should rely on `detail`.
// See: https://datatracker.ietf.org/doc/html/rfc7807
//
// Fields:
//
//	type:     A URI reference that identifies the problem type (application-specific URI)
//	title:    A short, human-readable summary of the problem type
//	status:   The HTTP status code generated by the origin server for this occurrence
//	detail:   A human-readable explanation specific to this occurrence
//	instance: A URI reference that identifies the specific occurrence (e.g. request id path)
//
// swagger:model HttpErrorResponse
// @Description RFC7807 Problem Details error response
// Extension members can be added later if needed (e.g. trace_id, error_code, violations, etc.).
type HttpErrorResponse struct {
	Type     string `json:"type,omitempty" example:"about:blank"`
	Title    string `json:"title" example:"Bad Request"`
	Status   int    `json:"status" example:"400"`
	Detail   string `json:"detail,omitempty" example:"Missing required field 'name'"`
	Instance string `json:"instance,omitempty" example:"/api/resource/123"`
}

// NewProblem creates a new HttpErrorResponse (Problem Details) ensuring backward compatibility.
func NewProblem(problemType string, title string, status int, detail string, instance string) HttpErrorResponse {
	if problemType == "" {
		problemType = ProblemTypeAboutBlank
	}
	return HttpErrorResponse{
		Type:     problemType,
		Title:    title,
		Status:   status,
		Detail:   detail,
		Instance: instance,
	}
}
